Terminals unused in grammar

   CHAR_POINTER
   REAL_POINTER
   FLOAT_POINTER
   INT_POINTER
   NULL_VALUE
   NE_OP
   BOOL_VALUE
   CHAR_VALUE
   STRING_VALUE
   test
   UMINUS
   UFUNC


State 7 conflicts: 2 shift/reduce
State 19 conflicts: 2 shift/reduce
State 39 conflicts: 1 shift/reduce
State 49 conflicts: 2 reduce/reduce
State 59 conflicts: 1 shift/reduce
State 61 conflicts: 1 shift/reduce, 4 reduce/reduce
State 81 conflicts: 1 shift/reduce
State 83 conflicts: 4 shift/reduce
State 85 conflicts: 4 shift/reduce
State 88 conflicts: 1 reduce/reduce
State 126 conflicts: 5 shift/reduce
State 133 conflicts: 5 shift/reduce
State 134 conflicts: 5 shift/reduce
State 135 conflicts: 5 shift/reduce
State 136 conflicts: 5 shift/reduce
State 137 conflicts: 4 shift/reduce
State 138 conflicts: 4 shift/reduce
State 139 conflicts: 4 shift/reduce
State 140 conflicts: 4 shift/reduce
State 141 conflicts: 5 shift/reduce
State 142 conflicts: 5 shift/reduce


Grammar

    0 $accept: S $end

    1 S: CODE

    2 CODE: FUNC_PROC_DEC CODE2
    3     | MAIN_FUNC

    4 CODE2: %empty
    5      | MAIN_FUNC

    6 MAIN_FUNC: PROC MAIN COMPUND_STATMENT

    7 FUNC_PROC_DEC: DEF_A FUNC_PROC_DEC2

    8 FUNC_PROC_DEC2: %empty
    9               | DEF_A FUNC_PROC_DEC2

   10 DEF_A: FUNC_DEF
   11      | PROC_DEF

   12 PROC_DEF: PROC ID ARGES COMPUND_STATMENT

   13 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK

   14 ARGES: '(' ARGES2

   15 ARGES2: ')'
   16       | OUT_ARGES ')'

   17 OUT_ARGES: INNER_ARGS ':' TYPE OUT_ARGES2

   18 OUT_ARGES2: %empty
   19           | ';' OUT_ARGES

   20 INNER_ARGS: ID
   21           | ID ',' INNER_ARGS

   22 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}'
   23           | '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

   24 EXPRASION: LOG_EXPRATIOSN_LIST
   25          | ASSIGNMENT
   26          | FUNC_ACTIVE
   27          | REL_EXPRATION
   28          | UNARY_EXPRATION

   29 REL_EXPRATION: CONST REL_EXPRATION2
   30              | '(' REL_EXPRATION ')' REL_EXPRATION2

   31 REL_EXPRATION2: %empty
   32               | '>' REL_EXPRATION REL_EXPRATION2
   33               | '<' REL_EXPRATION REL_EXPRATION2
   34               | GE_OP REL_EXPRATION REL_EXPRATION2
   35               | SE_OP REL_EXPRATION REL_EXPRATION2
   36               | EQL_OP REL_EXPRATION REL_EXPRATION2

   37 UNARY_EXPRATION: CONST UNARY_EXPRATION2
   38                | '-' UNARY_EXPRATION UNARY_EXPRATION2
   39                | '(' UNARY_EXPRATION ')'

   40 UNARY_EXPRATION2: %empty
   41                 | '+' UNARY_EXPRATION UNARY_EXPRATION2
   42                 | '-' UNARY_EXPRATION UNARY_EXPRATION2
   43                 | '*' UNARY_EXPRATION UNARY_EXPRATION2
   44                 | '/' UNARY_EXPRATION UNARY_EXPRATION2

   45 LOG_EXPRATIOSN_LIST: CONST
   46                    | LOG_EXPRATIOSN_LIST AND_OP LOG_EXPRATIOSN_LIST
   47                    | LOG_EXPRATIOSN_LIST OR_OP LOG_EXPRATIOSN_LIST

   48 ASSIGNMENT: ID '=' EXPRASION
   49           | ID '=' '&' ID
   50           | ID '=' '^' ID

   51 FUNC_ACTIVE: ID '(' ')'
   52            | ID '(' INNER_ARGS ')'

   53 STASTMENT_LIST: STASTMENT_LIST STASTMENT
   54               | STASTMENT

   55 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   56             | IF '(' EXPRASION ')' STASTMENT

   57 STASTMENT: REL_EXPRATION
   58          | COMPUND_STATMENT
   59          | EXPRASION ';'
   60          | IF_STASTMENT
   61          | LOOP_STATMENT

   62 RETURN_STATMENT: RETURN EXPRASION ';'

   63 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT
   64              | FOR '(' EXPRASION ';' EXPRASION ';' UPDATES ')' STASTMENT

   65 UPDATES: ID '+' '+'
   66        | ID '-' '-'

   67 COMPUND_STATMENT: '{' '}'
   68                 | '{' INNER_COMPUND_STATMENT '}'
   69                 | '{' INNER_COMPUND_STATMENT RETURN_STATMENT '}'
   70                 | '{' RETURN_STATMENT '}'

   71 INNER_COMPUND_STATMENT: STASTMENT_LIST
   72                       | DEC_INNER_BLOCK
   73                       | DEC_INNER_BLOCK STASTMENT_LIST

   74 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK
   75                | NEW_DECLARE

   76 NEW_DECLARE: VAR_DECLARE
   77            | FUNC_PROC_DEC

   78 VAR_DECLARE: VF
   79            | VAR_DECLARE VF

   80 VF: VAR INNER_ARGS ':' TYPE ';'

   81 CONST: INT_NUM
   82      | F_NUM
   83      | FUNC_ACTIVE
   84      | ID

   85 TYPE: STRING '[' INT_NUM ']'
   86     | BOOL
   87     | INT
   88     | FLOAT
   89     | REAL
   90     | CHAR


Terminals, with rules where they appear

$end (0) 0
'&' (38) 49
'(' (40) 14 30 39 51 52 55 56 63 64
')' (41) 15 16 30 39 51 52 55 56 63 64
'*' (42) 43
'+' (43) 41 65
',' (44) 21
'-' (45) 38 42 66
'/' (47) 44
':' (58) 17 80
';' (59) 19 22 23 59 62 64 80
'<' (60) 33
'=' (61) 48 49 50
'>' (62) 32
'[' (91) 85
']' (93) 85
'^' (94) 50
'{' (123) 22 23 67 68 69 70
'}' (125) 22 23 67 68 69 70
error (256)
CHAR <String> (258) 90
REAL <String> (259) 89
FLOAT <String> (260) 88
INT <String> (261) 87
BOOL <String> (262) 86
STRING <String> (263) 85
CHAR_POINTER <String> (264)
REAL_POINTER <String> (265)
FLOAT_POINTER <String> (266)
INT_POINTER <String> (267)
ELSE (268) 55
IF (269) 55 56
FOR (270) 64
WHILE (271) 63
RETURN (272) 13 22 23 62
MAIN <Node> (273) 6
VAR <String> (274) 80
FUNC <String> (275) 13
PROC <String> (276) 6 12
NULL_VALUE (277)
AND_OP (278) 46
GE_OP (279) 34
SE_OP (280) 35
NE_OP (281)
OR_OP (282) 47
EQL_OP (283) 36
BOOL_VALUE <String> (284)
CHAR_VALUE <String> (285)
STRING_VALUE <String> (286)
INT_NUM <String> (287) 81 85
F_NUM <String> (288) 82
ID <String> (289) 12 13 20 21 48 49 50 51 52 65 66 84
IFX (290)
test (291)
UMINUS (292)
UFUNC (293)


Nonterminals, with rules where they appear

$accept (57)
    on left: 0
S <Node> (58)
    on left: 1, on right: 0
CODE <Node> (59)
    on left: 2 3, on right: 1
CODE2 <Node> (60)
    on left: 4 5, on right: 2
MAIN_FUNC <Node> (61)
    on left: 6, on right: 3 5
FUNC_PROC_DEC <Node> (62)
    on left: 7, on right: 2 77
FUNC_PROC_DEC2 <Node> (63)
    on left: 8 9, on right: 7 9
DEF_A <Node> (64)
    on left: 10 11, on right: 7 9
PROC_DEF <Node> (65)
    on left: 12, on right: 11
FUNC_DEF <Node> (66)
    on left: 13, on right: 10
ARGES <Node> (67)
    on left: 14, on right: 12 13
ARGES2 <Node> (68)
    on left: 15 16, on right: 14
OUT_ARGES <Node> (69)
    on left: 17, on right: 16 19
OUT_ARGES2 <Node> (70)
    on left: 18 19, on right: 17
INNER_ARGS <String> (71)
    on left: 20 21, on right: 17 21 52 80
FUNC_BLOCK <Node> (72)
    on left: 22 23, on right: 13
EXPRASION <Node> (73)
    on left: 24 25 26 27 28, on right: 22 23 48 55 56 59 62 63 64
REL_EXPRATION <Node> (74)
    on left: 29 30, on right: 27 30 32 33 34 35 36 57
REL_EXPRATION2 <Node> (75)
    on left: 31 32 33 34 35 36, on right: 29 30 32 33 34 35 36
UNARY_EXPRATION <Node> (76)
    on left: 37 38 39, on right: 28 38 39 41 42 43 44
UNARY_EXPRATION2 <Node> (77)
    on left: 40 41 42 43 44, on right: 37 38 41 42 43 44
LOG_EXPRATIOSN_LIST <Node> (78)
    on left: 45 46 47, on right: 24 46 47
ASSIGNMENT <Node> (79)
    on left: 48 49 50, on right: 25
FUNC_ACTIVE <Node> (80)
    on left: 51 52, on right: 26 83
STASTMENT_LIST <Node> (81)
    on left: 53 54, on right: 53 71 73
IF_STASTMENT <Node> (82)
    on left: 55 56, on right: 60
STASTMENT <Node> (83)
    on left: 57 58 59 60 61, on right: 53 54 55 56 63 64
RETURN_STATMENT <Node> (84)
    on left: 62, on right: 69 70
LOOP_STATMENT <Node> (85)
    on left: 63 64, on right: 61
UPDATES <Node> (86)
    on left: 65 66, on right: 64
COMPUND_STATMENT <Node> (87)
    on left: 67 68 69 70, on right: 6 12 58
INNER_COMPUND_STATMENT <Node> (88)
    on left: 71 72 73, on right: 23 68 69
DEC_INNER_BLOCK <Node> (89)
    on left: 74 75, on right: 72 73 74
NEW_DECLARE <Node> (90)
    on left: 76 77, on right: 74 75
VAR_DECLARE <Node> (91)
    on left: 78 79, on right: 76 79
VF <Node> (92)
    on left: 80, on right: 78 79
CONST <Node> (93)
    on left: 81 82 83 84, on right: 29 37 45
TYPE <String> (94)
    on left: 85 86 87 88 89 90, on right: 13 17 80


State 0

    0 $accept: . S $end

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    S              go to state 3
    CODE           go to state 4
    MAIN_FUNC      go to state 5
    FUNC_PROC_DEC  go to state 6
    DEF_A          go to state 7
    PROC_DEF       go to state 8
    FUNC_DEF       go to state 9


State 1

   13 FUNC_DEF: FUNC . ID ARGES RETURN TYPE FUNC_BLOCK

    ID  shift, and go to state 10


State 2

    6 MAIN_FUNC: PROC . MAIN COMPUND_STATMENT
   12 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT

    MAIN  shift, and go to state 11
    ID    shift, and go to state 12


State 3

    0 $accept: S . $end

    $end  shift, and go to state 13


State 4

    1 S: CODE .

    $default  reduce using rule 1 (S)


State 5

    3 CODE: MAIN_FUNC .

    $default  reduce using rule 3 (CODE)


State 6

    2 CODE: FUNC_PROC_DEC . CODE2

    PROC  shift, and go to state 14

    $default  reduce using rule 4 (CODE2)

    CODE2      go to state 15
    MAIN_FUNC  go to state 16


State 7

    7 FUNC_PROC_DEC: DEF_A . FUNC_PROC_DEC2

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 17

    FUNC      [reduce using rule 8 (FUNC_PROC_DEC2)]
    PROC      [reduce using rule 8 (FUNC_PROC_DEC2)]
    $default  reduce using rule 8 (FUNC_PROC_DEC2)

    FUNC_PROC_DEC2  go to state 18
    DEF_A           go to state 19
    PROC_DEF        go to state 8
    FUNC_DEF        go to state 9


State 8

   11 DEF_A: PROC_DEF .

    $default  reduce using rule 11 (DEF_A)


State 9

   10 DEF_A: FUNC_DEF .

    $default  reduce using rule 10 (DEF_A)


State 10

   13 FUNC_DEF: FUNC ID . ARGES RETURN TYPE FUNC_BLOCK

    '('  shift, and go to state 20

    ARGES  go to state 21


State 11

    6 MAIN_FUNC: PROC MAIN . COMPUND_STATMENT

    '{'  shift, and go to state 22

    COMPUND_STATMENT  go to state 23


State 12

   12 PROC_DEF: PROC ID . ARGES COMPUND_STATMENT

    '('  shift, and go to state 20

    ARGES  go to state 24


State 13

    0 $accept: S $end .

    $default  accept


State 14

    6 MAIN_FUNC: PROC . MAIN COMPUND_STATMENT

    MAIN  shift, and go to state 11


State 15

    2 CODE: FUNC_PROC_DEC CODE2 .

    $default  reduce using rule 2 (CODE)


State 16

    5 CODE2: MAIN_FUNC .

    $default  reduce using rule 5 (CODE2)


State 17

   12 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT

    ID  shift, and go to state 12


State 18

    7 FUNC_PROC_DEC: DEF_A FUNC_PROC_DEC2 .

    $default  reduce using rule 7 (FUNC_PROC_DEC)


State 19

    9 FUNC_PROC_DEC2: DEF_A . FUNC_PROC_DEC2

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 17

    FUNC      [reduce using rule 8 (FUNC_PROC_DEC2)]
    PROC      [reduce using rule 8 (FUNC_PROC_DEC2)]
    $default  reduce using rule 8 (FUNC_PROC_DEC2)

    FUNC_PROC_DEC2  go to state 25
    DEF_A           go to state 19
    PROC_DEF        go to state 8
    FUNC_DEF        go to state 9


State 20

   14 ARGES: '(' . ARGES2

    ID   shift, and go to state 26
    ')'  shift, and go to state 27

    ARGES2      go to state 28
    OUT_ARGES   go to state 29
    INNER_ARGS  go to state 30


State 21

   13 FUNC_DEF: FUNC ID ARGES . RETURN TYPE FUNC_BLOCK

    RETURN  shift, and go to state 31


State 22

   67 COMPUND_STATMENT: '{' . '}'
   68                 | '{' . INNER_COMPUND_STATMENT '}'
   69                 | '{' . INNER_COMPUND_STATMENT RETURN_STATMENT '}'
   70                 | '{' . RETURN_STATMENT '}'

    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    WHILE    shift, and go to state 34
    RETURN   shift, and go to state 35
    VAR      shift, and go to state 36
    FUNC     shift, and go to state 1
    PROC     shift, and go to state 17
    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41
    '{'      shift, and go to state 22
    '}'      shift, and go to state 42

    FUNC_PROC_DEC           go to state 43
    DEF_A                   go to state 7
    PROC_DEF                go to state 8
    FUNC_DEF                go to state 9
    EXPRASION               go to state 44
    REL_EXPRATION           go to state 45
    UNARY_EXPRATION         go to state 46
    LOG_EXPRATIOSN_LIST     go to state 47
    ASSIGNMENT              go to state 48
    FUNC_ACTIVE             go to state 49
    STASTMENT_LIST          go to state 50
    IF_STASTMENT            go to state 51
    STASTMENT               go to state 52
    RETURN_STATMENT         go to state 53
    LOOP_STATMENT           go to state 54
    COMPUND_STATMENT        go to state 55
    INNER_COMPUND_STATMENT  go to state 56
    DEC_INNER_BLOCK         go to state 57
    NEW_DECLARE             go to state 58
    VAR_DECLARE             go to state 59
    VF                      go to state 60
    CONST                   go to state 61


State 23

    6 MAIN_FUNC: PROC MAIN COMPUND_STATMENT .

    $default  reduce using rule 6 (MAIN_FUNC)


State 24

   12 PROC_DEF: PROC ID ARGES . COMPUND_STATMENT

    '{'  shift, and go to state 22

    COMPUND_STATMENT  go to state 62


State 25

    9 FUNC_PROC_DEC2: DEF_A FUNC_PROC_DEC2 .

    $default  reduce using rule 9 (FUNC_PROC_DEC2)


State 26

   20 INNER_ARGS: ID .
   21           | ID . ',' INNER_ARGS

    ','  shift, and go to state 63

    $default  reduce using rule 20 (INNER_ARGS)


State 27

   15 ARGES2: ')' .

    $default  reduce using rule 15 (ARGES2)


State 28

   14 ARGES: '(' ARGES2 .

    $default  reduce using rule 14 (ARGES)


State 29

   16 ARGES2: OUT_ARGES . ')'

    ')'  shift, and go to state 64


State 30

   17 OUT_ARGES: INNER_ARGS . ':' TYPE OUT_ARGES2

    ':'  shift, and go to state 65


State 31

   13 FUNC_DEF: FUNC ID ARGES RETURN . TYPE FUNC_BLOCK

    CHAR    shift, and go to state 66
    REAL    shift, and go to state 67
    FLOAT   shift, and go to state 68
    INT     shift, and go to state 69
    BOOL    shift, and go to state 70
    STRING  shift, and go to state 71

    TYPE  go to state 72


State 32

   55 IF_STASTMENT: IF . '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   56             | IF . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 73


State 33

   64 LOOP_STATMENT: FOR . '(' EXPRASION ';' EXPRASION ';' UPDATES ')' STASTMENT

    '('  shift, and go to state 74


State 34

   63 LOOP_STATMENT: WHILE . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 75


State 35

   62 RETURN_STATMENT: RETURN . EXPRASION ';'

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41

    EXPRASION            go to state 76
    REL_EXPRATION        go to state 77
    UNARY_EXPRATION      go to state 46
    LOG_EXPRATIOSN_LIST  go to state 47
    ASSIGNMENT           go to state 48
    FUNC_ACTIVE          go to state 49
    CONST                go to state 61


State 36

   80 VF: VAR . INNER_ARGS ':' TYPE ';'

    ID  shift, and go to state 26

    INNER_ARGS  go to state 78


State 37

   81 CONST: INT_NUM .

    $default  reduce using rule 81 (CONST)


State 38

   82 CONST: F_NUM .

    $default  reduce using rule 82 (CONST)


State 39

   48 ASSIGNMENT: ID . '=' EXPRASION
   49           | ID . '=' '&' ID
   50           | ID . '=' '^' ID
   51 FUNC_ACTIVE: ID . '(' ')'
   52            | ID . '(' INNER_ARGS ')'
   84 CONST: ID .

    '('  shift, and go to state 79
    '='  shift, and go to state 80

    '('       [reduce using rule 84 (CONST)]
    $default  reduce using rule 84 (CONST)


State 40

   38 UNARY_EXPRATION: '-' . UNARY_EXPRATION UNARY_EXPRATION2

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 81
    '-'      shift, and go to state 40
    '('      shift, and go to state 82

    UNARY_EXPRATION  go to state 83
    FUNC_ACTIVE      go to state 84
    CONST            go to state 85


State 41

   30 REL_EXPRATION: '(' . REL_EXPRATION ')' REL_EXPRATION2
   39 UNARY_EXPRATION: '(' . UNARY_EXPRATION ')'

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 81
    '-'      shift, and go to state 40
    '('      shift, and go to state 41

    REL_EXPRATION    go to state 86
    UNARY_EXPRATION  go to state 87
    FUNC_ACTIVE      go to state 84
    CONST            go to state 88


State 42

   67 COMPUND_STATMENT: '{' '}' .

    $default  reduce using rule 67 (COMPUND_STATMENT)


State 43

   77 NEW_DECLARE: FUNC_PROC_DEC .

    $default  reduce using rule 77 (NEW_DECLARE)


State 44

   59 STASTMENT: EXPRASION . ';'

    ';'  shift, and go to state 89


State 45

   27 EXPRASION: REL_EXPRATION .
   57 STASTMENT: REL_EXPRATION .

    ';'       reduce using rule 27 (EXPRASION)
    $default  reduce using rule 57 (STASTMENT)


State 46

   28 EXPRASION: UNARY_EXPRATION .

    $default  reduce using rule 28 (EXPRASION)


State 47

   24 EXPRASION: LOG_EXPRATIOSN_LIST .
   46 LOG_EXPRATIOSN_LIST: LOG_EXPRATIOSN_LIST . AND_OP LOG_EXPRATIOSN_LIST
   47                    | LOG_EXPRATIOSN_LIST . OR_OP LOG_EXPRATIOSN_LIST

    AND_OP  shift, and go to state 90
    OR_OP   shift, and go to state 91

    $default  reduce using rule 24 (EXPRASION)


State 48

   25 EXPRASION: ASSIGNMENT .

    $default  reduce using rule 25 (EXPRASION)


State 49

   26 EXPRASION: FUNC_ACTIVE .
   83 CONST: FUNC_ACTIVE .

    ';'       reduce using rule 26 (EXPRASION)
    ';'       [reduce using rule 83 (CONST)]
    ')'       reduce using rule 26 (EXPRASION)
    ')'       [reduce using rule 83 (CONST)]
    $default  reduce using rule 83 (CONST)


State 50

   53 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   71 INNER_COMPUND_STATMENT: STASTMENT_LIST .

    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    WHILE    shift, and go to state 34
    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41
    '{'      shift, and go to state 22

    $default  reduce using rule 71 (INNER_COMPUND_STATMENT)

    EXPRASION            go to state 44
    REL_EXPRATION        go to state 45
    UNARY_EXPRATION      go to state 46
    LOG_EXPRATIOSN_LIST  go to state 47
    ASSIGNMENT           go to state 48
    FUNC_ACTIVE          go to state 49
    IF_STASTMENT         go to state 51
    STASTMENT            go to state 92
    LOOP_STATMENT        go to state 54
    COMPUND_STATMENT     go to state 55
    CONST                go to state 61


State 51

   60 STASTMENT: IF_STASTMENT .

    $default  reduce using rule 60 (STASTMENT)


State 52

   54 STASTMENT_LIST: STASTMENT .

    $default  reduce using rule 54 (STASTMENT_LIST)


State 53

   70 COMPUND_STATMENT: '{' RETURN_STATMENT . '}'

    '}'  shift, and go to state 93


State 54

   61 STASTMENT: LOOP_STATMENT .

    $default  reduce using rule 61 (STASTMENT)


State 55

   58 STASTMENT: COMPUND_STATMENT .

    $default  reduce using rule 58 (STASTMENT)


State 56

   68 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT . '}'
   69                 | '{' INNER_COMPUND_STATMENT . RETURN_STATMENT '}'

    RETURN  shift, and go to state 35
    '}'     shift, and go to state 94

    RETURN_STATMENT  go to state 95


State 57

   72 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK .
   73                       | DEC_INNER_BLOCK . STASTMENT_LIST

    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    WHILE    shift, and go to state 34
    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41
    '{'      shift, and go to state 22

    $default  reduce using rule 72 (INNER_COMPUND_STATMENT)

    EXPRASION            go to state 44
    REL_EXPRATION        go to state 45
    UNARY_EXPRATION      go to state 46
    LOG_EXPRATIOSN_LIST  go to state 47
    ASSIGNMENT           go to state 48
    FUNC_ACTIVE          go to state 49
    STASTMENT_LIST       go to state 96
    IF_STASTMENT         go to state 51
    STASTMENT            go to state 52
    LOOP_STATMENT        go to state 54
    COMPUND_STATMENT     go to state 55
    CONST                go to state 61


State 58

   74 DEC_INNER_BLOCK: NEW_DECLARE . DEC_INNER_BLOCK
   75                | NEW_DECLARE .

    VAR   shift, and go to state 36
    FUNC  shift, and go to state 1
    PROC  shift, and go to state 17

    $default  reduce using rule 75 (DEC_INNER_BLOCK)

    FUNC_PROC_DEC    go to state 43
    DEF_A            go to state 7
    PROC_DEF         go to state 8
    FUNC_DEF         go to state 9
    DEC_INNER_BLOCK  go to state 97
    NEW_DECLARE      go to state 58
    VAR_DECLARE      go to state 59
    VF               go to state 60


State 59

   76 NEW_DECLARE: VAR_DECLARE .
   79 VAR_DECLARE: VAR_DECLARE . VF

    VAR  shift, and go to state 36

    VAR       [reduce using rule 76 (NEW_DECLARE)]
    $default  reduce using rule 76 (NEW_DECLARE)

    VF  go to state 98


State 60

   78 VAR_DECLARE: VF .

    $default  reduce using rule 78 (VAR_DECLARE)


State 61

   29 REL_EXPRATION: CONST . REL_EXPRATION2
   37 UNARY_EXPRATION: CONST . UNARY_EXPRATION2
   45 LOG_EXPRATIOSN_LIST: CONST .

    GE_OP   shift, and go to state 99
    SE_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107

    AND_OP    reduce using rule 45 (LOG_EXPRATIOSN_LIST)
    OR_OP     reduce using rule 45 (LOG_EXPRATIOSN_LIST)
    ';'       reduce using rule 31 (REL_EXPRATION2)
    ';'       [reduce using rule 40 (UNARY_EXPRATION2)]
    ';'       [reduce using rule 45 (LOG_EXPRATIOSN_LIST)]
    '-'       [reduce using rule 31 (REL_EXPRATION2)]
    ')'       reduce using rule 31 (REL_EXPRATION2)
    ')'       [reduce using rule 40 (UNARY_EXPRATION2)]
    ')'       [reduce using rule 45 (LOG_EXPRATIOSN_LIST)]
    $default  reduce using rule 31 (REL_EXPRATION2)

    REL_EXPRATION2    go to state 108
    UNARY_EXPRATION2  go to state 109


State 62

   12 PROC_DEF: PROC ID ARGES COMPUND_STATMENT .

    $default  reduce using rule 12 (PROC_DEF)


State 63

   21 INNER_ARGS: ID ',' . INNER_ARGS

    ID  shift, and go to state 26

    INNER_ARGS  go to state 110


State 64

   16 ARGES2: OUT_ARGES ')' .

    $default  reduce using rule 16 (ARGES2)


State 65

   17 OUT_ARGES: INNER_ARGS ':' . TYPE OUT_ARGES2

    CHAR    shift, and go to state 66
    REAL    shift, and go to state 67
    FLOAT   shift, and go to state 68
    INT     shift, and go to state 69
    BOOL    shift, and go to state 70
    STRING  shift, and go to state 71

    TYPE  go to state 111


State 66

   90 TYPE: CHAR .

    $default  reduce using rule 90 (TYPE)


State 67

   89 TYPE: REAL .

    $default  reduce using rule 89 (TYPE)


State 68

   88 TYPE: FLOAT .

    $default  reduce using rule 88 (TYPE)


State 69

   87 TYPE: INT .

    $default  reduce using rule 87 (TYPE)


State 70

   86 TYPE: BOOL .

    $default  reduce using rule 86 (TYPE)


State 71

   85 TYPE: STRING . '[' INT_NUM ']'

    '['  shift, and go to state 112


State 72

   13 FUNC_DEF: FUNC ID ARGES RETURN TYPE . FUNC_BLOCK

    '{'  shift, and go to state 113

    FUNC_BLOCK  go to state 114


State 73

   55 IF_STASTMENT: IF '(' . EXPRASION ')' STASTMENT ELSE STASTMENT
   56             | IF '(' . EXPRASION ')' STASTMENT

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41

    EXPRASION            go to state 115
    REL_EXPRATION        go to state 77
    UNARY_EXPRATION      go to state 46
    LOG_EXPRATIOSN_LIST  go to state 47
    ASSIGNMENT           go to state 48
    FUNC_ACTIVE          go to state 49
    CONST                go to state 61


State 74

   64 LOOP_STATMENT: FOR '(' . EXPRASION ';' EXPRASION ';' UPDATES ')' STASTMENT

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41

    EXPRASION            go to state 116
    REL_EXPRATION        go to state 77
    UNARY_EXPRATION      go to state 46
    LOG_EXPRATIOSN_LIST  go to state 47
    ASSIGNMENT           go to state 48
    FUNC_ACTIVE          go to state 49
    CONST                go to state 61


State 75

   63 LOOP_STATMENT: WHILE '(' . EXPRASION ')' STASTMENT

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41

    EXPRASION            go to state 117
    REL_EXPRATION        go to state 77
    UNARY_EXPRATION      go to state 46
    LOG_EXPRATIOSN_LIST  go to state 47
    ASSIGNMENT           go to state 48
    FUNC_ACTIVE          go to state 49
    CONST                go to state 61


State 76

   62 RETURN_STATMENT: RETURN EXPRASION . ';'

    ';'  shift, and go to state 118


State 77

   27 EXPRASION: REL_EXPRATION .

    $default  reduce using rule 27 (EXPRASION)


State 78

   80 VF: VAR INNER_ARGS . ':' TYPE ';'

    ':'  shift, and go to state 119


State 79

   51 FUNC_ACTIVE: ID '(' . ')'
   52            | ID '(' . INNER_ARGS ')'

    ID   shift, and go to state 26
    ')'  shift, and go to state 120

    INNER_ARGS  go to state 121


State 80

   48 ASSIGNMENT: ID '=' . EXPRASION
   49           | ID '=' . '&' ID
   50           | ID '=' . '^' ID

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41
    '&'      shift, and go to state 122
    '^'      shift, and go to state 123

    EXPRASION            go to state 124
    REL_EXPRATION        go to state 77
    UNARY_EXPRATION      go to state 46
    LOG_EXPRATIOSN_LIST  go to state 47
    ASSIGNMENT           go to state 48
    FUNC_ACTIVE          go to state 49
    CONST                go to state 61


State 81

   51 FUNC_ACTIVE: ID . '(' ')'
   52            | ID . '(' INNER_ARGS ')'
   84 CONST: ID .

    '('  shift, and go to state 79

    '('       [reduce using rule 84 (CONST)]
    $default  reduce using rule 84 (CONST)


State 82

   39 UNARY_EXPRATION: '(' . UNARY_EXPRATION ')'

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 81
    '-'      shift, and go to state 40
    '('      shift, and go to state 82

    UNARY_EXPRATION  go to state 87
    FUNC_ACTIVE      go to state 84
    CONST            go to state 85


State 83

   38 UNARY_EXPRATION: '-' UNARY_EXPRATION . UNARY_EXPRATION2

    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105

    '+'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '-'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '*'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '/'       [reduce using rule 40 (UNARY_EXPRATION2)]
    $default  reduce using rule 40 (UNARY_EXPRATION2)

    UNARY_EXPRATION2  go to state 125


State 84

   83 CONST: FUNC_ACTIVE .

    $default  reduce using rule 83 (CONST)


State 85

   37 UNARY_EXPRATION: CONST . UNARY_EXPRATION2

    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105

    '+'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '-'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '*'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '/'       [reduce using rule 40 (UNARY_EXPRATION2)]
    $default  reduce using rule 40 (UNARY_EXPRATION2)

    UNARY_EXPRATION2  go to state 109


State 86

   30 REL_EXPRATION: '(' REL_EXPRATION . ')' REL_EXPRATION2

    ')'  shift, and go to state 126


State 87

   39 UNARY_EXPRATION: '(' UNARY_EXPRATION . ')'

    ')'  shift, and go to state 127


State 88

   29 REL_EXPRATION: CONST . REL_EXPRATION2
   37 UNARY_EXPRATION: CONST . UNARY_EXPRATION2

    GE_OP   shift, and go to state 99
    SE_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107

    ')'       reduce using rule 31 (REL_EXPRATION2)
    ')'       [reduce using rule 40 (UNARY_EXPRATION2)]
    $default  reduce using rule 31 (REL_EXPRATION2)

    REL_EXPRATION2    go to state 108
    UNARY_EXPRATION2  go to state 109


State 89

   59 STASTMENT: EXPRASION ';' .

    $default  reduce using rule 59 (STASTMENT)


State 90

   46 LOG_EXPRATIOSN_LIST: LOG_EXPRATIOSN_LIST AND_OP . LOG_EXPRATIOSN_LIST

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 81

    LOG_EXPRATIOSN_LIST  go to state 128
    FUNC_ACTIVE          go to state 84
    CONST                go to state 129


State 91

   47 LOG_EXPRATIOSN_LIST: LOG_EXPRATIOSN_LIST OR_OP . LOG_EXPRATIOSN_LIST

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 81

    LOG_EXPRATIOSN_LIST  go to state 130
    FUNC_ACTIVE          go to state 84
    CONST                go to state 129


State 92

   53 STASTMENT_LIST: STASTMENT_LIST STASTMENT .

    $default  reduce using rule 53 (STASTMENT_LIST)


State 93

   70 COMPUND_STATMENT: '{' RETURN_STATMENT '}' .

    $default  reduce using rule 70 (COMPUND_STATMENT)


State 94

   68 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT '}' .

    $default  reduce using rule 68 (COMPUND_STATMENT)


State 95

   69 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT RETURN_STATMENT . '}'

    '}'  shift, and go to state 131


State 96

   53 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   73 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK STASTMENT_LIST .

    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    WHILE    shift, and go to state 34
    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41
    '{'      shift, and go to state 22

    $default  reduce using rule 73 (INNER_COMPUND_STATMENT)

    EXPRASION            go to state 44
    REL_EXPRATION        go to state 45
    UNARY_EXPRATION      go to state 46
    LOG_EXPRATIOSN_LIST  go to state 47
    ASSIGNMENT           go to state 48
    FUNC_ACTIVE          go to state 49
    IF_STASTMENT         go to state 51
    STASTMENT            go to state 92
    LOOP_STATMENT        go to state 54
    COMPUND_STATMENT     go to state 55
    CONST                go to state 61


State 97

   74 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK .

    $default  reduce using rule 74 (DEC_INNER_BLOCK)


State 98

   79 VAR_DECLARE: VAR_DECLARE VF .

    $default  reduce using rule 79 (VAR_DECLARE)


State 99

   34 REL_EXPRATION2: GE_OP . REL_EXPRATION REL_EXPRATION2

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 81
    '('      shift, and go to state 132

    REL_EXPRATION  go to state 133
    FUNC_ACTIVE    go to state 84
    CONST          go to state 134


State 100

   35 REL_EXPRATION2: SE_OP . REL_EXPRATION REL_EXPRATION2

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 81
    '('      shift, and go to state 132

    REL_EXPRATION  go to state 135
    FUNC_ACTIVE    go to state 84
    CONST          go to state 134


State 101

   36 REL_EXPRATION2: EQL_OP . REL_EXPRATION REL_EXPRATION2

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 81
    '('      shift, and go to state 132

    REL_EXPRATION  go to state 136
    FUNC_ACTIVE    go to state 84
    CONST          go to state 134


State 102

   41 UNARY_EXPRATION2: '+' . UNARY_EXPRATION UNARY_EXPRATION2

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 81
    '-'      shift, and go to state 40
    '('      shift, and go to state 82

    UNARY_EXPRATION  go to state 137
    FUNC_ACTIVE      go to state 84
    CONST            go to state 85


State 103

   42 UNARY_EXPRATION2: '-' . UNARY_EXPRATION UNARY_EXPRATION2

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 81
    '-'      shift, and go to state 40
    '('      shift, and go to state 82

    UNARY_EXPRATION  go to state 138
    FUNC_ACTIVE      go to state 84
    CONST            go to state 85


State 104

   43 UNARY_EXPRATION2: '*' . UNARY_EXPRATION UNARY_EXPRATION2

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 81
    '-'      shift, and go to state 40
    '('      shift, and go to state 82

    UNARY_EXPRATION  go to state 139
    FUNC_ACTIVE      go to state 84
    CONST            go to state 85


State 105

   44 UNARY_EXPRATION2: '/' . UNARY_EXPRATION UNARY_EXPRATION2

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 81
    '-'      shift, and go to state 40
    '('      shift, and go to state 82

    UNARY_EXPRATION  go to state 140
    FUNC_ACTIVE      go to state 84
    CONST            go to state 85


State 106

   32 REL_EXPRATION2: '>' . REL_EXPRATION REL_EXPRATION2

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 81
    '('      shift, and go to state 132

    REL_EXPRATION  go to state 141
    FUNC_ACTIVE    go to state 84
    CONST          go to state 134


State 107

   33 REL_EXPRATION2: '<' . REL_EXPRATION REL_EXPRATION2

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 81
    '('      shift, and go to state 132

    REL_EXPRATION  go to state 142
    FUNC_ACTIVE    go to state 84
    CONST          go to state 134


State 108

   29 REL_EXPRATION: CONST REL_EXPRATION2 .

    $default  reduce using rule 29 (REL_EXPRATION)


State 109

   37 UNARY_EXPRATION: CONST UNARY_EXPRATION2 .

    $default  reduce using rule 37 (UNARY_EXPRATION)


State 110

   21 INNER_ARGS: ID ',' INNER_ARGS .

    $default  reduce using rule 21 (INNER_ARGS)


State 111

   17 OUT_ARGES: INNER_ARGS ':' TYPE . OUT_ARGES2

    ';'  shift, and go to state 143

    $default  reduce using rule 18 (OUT_ARGES2)

    OUT_ARGES2  go to state 144


State 112

   85 TYPE: STRING '[' . INT_NUM ']'

    INT_NUM  shift, and go to state 145


State 113

   22 FUNC_BLOCK: '{' . RETURN EXPRASION ';' '}'
   23           | '{' . INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    WHILE    shift, and go to state 34
    RETURN   shift, and go to state 146
    VAR      shift, and go to state 36
    FUNC     shift, and go to state 1
    PROC     shift, and go to state 17
    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41
    '{'      shift, and go to state 22

    FUNC_PROC_DEC           go to state 43
    DEF_A                   go to state 7
    PROC_DEF                go to state 8
    FUNC_DEF                go to state 9
    EXPRASION               go to state 44
    REL_EXPRATION           go to state 45
    UNARY_EXPRATION         go to state 46
    LOG_EXPRATIOSN_LIST     go to state 47
    ASSIGNMENT              go to state 48
    FUNC_ACTIVE             go to state 49
    STASTMENT_LIST          go to state 50
    IF_STASTMENT            go to state 51
    STASTMENT               go to state 52
    LOOP_STATMENT           go to state 54
    COMPUND_STATMENT        go to state 55
    INNER_COMPUND_STATMENT  go to state 147
    DEC_INNER_BLOCK         go to state 57
    NEW_DECLARE             go to state 58
    VAR_DECLARE             go to state 59
    VF                      go to state 60
    CONST                   go to state 61


State 114

   13 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK .

    $default  reduce using rule 13 (FUNC_DEF)


State 115

   55 IF_STASTMENT: IF '(' EXPRASION . ')' STASTMENT ELSE STASTMENT
   56             | IF '(' EXPRASION . ')' STASTMENT

    ')'  shift, and go to state 148


State 116

   64 LOOP_STATMENT: FOR '(' EXPRASION . ';' EXPRASION ';' UPDATES ')' STASTMENT

    ';'  shift, and go to state 149


State 117

   63 LOOP_STATMENT: WHILE '(' EXPRASION . ')' STASTMENT

    ')'  shift, and go to state 150


State 118

   62 RETURN_STATMENT: RETURN EXPRASION ';' .

    $default  reduce using rule 62 (RETURN_STATMENT)


State 119

   80 VF: VAR INNER_ARGS ':' . TYPE ';'

    CHAR    shift, and go to state 66
    REAL    shift, and go to state 67
    FLOAT   shift, and go to state 68
    INT     shift, and go to state 69
    BOOL    shift, and go to state 70
    STRING  shift, and go to state 71

    TYPE  go to state 151


State 120

   51 FUNC_ACTIVE: ID '(' ')' .

    $default  reduce using rule 51 (FUNC_ACTIVE)


State 121

   52 FUNC_ACTIVE: ID '(' INNER_ARGS . ')'

    ')'  shift, and go to state 152


State 122

   49 ASSIGNMENT: ID '=' '&' . ID

    ID  shift, and go to state 153


State 123

   50 ASSIGNMENT: ID '=' '^' . ID

    ID  shift, and go to state 154


State 124

   48 ASSIGNMENT: ID '=' EXPRASION .

    $default  reduce using rule 48 (ASSIGNMENT)


State 125

   38 UNARY_EXPRATION: '-' UNARY_EXPRATION UNARY_EXPRATION2 .

    $default  reduce using rule 38 (UNARY_EXPRATION)


State 126

   30 REL_EXPRATION: '(' REL_EXPRATION ')' . REL_EXPRATION2

    GE_OP   shift, and go to state 99
    SE_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107

    GE_OP     [reduce using rule 31 (REL_EXPRATION2)]
    SE_OP     [reduce using rule 31 (REL_EXPRATION2)]
    EQL_OP    [reduce using rule 31 (REL_EXPRATION2)]
    '>'       [reduce using rule 31 (REL_EXPRATION2)]
    '<'       [reduce using rule 31 (REL_EXPRATION2)]
    $default  reduce using rule 31 (REL_EXPRATION2)

    REL_EXPRATION2  go to state 155


State 127

   39 UNARY_EXPRATION: '(' UNARY_EXPRATION ')' .

    $default  reduce using rule 39 (UNARY_EXPRATION)


State 128

   46 LOG_EXPRATIOSN_LIST: LOG_EXPRATIOSN_LIST . AND_OP LOG_EXPRATIOSN_LIST
   46                    | LOG_EXPRATIOSN_LIST AND_OP LOG_EXPRATIOSN_LIST .
   47                    | LOG_EXPRATIOSN_LIST . OR_OP LOG_EXPRATIOSN_LIST

    $default  reduce using rule 46 (LOG_EXPRATIOSN_LIST)


State 129

   45 LOG_EXPRATIOSN_LIST: CONST .

    $default  reduce using rule 45 (LOG_EXPRATIOSN_LIST)


State 130

   46 LOG_EXPRATIOSN_LIST: LOG_EXPRATIOSN_LIST . AND_OP LOG_EXPRATIOSN_LIST
   47                    | LOG_EXPRATIOSN_LIST . OR_OP LOG_EXPRATIOSN_LIST
   47                    | LOG_EXPRATIOSN_LIST OR_OP LOG_EXPRATIOSN_LIST .

    $default  reduce using rule 47 (LOG_EXPRATIOSN_LIST)


State 131

   69 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT RETURN_STATMENT '}' .

    $default  reduce using rule 69 (COMPUND_STATMENT)


State 132

   30 REL_EXPRATION: '(' . REL_EXPRATION ')' REL_EXPRATION2

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 81
    '('      shift, and go to state 132

    REL_EXPRATION  go to state 86
    FUNC_ACTIVE    go to state 84
    CONST          go to state 134


State 133

   34 REL_EXPRATION2: GE_OP REL_EXPRATION . REL_EXPRATION2

    GE_OP   shift, and go to state 99
    SE_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107

    GE_OP     [reduce using rule 31 (REL_EXPRATION2)]
    SE_OP     [reduce using rule 31 (REL_EXPRATION2)]
    EQL_OP    [reduce using rule 31 (REL_EXPRATION2)]
    '>'       [reduce using rule 31 (REL_EXPRATION2)]
    '<'       [reduce using rule 31 (REL_EXPRATION2)]
    $default  reduce using rule 31 (REL_EXPRATION2)

    REL_EXPRATION2  go to state 156


State 134

   29 REL_EXPRATION: CONST . REL_EXPRATION2

    GE_OP   shift, and go to state 99
    SE_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107

    GE_OP     [reduce using rule 31 (REL_EXPRATION2)]
    SE_OP     [reduce using rule 31 (REL_EXPRATION2)]
    EQL_OP    [reduce using rule 31 (REL_EXPRATION2)]
    '>'       [reduce using rule 31 (REL_EXPRATION2)]
    '<'       [reduce using rule 31 (REL_EXPRATION2)]
    $default  reduce using rule 31 (REL_EXPRATION2)

    REL_EXPRATION2  go to state 108


State 135

   35 REL_EXPRATION2: SE_OP REL_EXPRATION . REL_EXPRATION2

    GE_OP   shift, and go to state 99
    SE_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107

    GE_OP     [reduce using rule 31 (REL_EXPRATION2)]
    SE_OP     [reduce using rule 31 (REL_EXPRATION2)]
    EQL_OP    [reduce using rule 31 (REL_EXPRATION2)]
    '>'       [reduce using rule 31 (REL_EXPRATION2)]
    '<'       [reduce using rule 31 (REL_EXPRATION2)]
    $default  reduce using rule 31 (REL_EXPRATION2)

    REL_EXPRATION2  go to state 157


State 136

   36 REL_EXPRATION2: EQL_OP REL_EXPRATION . REL_EXPRATION2

    GE_OP   shift, and go to state 99
    SE_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107

    GE_OP     [reduce using rule 31 (REL_EXPRATION2)]
    SE_OP     [reduce using rule 31 (REL_EXPRATION2)]
    EQL_OP    [reduce using rule 31 (REL_EXPRATION2)]
    '>'       [reduce using rule 31 (REL_EXPRATION2)]
    '<'       [reduce using rule 31 (REL_EXPRATION2)]
    $default  reduce using rule 31 (REL_EXPRATION2)

    REL_EXPRATION2  go to state 158


State 137

   41 UNARY_EXPRATION2: '+' UNARY_EXPRATION . UNARY_EXPRATION2

    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105

    '+'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '-'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '*'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '/'       [reduce using rule 40 (UNARY_EXPRATION2)]
    $default  reduce using rule 40 (UNARY_EXPRATION2)

    UNARY_EXPRATION2  go to state 159


State 138

   42 UNARY_EXPRATION2: '-' UNARY_EXPRATION . UNARY_EXPRATION2

    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105

    '+'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '-'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '*'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '/'       [reduce using rule 40 (UNARY_EXPRATION2)]
    $default  reduce using rule 40 (UNARY_EXPRATION2)

    UNARY_EXPRATION2  go to state 160


State 139

   43 UNARY_EXPRATION2: '*' UNARY_EXPRATION . UNARY_EXPRATION2

    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105

    '+'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '-'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '*'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '/'       [reduce using rule 40 (UNARY_EXPRATION2)]
    $default  reduce using rule 40 (UNARY_EXPRATION2)

    UNARY_EXPRATION2  go to state 161


State 140

   44 UNARY_EXPRATION2: '/' UNARY_EXPRATION . UNARY_EXPRATION2

    '+'  shift, and go to state 102
    '-'  shift, and go to state 103
    '*'  shift, and go to state 104
    '/'  shift, and go to state 105

    '+'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '-'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '*'       [reduce using rule 40 (UNARY_EXPRATION2)]
    '/'       [reduce using rule 40 (UNARY_EXPRATION2)]
    $default  reduce using rule 40 (UNARY_EXPRATION2)

    UNARY_EXPRATION2  go to state 162


State 141

   32 REL_EXPRATION2: '>' REL_EXPRATION . REL_EXPRATION2

    GE_OP   shift, and go to state 99
    SE_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107

    GE_OP     [reduce using rule 31 (REL_EXPRATION2)]
    SE_OP     [reduce using rule 31 (REL_EXPRATION2)]
    EQL_OP    [reduce using rule 31 (REL_EXPRATION2)]
    '>'       [reduce using rule 31 (REL_EXPRATION2)]
    '<'       [reduce using rule 31 (REL_EXPRATION2)]
    $default  reduce using rule 31 (REL_EXPRATION2)

    REL_EXPRATION2  go to state 163


State 142

   33 REL_EXPRATION2: '<' REL_EXPRATION . REL_EXPRATION2

    GE_OP   shift, and go to state 99
    SE_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107

    GE_OP     [reduce using rule 31 (REL_EXPRATION2)]
    SE_OP     [reduce using rule 31 (REL_EXPRATION2)]
    EQL_OP    [reduce using rule 31 (REL_EXPRATION2)]
    '>'       [reduce using rule 31 (REL_EXPRATION2)]
    '<'       [reduce using rule 31 (REL_EXPRATION2)]
    $default  reduce using rule 31 (REL_EXPRATION2)

    REL_EXPRATION2  go to state 164


State 143

   19 OUT_ARGES2: ';' . OUT_ARGES

    ID  shift, and go to state 26

    OUT_ARGES   go to state 165
    INNER_ARGS  go to state 30


State 144

   17 OUT_ARGES: INNER_ARGS ':' TYPE OUT_ARGES2 .

    $default  reduce using rule 17 (OUT_ARGES)


State 145

   85 TYPE: STRING '[' INT_NUM . ']'

    ']'  shift, and go to state 166


State 146

   22 FUNC_BLOCK: '{' RETURN . EXPRASION ';' '}'

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41

    EXPRASION            go to state 167
    REL_EXPRATION        go to state 77
    UNARY_EXPRATION      go to state 46
    LOG_EXPRATIOSN_LIST  go to state 47
    ASSIGNMENT           go to state 48
    FUNC_ACTIVE          go to state 49
    CONST                go to state 61


State 147

   23 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT . RETURN EXPRASION ';' '}'

    RETURN  shift, and go to state 168


State 148

   55 IF_STASTMENT: IF '(' EXPRASION ')' . STASTMENT ELSE STASTMENT
   56             | IF '(' EXPRASION ')' . STASTMENT

    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    WHILE    shift, and go to state 34
    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41
    '{'      shift, and go to state 22

    EXPRASION            go to state 44
    REL_EXPRATION        go to state 45
    UNARY_EXPRATION      go to state 46
    LOG_EXPRATIOSN_LIST  go to state 47
    ASSIGNMENT           go to state 48
    FUNC_ACTIVE          go to state 49
    IF_STASTMENT         go to state 51
    STASTMENT            go to state 169
    LOOP_STATMENT        go to state 54
    COMPUND_STATMENT     go to state 55
    CONST                go to state 61


State 149

   64 LOOP_STATMENT: FOR '(' EXPRASION ';' . EXPRASION ';' UPDATES ')' STASTMENT

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41

    EXPRASION            go to state 170
    REL_EXPRATION        go to state 77
    UNARY_EXPRATION      go to state 46
    LOG_EXPRATIOSN_LIST  go to state 47
    ASSIGNMENT           go to state 48
    FUNC_ACTIVE          go to state 49
    CONST                go to state 61


State 150

   63 LOOP_STATMENT: WHILE '(' EXPRASION ')' . STASTMENT

    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    WHILE    shift, and go to state 34
    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41
    '{'      shift, and go to state 22

    EXPRASION            go to state 44
    REL_EXPRATION        go to state 45
    UNARY_EXPRATION      go to state 46
    LOG_EXPRATIOSN_LIST  go to state 47
    ASSIGNMENT           go to state 48
    FUNC_ACTIVE          go to state 49
    IF_STASTMENT         go to state 51
    STASTMENT            go to state 171
    LOOP_STATMENT        go to state 54
    COMPUND_STATMENT     go to state 55
    CONST                go to state 61


State 151

   80 VF: VAR INNER_ARGS ':' TYPE . ';'

    ';'  shift, and go to state 172


State 152

   52 FUNC_ACTIVE: ID '(' INNER_ARGS ')' .

    $default  reduce using rule 52 (FUNC_ACTIVE)


State 153

   49 ASSIGNMENT: ID '=' '&' ID .

    $default  reduce using rule 49 (ASSIGNMENT)


State 154

   50 ASSIGNMENT: ID '=' '^' ID .

    $default  reduce using rule 50 (ASSIGNMENT)


State 155

   30 REL_EXPRATION: '(' REL_EXPRATION ')' REL_EXPRATION2 .

    $default  reduce using rule 30 (REL_EXPRATION)


State 156

   34 REL_EXPRATION2: GE_OP REL_EXPRATION REL_EXPRATION2 .

    $default  reduce using rule 34 (REL_EXPRATION2)


State 157

   35 REL_EXPRATION2: SE_OP REL_EXPRATION REL_EXPRATION2 .

    $default  reduce using rule 35 (REL_EXPRATION2)


State 158

   36 REL_EXPRATION2: EQL_OP REL_EXPRATION REL_EXPRATION2 .

    $default  reduce using rule 36 (REL_EXPRATION2)


State 159

   41 UNARY_EXPRATION2: '+' UNARY_EXPRATION UNARY_EXPRATION2 .

    $default  reduce using rule 41 (UNARY_EXPRATION2)


State 160

   42 UNARY_EXPRATION2: '-' UNARY_EXPRATION UNARY_EXPRATION2 .

    $default  reduce using rule 42 (UNARY_EXPRATION2)


State 161

   43 UNARY_EXPRATION2: '*' UNARY_EXPRATION UNARY_EXPRATION2 .

    $default  reduce using rule 43 (UNARY_EXPRATION2)


State 162

   44 UNARY_EXPRATION2: '/' UNARY_EXPRATION UNARY_EXPRATION2 .

    $default  reduce using rule 44 (UNARY_EXPRATION2)


State 163

   32 REL_EXPRATION2: '>' REL_EXPRATION REL_EXPRATION2 .

    $default  reduce using rule 32 (REL_EXPRATION2)


State 164

   33 REL_EXPRATION2: '<' REL_EXPRATION REL_EXPRATION2 .

    $default  reduce using rule 33 (REL_EXPRATION2)


State 165

   19 OUT_ARGES2: ';' OUT_ARGES .

    $default  reduce using rule 19 (OUT_ARGES2)


State 166

   85 TYPE: STRING '[' INT_NUM ']' .

    $default  reduce using rule 85 (TYPE)


State 167

   22 FUNC_BLOCK: '{' RETURN EXPRASION . ';' '}'

    ';'  shift, and go to state 173


State 168

   23 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN . EXPRASION ';' '}'

    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41

    EXPRASION            go to state 174
    REL_EXPRATION        go to state 77
    UNARY_EXPRATION      go to state 46
    LOG_EXPRATIOSN_LIST  go to state 47
    ASSIGNMENT           go to state 48
    FUNC_ACTIVE          go to state 49
    CONST                go to state 61


State 169

   55 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT . ELSE STASTMENT
   56             | IF '(' EXPRASION ')' STASTMENT .

    ELSE  shift, and go to state 175

    $default  reduce using rule 56 (IF_STASTMENT)


State 170

   64 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION . ';' UPDATES ')' STASTMENT

    ';'  shift, and go to state 176


State 171

   63 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT .

    $default  reduce using rule 63 (LOOP_STATMENT)


State 172

   80 VF: VAR INNER_ARGS ':' TYPE ';' .

    $default  reduce using rule 80 (VF)


State 173

   22 FUNC_BLOCK: '{' RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 177


State 174

   23 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION . ';' '}'

    ';'  shift, and go to state 178


State 175

   55 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE . STASTMENT

    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    WHILE    shift, and go to state 34
    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41
    '{'      shift, and go to state 22

    EXPRASION            go to state 44
    REL_EXPRATION        go to state 45
    UNARY_EXPRATION      go to state 46
    LOG_EXPRATIOSN_LIST  go to state 47
    ASSIGNMENT           go to state 48
    FUNC_ACTIVE          go to state 49
    IF_STASTMENT         go to state 51
    STASTMENT            go to state 179
    LOOP_STATMENT        go to state 54
    COMPUND_STATMENT     go to state 55
    CONST                go to state 61


State 176

   64 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' . UPDATES ')' STASTMENT

    ID  shift, and go to state 180

    UPDATES  go to state 181


State 177

   22 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}' .

    $default  reduce using rule 22 (FUNC_BLOCK)


State 178

   23 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 182


State 179

   55 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT .

    $default  reduce using rule 55 (IF_STASTMENT)


State 180

   65 UPDATES: ID . '+' '+'
   66        | ID . '-' '-'

    '+'  shift, and go to state 183
    '-'  shift, and go to state 184


State 181

   64 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' UPDATES . ')' STASTMENT

    ')'  shift, and go to state 185


State 182

   23 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}' .

    $default  reduce using rule 23 (FUNC_BLOCK)


State 183

   65 UPDATES: ID '+' . '+'

    '+'  shift, and go to state 186


State 184

   66 UPDATES: ID '-' . '-'

    '-'  shift, and go to state 187


State 185

   64 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' UPDATES ')' . STASTMENT

    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    WHILE    shift, and go to state 34
    INT_NUM  shift, and go to state 37
    F_NUM    shift, and go to state 38
    ID       shift, and go to state 39
    '-'      shift, and go to state 40
    '('      shift, and go to state 41
    '{'      shift, and go to state 22

    EXPRASION            go to state 44
    REL_EXPRATION        go to state 45
    UNARY_EXPRATION      go to state 46
    LOG_EXPRATIOSN_LIST  go to state 47
    ASSIGNMENT           go to state 48
    FUNC_ACTIVE          go to state 49
    IF_STASTMENT         go to state 51
    STASTMENT            go to state 188
    LOOP_STATMENT        go to state 54
    COMPUND_STATMENT     go to state 55
    CONST                go to state 61


State 186

   65 UPDATES: ID '+' '+' .

    $default  reduce using rule 65 (UPDATES)


State 187

   66 UPDATES: ID '-' '-' .

    $default  reduce using rule 66 (UPDATES)


State 188

   64 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' UPDATES ')' STASTMENT .

    $default  reduce using rule 64 (LOOP_STATMENT)
