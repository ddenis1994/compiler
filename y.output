Nonterminals useless in grammar

   RETURN_STATMENT
   COMPUND_STATMENT


Terminals unused in grammar

   FLOAT_POINER
   CHAR_POINTER
   REAL_POINTER
   INT_POINTER
   NULL_VALUE
   BOOL_VALUE
   test
   UFUNC


Rules useless in grammar

   94 RETURN_STATMENT: RETURN EXPRASION ';'

   95 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT RETURN_STATMENT '}'
   96                 | '{' RETURN_STATMENT '}'


State 86 conflicts: 1 shift/reduce
State 90 conflicts: 1 shift/reduce
State 91 conflicts: 1 shift/reduce
State 92 conflicts: 1 shift/reduce
State 93 conflicts: 1 shift/reduce
State 96 conflicts: 1 shift/reduce
State 97 conflicts: 1 shift/reduce
State 98 conflicts: 1 shift/reduce
State 99 conflicts: 1 shift/reduce
State 100 conflicts: 1 shift/reduce
State 101 conflicts: 1 shift/reduce
State 103 conflicts: 1 shift/reduce
State 104 conflicts: 1 shift/reduce
State 105 conflicts: 1 shift/reduce
State 106 conflicts: 1 shift/reduce
State 107 conflicts: 1 shift/reduce
State 108 conflicts: 1 shift/reduce
State 125 conflicts: 1 shift/reduce
State 132 conflicts: 12 shift/reduce
State 172 conflicts: 1 shift/reduce


Grammar

    0 $accept: S $end

    1 S: MAINBLOCK

    2 MAIN_END: PROC MAIN '(' ')' COMPUND_STATMENT_PROC

    3 MAINBLOCK: FUNC_PROC_DEC MAIN_END
    4          | MAIN_END

    5 FUNC_PROC_DEC: DEF_A
    6              | FUNC_PROC_DEC DEF_A

    7 DEF_A: FUNC_DEF
    8      | PROC_DEF

    9 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC

   10 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK

   11 ARGES: '(' ')'
   12      | '(' OUT_ARGES ')'

   13 OUT_ARGES: INNER_ARGS ':' TYPE
   14          | INNER_ARGS ':' TYPE ';' OUT_ARGES

   15 INNER_ARGS: ID
   16           | ID ',' INNER_ARGS

   17 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}'
   18           | '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

   19 EXPRASION: CONST
   20          | '(' EXPRASION ')'
   21          | TRUE
   22          | FALSE
   23          | ID
   24          | '^' EXPRASION
   25          | '&' EXPRASION
   26          | '-' EXPRASION
   27          | '!' EXPRASION
   28          | ADDR_ID '=' VALUE
   29          | ID '[' EXPRASION ']' '=' VALUE
   30          | ID '[' EXPRASION ']'
   31          | ID '=' EXPRASION
   32          | EXPRASION NE_OP VALUE
   33          | EXPRASION AND_OP VALUE
   34          | EXPRASION OR_OP VALUE
   35          | EXPRASION '+' VALUE
   36          | EXPRASION '-' VALUE
   37          | EXPRASION '/' VALUE
   38          | EXPRASION '*' VALUE
   39          | EXPRASION EQL_OP VALUE
   40          | EXPRASION GE_OP VALUE
   41          | EXPRASION SE_OP VALUE
   42          | EXPRASION '>' VALUE
   43          | EXPRASION '<' VALUE
   44          | FUNC_ACTIVE
   45          | '|' EXPRASION '|'

   46 VALUE: %empty
   47      | ID '[' EXPRASION ']'
   48      | CONST
   49      | '(' EXPRASION ')'
   50      | TRUE
   51      | FALSE
   52      | ID
   53      | FUNC_ACTIVE
   54      | '|' VALUE '|'

   55 FUNC_ACTIVE: ID '(' ')'
   56            | ID '(' FUNC_ACTIVE_INNER_ARGES ')'

   57 FUNC_ACTIVE_INNER_ARGES: EXPRASION
   58                        | EXPRASION ',' FUNC_ACTIVE_INNER_ARGES

   59 STASTMENT_LIST: STASTMENT_LIST STASTMENT
   60               | STASTMENT

   61 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   62             | IF '(' EXPRASION ')' STASTMENT

   63 STASTMENT: COMPUND_STATMENT_PROC
   64          | EXPRASION ';'
   65          | IF_STASTMENT
   66          | LOOP_STATMENT

   67 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT
   68              | FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

   69 COMPUND_STATMENT_PROC: '{' '}'
   70                      | '{' INNER_COMPUND_STATMENT '}'

   71 INNER_COMPUND_STATMENT: STASTMENT_LIST
   72                       | DEC_INNER_BLOCK
   73                       | DEC_INNER_BLOCK STASTMENT_LIST

   74 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK
   75                | NEW_DECLARE

   76 NEW_DECLARE: VF
   77            | DEF_A

   78 VF: VAR VFDEC

   79 VFDEC: INNER_ARGS ':' TYPE ';'

   80 CONST: INT_NUM
   81      | R_NUM
   82      | HEX_NUM
   83      | NULLA
   84      | CHAR_VALUE
   85      | STRING_VALUE

   86 TYPE: STRING '[' INT_NUM ']'
   87     | BOOL
   88     | INT
   89     | REAL
   90     | CHAR
   91     | CHAR_POINER
   92     | REAL_POINER
   93     | INT_POINER


Terminals, with rules where they appear

$end (0) 0
'!' (33) 27
'&' (38) 25
'(' (40) 2 11 12 20 49 55 56 61 62 67 68
')' (41) 2 11 12 20 49 55 56 61 62 67 68
'*' (42) 38
'+' (43) 35
',' (44) 16 58
'-' (45) 26 36
'/' (47) 37
':' (58) 13 14 79
';' (59) 14 17 18 64 68 79
'<' (60) 43
'=' (61) 28 29 31
'>' (62) 42
'[' (91) 29 30 47 86
']' (93) 29 30 47 86
'^' (94) 24
'{' (123) 17 18 69 70
'|' (124) 45 54
'}' (125) 17 18 69 70
error (256)
CHAR <String> (258) 90
REAL <String> (259) 89
INT <String> (260) 88
BOOL <String> (261) 87
STRING <String> (262) 86
CHAR_POINER <String> (263) 91
REAL_POINER <String> (264) 92
FLOAT_POINER <String> (265)
INT_POINER <String> (266) 93
CHAR_POINTER <String> (267)
REAL_POINTER <String> (268)
INT_POINTER <String> (269)
NULLA <String> (270) 83
ELSE (271) 61
IF (272) 61 62
FOR (273) 68
WHILE (274) 67
TRUE (275) 21 50
FALSE (276) 22 51
RETURN (277) 10 17 18
MAIN (278) 2
VAR <String> (279) 78
FUNC <String> (280) 10
PROC <String> (281) 2 9
ADDR_ID <String> (282) 28
NULL_VALUE (283)
AND_OP (284) 33
GE_OP (285) 40
SE_OP (286) 41
NE_OP (287) 32
OR_OP (288) 34
EQL_OP (289) 39
BOOL_VALUE <String> (290)
CHAR_VALUE <String> (291) 84
STRING_VALUE <String> (292) 85
INT_NUM <String> (293) 80 86
R_NUM <String> (294) 81
HEX_NUM <String> (295) 82
ID <String> (296) 9 10 15 16 23 29 30 31 47 52 55 56
IFX (297)
test (298)
UMINUS (299)
UFUNC (300)


Nonterminals, with rules where they appear

$accept (66)
    on left: 0
S <Node> (67)
    on left: 1, on right: 0
MAIN_END <Node> (68)
    on left: 2, on right: 3 4
MAINBLOCK <Node> (69)
    on left: 3 4, on right: 1
FUNC_PROC_DEC <Node> (70)
    on left: 5 6, on right: 3 6
DEF_A <Node> (71)
    on left: 7 8, on right: 5 6 77
PROC_DEF <Node> (72)
    on left: 9, on right: 8
FUNC_DEF <Node> (73)
    on left: 10, on right: 7
ARGES <Node> (74)
    on left: 11 12, on right: 9 10
OUT_ARGES <Node> (75)
    on left: 13 14, on right: 12 14
INNER_ARGS <Node> (76)
    on left: 15 16, on right: 13 14 16 79
FUNC_BLOCK <Node> (77)
    on left: 17 18, on right: 10
EXPRASION <Node> (78)
    on left: 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36
    37 38 39 40 41 42 43 44 45, on right: 17 18 20 24 25 26 27 29 30
    31 32 33 34 35 36 37 38 39 40 41 42 43 45 47 49 57 58 61 62 64
    67 68
VALUE <Node> (79)
    on left: 46 47 48 49 50 51 52 53 54, on right: 28 29 32 33 34 35
    36 37 38 39 40 41 42 43 54
FUNC_ACTIVE <Node> (80)
    on left: 55 56, on right: 44 53
FUNC_ACTIVE_INNER_ARGES <Node> (81)
    on left: 57 58, on right: 56 58
STASTMENT_LIST <Node> (82)
    on left: 59 60, on right: 59 71 73
IF_STASTMENT <Node> (83)
    on left: 61 62, on right: 65
STASTMENT <Node> (84)
    on left: 63 64 65 66, on right: 59 60 61 62 67 68
LOOP_STATMENT <Node> (85)
    on left: 67 68, on right: 66
COMPUND_STATMENT_PROC <Node> (86)
    on left: 69 70, on right: 2 9 63
INNER_COMPUND_STATMENT <Node> (87)
    on left: 71 72 73, on right: 18 70
DEC_INNER_BLOCK <Node> (88)
    on left: 74 75, on right: 72 73 74
NEW_DECLARE <Node> (89)
    on left: 76 77, on right: 74 75
VF <Node> (90)
    on left: 78, on right: 76
VFDEC <Node> (91)
    on left: 79, on right: 78
CONST <Node> (92)
    on left: 80 81 82 83 84 85, on right: 19 48
TYPE <String> (93)
    on left: 86 87 88 89 90 91 92 93, on right: 10 13 14 79


State 0

    0 $accept: . S $end

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    S              go to state 3
    MAIN_END       go to state 4
    MAINBLOCK      go to state 5
    FUNC_PROC_DEC  go to state 6
    DEF_A          go to state 7
    PROC_DEF       go to state 8
    FUNC_DEF       go to state 9


State 1

   10 FUNC_DEF: FUNC . ID ARGES RETURN TYPE FUNC_BLOCK

    ID  shift, and go to state 10


State 2

    2 MAIN_END: PROC . MAIN '(' ')' COMPUND_STATMENT_PROC
    9 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT_PROC

    MAIN  shift, and go to state 11
    ID    shift, and go to state 12


State 3

    0 $accept: S . $end

    $end  shift, and go to state 13


State 4

    4 MAINBLOCK: MAIN_END .

    $default  reduce using rule 4 (MAINBLOCK)


State 5

    1 S: MAINBLOCK .

    $default  reduce using rule 1 (S)


State 6

    3 MAINBLOCK: FUNC_PROC_DEC . MAIN_END
    6 FUNC_PROC_DEC: FUNC_PROC_DEC . DEF_A

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    MAIN_END  go to state 14
    DEF_A     go to state 15
    PROC_DEF  go to state 8
    FUNC_DEF  go to state 9


State 7

    5 FUNC_PROC_DEC: DEF_A .

    $default  reduce using rule 5 (FUNC_PROC_DEC)


State 8

    8 DEF_A: PROC_DEF .

    $default  reduce using rule 8 (DEF_A)


State 9

    7 DEF_A: FUNC_DEF .

    $default  reduce using rule 7 (DEF_A)


State 10

   10 FUNC_DEF: FUNC ID . ARGES RETURN TYPE FUNC_BLOCK

    '('  shift, and go to state 16

    ARGES  go to state 17


State 11

    2 MAIN_END: PROC MAIN . '(' ')' COMPUND_STATMENT_PROC

    '('  shift, and go to state 18


State 12

    9 PROC_DEF: PROC ID . ARGES COMPUND_STATMENT_PROC

    '('  shift, and go to state 16

    ARGES  go to state 19


State 13

    0 $accept: S $end .

    $default  accept


State 14

    3 MAINBLOCK: FUNC_PROC_DEC MAIN_END .

    $default  reduce using rule 3 (MAINBLOCK)


State 15

    6 FUNC_PROC_DEC: FUNC_PROC_DEC DEF_A .

    $default  reduce using rule 6 (FUNC_PROC_DEC)


State 16

   11 ARGES: '(' . ')'
   12      | '(' . OUT_ARGES ')'

    ID   shift, and go to state 20
    ')'  shift, and go to state 21

    OUT_ARGES   go to state 22
    INNER_ARGS  go to state 23


State 17

   10 FUNC_DEF: FUNC ID ARGES . RETURN TYPE FUNC_BLOCK

    RETURN  shift, and go to state 24


State 18

    2 MAIN_END: PROC MAIN '(' . ')' COMPUND_STATMENT_PROC

    ')'  shift, and go to state 25


State 19

    9 PROC_DEF: PROC ID ARGES . COMPUND_STATMENT_PROC

    '{'  shift, and go to state 26

    COMPUND_STATMENT_PROC  go to state 27


State 20

   15 INNER_ARGS: ID .
   16           | ID . ',' INNER_ARGS

    ','  shift, and go to state 28

    $default  reduce using rule 15 (INNER_ARGS)


State 21

   11 ARGES: '(' ')' .

    $default  reduce using rule 11 (ARGES)


State 22

   12 ARGES: '(' OUT_ARGES . ')'

    ')'  shift, and go to state 29


State 23

   13 OUT_ARGES: INNER_ARGS . ':' TYPE
   14          | INNER_ARGS . ':' TYPE ';' OUT_ARGES

    ':'  shift, and go to state 30


State 24

   10 FUNC_DEF: FUNC ID ARGES RETURN . TYPE FUNC_BLOCK

    CHAR         shift, and go to state 31
    REAL         shift, and go to state 32
    INT          shift, and go to state 33
    BOOL         shift, and go to state 34
    STRING       shift, and go to state 35
    CHAR_POINER  shift, and go to state 36
    REAL_POINER  shift, and go to state 37
    INT_POINER   shift, and go to state 38

    TYPE  go to state 39


State 25

    2 MAIN_END: PROC MAIN '(' ')' . COMPUND_STATMENT_PROC

    '{'  shift, and go to state 26

    COMPUND_STATMENT_PROC  go to state 40


State 26

   69 COMPUND_STATMENT_PROC: '{' . '}'
   70                      | '{' . INNER_COMPUND_STATMENT '}'

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    VAR           shift, and go to state 47
    FUNC          shift, and go to state 1
    PROC          shift, and go to state 48
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '{'           shift, and go to state 26
    '}'           shift, and go to state 61
    '|'           shift, and go to state 62

    DEF_A                   go to state 63
    PROC_DEF                go to state 8
    FUNC_DEF                go to state 9
    EXPRASION               go to state 64
    FUNC_ACTIVE             go to state 65
    STASTMENT_LIST          go to state 66
    IF_STASTMENT            go to state 67
    STASTMENT               go to state 68
    LOOP_STATMENT           go to state 69
    COMPUND_STATMENT_PROC   go to state 70
    INNER_COMPUND_STATMENT  go to state 71
    DEC_INNER_BLOCK         go to state 72
    NEW_DECLARE             go to state 73
    VF                      go to state 74
    CONST                   go to state 75


State 27

    9 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC .

    $default  reduce using rule 9 (PROC_DEF)


State 28

   16 INNER_ARGS: ID ',' . INNER_ARGS

    ID  shift, and go to state 20

    INNER_ARGS  go to state 76


State 29

   12 ARGES: '(' OUT_ARGES ')' .

    $default  reduce using rule 12 (ARGES)


State 30

   13 OUT_ARGES: INNER_ARGS ':' . TYPE
   14          | INNER_ARGS ':' . TYPE ';' OUT_ARGES

    CHAR         shift, and go to state 31
    REAL         shift, and go to state 32
    INT          shift, and go to state 33
    BOOL         shift, and go to state 34
    STRING       shift, and go to state 35
    CHAR_POINER  shift, and go to state 36
    REAL_POINER  shift, and go to state 37
    INT_POINER   shift, and go to state 38

    TYPE  go to state 77


State 31

   90 TYPE: CHAR .

    $default  reduce using rule 90 (TYPE)


State 32

   89 TYPE: REAL .

    $default  reduce using rule 89 (TYPE)


State 33

   88 TYPE: INT .

    $default  reduce using rule 88 (TYPE)


State 34

   87 TYPE: BOOL .

    $default  reduce using rule 87 (TYPE)


State 35

   86 TYPE: STRING . '[' INT_NUM ']'

    '['  shift, and go to state 78


State 36

   91 TYPE: CHAR_POINER .

    $default  reduce using rule 91 (TYPE)


State 37

   92 TYPE: REAL_POINER .

    $default  reduce using rule 92 (TYPE)


State 38

   93 TYPE: INT_POINER .

    $default  reduce using rule 93 (TYPE)


State 39

   10 FUNC_DEF: FUNC ID ARGES RETURN TYPE . FUNC_BLOCK

    '{'  shift, and go to state 79

    FUNC_BLOCK  go to state 80


State 40

    2 MAIN_END: PROC MAIN '(' ')' COMPUND_STATMENT_PROC .

    $default  reduce using rule 2 (MAIN_END)


State 41

   83 CONST: NULLA .

    $default  reduce using rule 83 (CONST)


State 42

   61 IF_STASTMENT: IF . '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   62             | IF . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 81


State 43

   68 LOOP_STATMENT: FOR . '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    '('  shift, and go to state 82


State 44

   67 LOOP_STATMENT: WHILE . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 83


State 45

   21 EXPRASION: TRUE .

    $default  reduce using rule 21 (EXPRASION)


State 46

   22 EXPRASION: FALSE .

    $default  reduce using rule 22 (EXPRASION)


State 47

   78 VF: VAR . VFDEC

    ID  shift, and go to state 20

    INNER_ARGS  go to state 84
    VFDEC       go to state 85


State 48

    9 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT_PROC

    ID  shift, and go to state 12


State 49

   28 EXPRASION: ADDR_ID . '=' VALUE

    '='  shift, and go to state 86


State 50

   84 CONST: CHAR_VALUE .

    $default  reduce using rule 84 (CONST)


State 51

   85 CONST: STRING_VALUE .

    $default  reduce using rule 85 (CONST)


State 52

   80 CONST: INT_NUM .

    $default  reduce using rule 80 (CONST)


State 53

   81 CONST: R_NUM .

    $default  reduce using rule 81 (CONST)


State 54

   82 CONST: HEX_NUM .

    $default  reduce using rule 82 (CONST)


State 55

   23 EXPRASION: ID .
   29          | ID . '[' EXPRASION ']' '=' VALUE
   30          | ID . '[' EXPRASION ']'
   31          | ID . '=' EXPRASION
   55 FUNC_ACTIVE: ID . '(' ')'
   56            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 87
    '='  shift, and go to state 88
    '['  shift, and go to state 89

    $default  reduce using rule 23 (EXPRASION)


State 56

   26 EXPRASION: '-' . EXPRASION

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 90
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 57

   27 EXPRASION: '!' . EXPRASION

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 91
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 58

   24 EXPRASION: '^' . EXPRASION

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 92
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 59

   25 EXPRASION: '&' . EXPRASION

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 93
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 60

   20 EXPRASION: '(' . EXPRASION ')'

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 94
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 61

   69 COMPUND_STATMENT_PROC: '{' '}' .

    $default  reduce using rule 69 (COMPUND_STATMENT_PROC)


State 62

   45 EXPRASION: '|' . EXPRASION '|'

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 95
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 63

   77 NEW_DECLARE: DEF_A .

    $default  reduce using rule 77 (NEW_DECLARE)


State 64

   32 EXPRASION: EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE
   64 STASTMENT: EXPRASION . ';'

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    ';'     shift, and go to state 102
    '+'     shift, and go to state 103
    '-'     shift, and go to state 104
    '*'     shift, and go to state 105
    '/'     shift, and go to state 106
    '>'     shift, and go to state 107
    '<'     shift, and go to state 108


State 65

   44 EXPRASION: FUNC_ACTIVE .

    $default  reduce using rule 44 (EXPRASION)


State 66

   59 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   71 INNER_COMPUND_STATMENT: STASTMENT_LIST .

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '{'           shift, and go to state 26
    '|'           shift, and go to state 62

    $default  reduce using rule 71 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 64
    FUNC_ACTIVE            go to state 65
    IF_STASTMENT           go to state 67
    STASTMENT              go to state 109
    LOOP_STATMENT          go to state 69
    COMPUND_STATMENT_PROC  go to state 70
    CONST                  go to state 75


State 67

   65 STASTMENT: IF_STASTMENT .

    $default  reduce using rule 65 (STASTMENT)


State 68

   60 STASTMENT_LIST: STASTMENT .

    $default  reduce using rule 60 (STASTMENT_LIST)


State 69

   66 STASTMENT: LOOP_STATMENT .

    $default  reduce using rule 66 (STASTMENT)


State 70

   63 STASTMENT: COMPUND_STATMENT_PROC .

    $default  reduce using rule 63 (STASTMENT)


State 71

   70 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT . '}'

    '}'  shift, and go to state 110


State 72

   72 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK .
   73                       | DEC_INNER_BLOCK . STASTMENT_LIST

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '{'           shift, and go to state 26
    '|'           shift, and go to state 62

    $default  reduce using rule 72 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 64
    FUNC_ACTIVE            go to state 65
    STASTMENT_LIST         go to state 111
    IF_STASTMENT           go to state 67
    STASTMENT              go to state 68
    LOOP_STATMENT          go to state 69
    COMPUND_STATMENT_PROC  go to state 70
    CONST                  go to state 75


State 73

   74 DEC_INNER_BLOCK: NEW_DECLARE . DEC_INNER_BLOCK
   75                | NEW_DECLARE .

    VAR   shift, and go to state 47
    FUNC  shift, and go to state 1
    PROC  shift, and go to state 48

    $default  reduce using rule 75 (DEC_INNER_BLOCK)

    DEF_A            go to state 63
    PROC_DEF         go to state 8
    FUNC_DEF         go to state 9
    DEC_INNER_BLOCK  go to state 112
    NEW_DECLARE      go to state 73
    VF               go to state 74


State 74

   76 NEW_DECLARE: VF .

    $default  reduce using rule 76 (NEW_DECLARE)


State 75

   19 EXPRASION: CONST .

    $default  reduce using rule 19 (EXPRASION)


State 76

   16 INNER_ARGS: ID ',' INNER_ARGS .

    $default  reduce using rule 16 (INNER_ARGS)


State 77

   13 OUT_ARGES: INNER_ARGS ':' TYPE .
   14          | INNER_ARGS ':' TYPE . ';' OUT_ARGES

    ';'  shift, and go to state 113

    $default  reduce using rule 13 (OUT_ARGES)


State 78

   86 TYPE: STRING '[' . INT_NUM ']'

    INT_NUM  shift, and go to state 114


State 79

   17 FUNC_BLOCK: '{' . RETURN EXPRASION ';' '}'
   18           | '{' . INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    RETURN        shift, and go to state 115
    VAR           shift, and go to state 47
    FUNC          shift, and go to state 1
    PROC          shift, and go to state 48
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '{'           shift, and go to state 26
    '|'           shift, and go to state 62

    DEF_A                   go to state 63
    PROC_DEF                go to state 8
    FUNC_DEF                go to state 9
    EXPRASION               go to state 64
    FUNC_ACTIVE             go to state 65
    STASTMENT_LIST          go to state 66
    IF_STASTMENT            go to state 67
    STASTMENT               go to state 68
    LOOP_STATMENT           go to state 69
    COMPUND_STATMENT_PROC   go to state 70
    INNER_COMPUND_STATMENT  go to state 116
    DEC_INNER_BLOCK         go to state 72
    NEW_DECLARE             go to state 73
    VF                      go to state 74
    CONST                   go to state 75


State 80

   10 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK .

    $default  reduce using rule 10 (FUNC_DEF)


State 81

   61 IF_STASTMENT: IF '(' . EXPRASION ')' STASTMENT ELSE STASTMENT
   62             | IF '(' . EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 117
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 82

   68 LOOP_STATMENT: FOR '(' . EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 118
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 83

   67 LOOP_STATMENT: WHILE '(' . EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 119
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 84

   79 VFDEC: INNER_ARGS . ':' TYPE ';'

    ':'  shift, and go to state 120


State 85

   78 VF: VAR VFDEC .

    $default  reduce using rule 78 (VF)


State 86

   28 EXPRASION: ADDR_ID '=' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 121
    FALSE         shift, and go to state 122
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 123
    '('           shift, and go to state 124
    '|'           shift, and go to state 125

    '|'       [reduce using rule 46 (VALUE)]
    $default  reduce using rule 46 (VALUE)

    VALUE        go to state 126
    FUNC_ACTIVE  go to state 127
    CONST        go to state 128


State 87

   55 FUNC_ACTIVE: ID '(' . ')'
   56            | ID '(' . FUNC_ACTIVE_INNER_ARGES ')'

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    ')'           shift, and go to state 129
    '|'           shift, and go to state 62

    EXPRASION                go to state 130
    FUNC_ACTIVE              go to state 65
    FUNC_ACTIVE_INNER_ARGES  go to state 131
    CONST                    go to state 75


State 88

   31 EXPRASION: ID '=' . EXPRASION

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 132
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 89

   29 EXPRASION: ID '[' . EXPRASION ']' '=' VALUE
   30          | ID '[' . EXPRASION ']'

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 133
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 90

   26 EXPRASION: '-' EXPRASION .
   32          | EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 99

    NE_OP     [reduce using rule 26 (EXPRASION)]
    $default  reduce using rule 26 (EXPRASION)


State 91

   27 EXPRASION: '!' EXPRASION .
   32          | EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 99

    NE_OP     [reduce using rule 27 (EXPRASION)]
    $default  reduce using rule 27 (EXPRASION)


State 92

   24 EXPRASION: '^' EXPRASION .
   32          | EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 99

    NE_OP     [reduce using rule 24 (EXPRASION)]
    $default  reduce using rule 24 (EXPRASION)


State 93

   25 EXPRASION: '&' EXPRASION .
   32          | EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 99

    NE_OP     [reduce using rule 25 (EXPRASION)]
    $default  reduce using rule 25 (EXPRASION)


State 94

   20 EXPRASION: '(' EXPRASION . ')'
   32          | EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '+'     shift, and go to state 103
    '-'     shift, and go to state 104
    '*'     shift, and go to state 105
    '/'     shift, and go to state 106
    '>'     shift, and go to state 107
    '<'     shift, and go to state 108
    ')'     shift, and go to state 134


State 95

   32 EXPRASION: EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE
   45          | '|' EXPRASION . '|'

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '+'     shift, and go to state 103
    '-'     shift, and go to state 104
    '*'     shift, and go to state 105
    '/'     shift, and go to state 106
    '>'     shift, and go to state 107
    '<'     shift, and go to state 108
    '|'     shift, and go to state 135


State 96

   33 EXPRASION: EXPRASION AND_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 121
    FALSE         shift, and go to state 122
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 123
    '('           shift, and go to state 124
    '|'           shift, and go to state 125

    '|'       [reduce using rule 46 (VALUE)]
    $default  reduce using rule 46 (VALUE)

    VALUE        go to state 136
    FUNC_ACTIVE  go to state 127
    CONST        go to state 128


State 97

   40 EXPRASION: EXPRASION GE_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 121
    FALSE         shift, and go to state 122
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 123
    '('           shift, and go to state 124
    '|'           shift, and go to state 125

    '|'       [reduce using rule 46 (VALUE)]
    $default  reduce using rule 46 (VALUE)

    VALUE        go to state 137
    FUNC_ACTIVE  go to state 127
    CONST        go to state 128


State 98

   41 EXPRASION: EXPRASION SE_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 121
    FALSE         shift, and go to state 122
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 123
    '('           shift, and go to state 124
    '|'           shift, and go to state 125

    '|'       [reduce using rule 46 (VALUE)]
    $default  reduce using rule 46 (VALUE)

    VALUE        go to state 138
    FUNC_ACTIVE  go to state 127
    CONST        go to state 128


State 99

   32 EXPRASION: EXPRASION NE_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 121
    FALSE         shift, and go to state 122
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 123
    '('           shift, and go to state 124
    '|'           shift, and go to state 125

    '|'       [reduce using rule 46 (VALUE)]
    $default  reduce using rule 46 (VALUE)

    VALUE        go to state 139
    FUNC_ACTIVE  go to state 127
    CONST        go to state 128


State 100

   34 EXPRASION: EXPRASION OR_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 121
    FALSE         shift, and go to state 122
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 123
    '('           shift, and go to state 124
    '|'           shift, and go to state 125

    '|'       [reduce using rule 46 (VALUE)]
    $default  reduce using rule 46 (VALUE)

    VALUE        go to state 140
    FUNC_ACTIVE  go to state 127
    CONST        go to state 128


State 101

   39 EXPRASION: EXPRASION EQL_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 121
    FALSE         shift, and go to state 122
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 123
    '('           shift, and go to state 124
    '|'           shift, and go to state 125

    '|'       [reduce using rule 46 (VALUE)]
    $default  reduce using rule 46 (VALUE)

    VALUE        go to state 141
    FUNC_ACTIVE  go to state 127
    CONST        go to state 128


State 102

   64 STASTMENT: EXPRASION ';' .

    $default  reduce using rule 64 (STASTMENT)


State 103

   35 EXPRASION: EXPRASION '+' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 121
    FALSE         shift, and go to state 122
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 123
    '('           shift, and go to state 124
    '|'           shift, and go to state 125

    '|'       [reduce using rule 46 (VALUE)]
    $default  reduce using rule 46 (VALUE)

    VALUE        go to state 142
    FUNC_ACTIVE  go to state 127
    CONST        go to state 128


State 104

   36 EXPRASION: EXPRASION '-' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 121
    FALSE         shift, and go to state 122
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 123
    '('           shift, and go to state 124
    '|'           shift, and go to state 125

    '|'       [reduce using rule 46 (VALUE)]
    $default  reduce using rule 46 (VALUE)

    VALUE        go to state 143
    FUNC_ACTIVE  go to state 127
    CONST        go to state 128


State 105

   38 EXPRASION: EXPRASION '*' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 121
    FALSE         shift, and go to state 122
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 123
    '('           shift, and go to state 124
    '|'           shift, and go to state 125

    '|'       [reduce using rule 46 (VALUE)]
    $default  reduce using rule 46 (VALUE)

    VALUE        go to state 144
    FUNC_ACTIVE  go to state 127
    CONST        go to state 128


State 106

   37 EXPRASION: EXPRASION '/' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 121
    FALSE         shift, and go to state 122
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 123
    '('           shift, and go to state 124
    '|'           shift, and go to state 125

    '|'       [reduce using rule 46 (VALUE)]
    $default  reduce using rule 46 (VALUE)

    VALUE        go to state 145
    FUNC_ACTIVE  go to state 127
    CONST        go to state 128


State 107

   42 EXPRASION: EXPRASION '>' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 121
    FALSE         shift, and go to state 122
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 123
    '('           shift, and go to state 124
    '|'           shift, and go to state 125

    '|'       [reduce using rule 46 (VALUE)]
    $default  reduce using rule 46 (VALUE)

    VALUE        go to state 146
    FUNC_ACTIVE  go to state 127
    CONST        go to state 128


State 108

   43 EXPRASION: EXPRASION '<' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 121
    FALSE         shift, and go to state 122
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 123
    '('           shift, and go to state 124
    '|'           shift, and go to state 125

    '|'       [reduce using rule 46 (VALUE)]
    $default  reduce using rule 46 (VALUE)

    VALUE        go to state 147
    FUNC_ACTIVE  go to state 127
    CONST        go to state 128


State 109

   59 STASTMENT_LIST: STASTMENT_LIST STASTMENT .

    $default  reduce using rule 59 (STASTMENT_LIST)


State 110

   70 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT '}' .

    $default  reduce using rule 70 (COMPUND_STATMENT_PROC)


State 111

   59 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   73 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK STASTMENT_LIST .

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '{'           shift, and go to state 26
    '|'           shift, and go to state 62

    $default  reduce using rule 73 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 64
    FUNC_ACTIVE            go to state 65
    IF_STASTMENT           go to state 67
    STASTMENT              go to state 109
    LOOP_STATMENT          go to state 69
    COMPUND_STATMENT_PROC  go to state 70
    CONST                  go to state 75


State 112

   74 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK .

    $default  reduce using rule 74 (DEC_INNER_BLOCK)


State 113

   14 OUT_ARGES: INNER_ARGS ':' TYPE ';' . OUT_ARGES

    ID  shift, and go to state 20

    OUT_ARGES   go to state 148
    INNER_ARGS  go to state 23


State 114

   86 TYPE: STRING '[' INT_NUM . ']'

    ']'  shift, and go to state 149


State 115

   17 FUNC_BLOCK: '{' RETURN . EXPRASION ';' '}'

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 150
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 116

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT . RETURN EXPRASION ';' '}'

    RETURN  shift, and go to state 151


State 117

   32 EXPRASION: EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE
   61 IF_STASTMENT: IF '(' EXPRASION . ')' STASTMENT ELSE STASTMENT
   62             | IF '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '+'     shift, and go to state 103
    '-'     shift, and go to state 104
    '*'     shift, and go to state 105
    '/'     shift, and go to state 106
    '>'     shift, and go to state 107
    '<'     shift, and go to state 108
    ')'     shift, and go to state 152


State 118

   32 EXPRASION: EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE
   68 LOOP_STATMENT: FOR '(' EXPRASION . ';' EXPRASION ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    ';'     shift, and go to state 153
    '+'     shift, and go to state 103
    '-'     shift, and go to state 104
    '*'     shift, and go to state 105
    '/'     shift, and go to state 106
    '>'     shift, and go to state 107
    '<'     shift, and go to state 108


State 119

   32 EXPRASION: EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE
   67 LOOP_STATMENT: WHILE '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '+'     shift, and go to state 103
    '-'     shift, and go to state 104
    '*'     shift, and go to state 105
    '/'     shift, and go to state 106
    '>'     shift, and go to state 107
    '<'     shift, and go to state 108
    ')'     shift, and go to state 154


State 120

   79 VFDEC: INNER_ARGS ':' . TYPE ';'

    CHAR         shift, and go to state 31
    REAL         shift, and go to state 32
    INT          shift, and go to state 33
    BOOL         shift, and go to state 34
    STRING       shift, and go to state 35
    CHAR_POINER  shift, and go to state 36
    REAL_POINER  shift, and go to state 37
    INT_POINER   shift, and go to state 38

    TYPE  go to state 155


State 121

   50 VALUE: TRUE .

    $default  reduce using rule 50 (VALUE)


State 122

   51 VALUE: FALSE .

    $default  reduce using rule 51 (VALUE)


State 123

   47 VALUE: ID . '[' EXPRASION ']'
   52      | ID .
   55 FUNC_ACTIVE: ID . '(' ')'
   56            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 87
    '['  shift, and go to state 156

    $default  reduce using rule 52 (VALUE)


State 124

   49 VALUE: '(' . EXPRASION ')'

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 157
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 125

   54 VALUE: '|' . VALUE '|'

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 121
    FALSE         shift, and go to state 122
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 123
    '('           shift, and go to state 124
    '|'           shift, and go to state 125

    '|'  [reduce using rule 46 (VALUE)]

    VALUE        go to state 158
    FUNC_ACTIVE  go to state 127
    CONST        go to state 128


State 126

   28 EXPRASION: ADDR_ID '=' VALUE .

    $default  reduce using rule 28 (EXPRASION)


State 127

   53 VALUE: FUNC_ACTIVE .

    $default  reduce using rule 53 (VALUE)


State 128

   48 VALUE: CONST .

    $default  reduce using rule 48 (VALUE)


State 129

   55 FUNC_ACTIVE: ID '(' ')' .

    $default  reduce using rule 55 (FUNC_ACTIVE)


State 130

   32 EXPRASION: EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE
   57 FUNC_ACTIVE_INNER_ARGES: EXPRASION .
   58                        | EXPRASION . ',' FUNC_ACTIVE_INNER_ARGES

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '+'     shift, and go to state 103
    '-'     shift, and go to state 104
    '*'     shift, and go to state 105
    '/'     shift, and go to state 106
    '>'     shift, and go to state 107
    '<'     shift, and go to state 108
    ','     shift, and go to state 159

    $default  reduce using rule 57 (FUNC_ACTIVE_INNER_ARGES)


State 131

   56 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES . ')'

    ')'  shift, and go to state 160


State 132

   31 EXPRASION: ID '=' EXPRASION .
   32          | EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '+'     shift, and go to state 103
    '-'     shift, and go to state 104
    '*'     shift, and go to state 105
    '/'     shift, and go to state 106
    '>'     shift, and go to state 107
    '<'     shift, and go to state 108

    AND_OP    [reduce using rule 31 (EXPRASION)]
    GE_OP     [reduce using rule 31 (EXPRASION)]
    SE_OP     [reduce using rule 31 (EXPRASION)]
    NE_OP     [reduce using rule 31 (EXPRASION)]
    OR_OP     [reduce using rule 31 (EXPRASION)]
    EQL_OP    [reduce using rule 31 (EXPRASION)]
    '+'       [reduce using rule 31 (EXPRASION)]
    '-'       [reduce using rule 31 (EXPRASION)]
    '*'       [reduce using rule 31 (EXPRASION)]
    '/'       [reduce using rule 31 (EXPRASION)]
    '>'       [reduce using rule 31 (EXPRASION)]
    '<'       [reduce using rule 31 (EXPRASION)]
    $default  reduce using rule 31 (EXPRASION)


State 133

   29 EXPRASION: ID '[' EXPRASION . ']' '=' VALUE
   30          | ID '[' EXPRASION . ']'
   32          | EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '+'     shift, and go to state 103
    '-'     shift, and go to state 104
    '*'     shift, and go to state 105
    '/'     shift, and go to state 106
    '>'     shift, and go to state 107
    '<'     shift, and go to state 108
    ']'     shift, and go to state 161


State 134

   20 EXPRASION: '(' EXPRASION ')' .

    $default  reduce using rule 20 (EXPRASION)


State 135

   45 EXPRASION: '|' EXPRASION '|' .

    $default  reduce using rule 45 (EXPRASION)


State 136

   33 EXPRASION: EXPRASION AND_OP VALUE .

    $default  reduce using rule 33 (EXPRASION)


State 137

   40 EXPRASION: EXPRASION GE_OP VALUE .

    $default  reduce using rule 40 (EXPRASION)


State 138

   41 EXPRASION: EXPRASION SE_OP VALUE .

    $default  reduce using rule 41 (EXPRASION)


State 139

   32 EXPRASION: EXPRASION NE_OP VALUE .

    $default  reduce using rule 32 (EXPRASION)


State 140

   34 EXPRASION: EXPRASION OR_OP VALUE .

    $default  reduce using rule 34 (EXPRASION)


State 141

   39 EXPRASION: EXPRASION EQL_OP VALUE .

    $default  reduce using rule 39 (EXPRASION)


State 142

   35 EXPRASION: EXPRASION '+' VALUE .

    $default  reduce using rule 35 (EXPRASION)


State 143

   36 EXPRASION: EXPRASION '-' VALUE .

    $default  reduce using rule 36 (EXPRASION)


State 144

   38 EXPRASION: EXPRASION '*' VALUE .

    $default  reduce using rule 38 (EXPRASION)


State 145

   37 EXPRASION: EXPRASION '/' VALUE .

    $default  reduce using rule 37 (EXPRASION)


State 146

   42 EXPRASION: EXPRASION '>' VALUE .

    $default  reduce using rule 42 (EXPRASION)


State 147

   43 EXPRASION: EXPRASION '<' VALUE .

    $default  reduce using rule 43 (EXPRASION)


State 148

   14 OUT_ARGES: INNER_ARGS ':' TYPE ';' OUT_ARGES .

    $default  reduce using rule 14 (OUT_ARGES)


State 149

   86 TYPE: STRING '[' INT_NUM ']' .

    $default  reduce using rule 86 (TYPE)


State 150

   17 FUNC_BLOCK: '{' RETURN EXPRASION . ';' '}'
   32 EXPRASION: EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    ';'     shift, and go to state 162
    '+'     shift, and go to state 103
    '-'     shift, and go to state 104
    '*'     shift, and go to state 105
    '/'     shift, and go to state 106
    '>'     shift, and go to state 107
    '<'     shift, and go to state 108


State 151

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN . EXPRASION ';' '}'

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 163
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 152

   61 IF_STASTMENT: IF '(' EXPRASION ')' . STASTMENT ELSE STASTMENT
   62             | IF '(' EXPRASION ')' . STASTMENT

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '{'           shift, and go to state 26
    '|'           shift, and go to state 62

    EXPRASION              go to state 64
    FUNC_ACTIVE            go to state 65
    IF_STASTMENT           go to state 67
    STASTMENT              go to state 164
    LOOP_STATMENT          go to state 69
    COMPUND_STATMENT_PROC  go to state 70
    CONST                  go to state 75


State 153

   68 LOOP_STATMENT: FOR '(' EXPRASION ';' . EXPRASION ';' EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 165
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 154

   67 LOOP_STATMENT: WHILE '(' EXPRASION ')' . STASTMENT

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '{'           shift, and go to state 26
    '|'           shift, and go to state 62

    EXPRASION              go to state 64
    FUNC_ACTIVE            go to state 65
    IF_STASTMENT           go to state 67
    STASTMENT              go to state 166
    LOOP_STATMENT          go to state 69
    COMPUND_STATMENT_PROC  go to state 70
    CONST                  go to state 75


State 155

   79 VFDEC: INNER_ARGS ':' TYPE . ';'

    ';'  shift, and go to state 167


State 156

   47 VALUE: ID '[' . EXPRASION ']'

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 168
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 157

   32 EXPRASION: EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE
   49 VALUE: '(' EXPRASION . ')'

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '+'     shift, and go to state 103
    '-'     shift, and go to state 104
    '*'     shift, and go to state 105
    '/'     shift, and go to state 106
    '>'     shift, and go to state 107
    '<'     shift, and go to state 108
    ')'     shift, and go to state 169


State 158

   54 VALUE: '|' VALUE . '|'

    '|'  shift, and go to state 170


State 159

   58 FUNC_ACTIVE_INNER_ARGES: EXPRASION ',' . FUNC_ACTIVE_INNER_ARGES

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION                go to state 130
    FUNC_ACTIVE              go to state 65
    FUNC_ACTIVE_INNER_ARGES  go to state 171
    CONST                    go to state 75


State 160

   56 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES ')' .

    $default  reduce using rule 56 (FUNC_ACTIVE)


State 161

   29 EXPRASION: ID '[' EXPRASION ']' . '=' VALUE
   30          | ID '[' EXPRASION ']' .

    '='  shift, and go to state 172

    $default  reduce using rule 30 (EXPRASION)


State 162

   17 FUNC_BLOCK: '{' RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 173


State 163

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION . ';' '}'
   32 EXPRASION: EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    ';'     shift, and go to state 174
    '+'     shift, and go to state 103
    '-'     shift, and go to state 104
    '*'     shift, and go to state 105
    '/'     shift, and go to state 106
    '>'     shift, and go to state 107
    '<'     shift, and go to state 108


State 164

   61 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT . ELSE STASTMENT
   62             | IF '(' EXPRASION ')' STASTMENT .

    ELSE  shift, and go to state 175

    $default  reduce using rule 62 (IF_STASTMENT)


State 165

   32 EXPRASION: EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE
   68 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION . ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    ';'     shift, and go to state 176
    '+'     shift, and go to state 103
    '-'     shift, and go to state 104
    '*'     shift, and go to state 105
    '/'     shift, and go to state 106
    '>'     shift, and go to state 107
    '<'     shift, and go to state 108


State 166

   67 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT .

    $default  reduce using rule 67 (LOOP_STATMENT)


State 167

   79 VFDEC: INNER_ARGS ':' TYPE ';' .

    $default  reduce using rule 79 (VFDEC)


State 168

   32 EXPRASION: EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE
   47 VALUE: ID '[' EXPRASION . ']'

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '+'     shift, and go to state 103
    '-'     shift, and go to state 104
    '*'     shift, and go to state 105
    '/'     shift, and go to state 106
    '>'     shift, and go to state 107
    '<'     shift, and go to state 108
    ']'     shift, and go to state 177


State 169

   49 VALUE: '(' EXPRASION ')' .

    $default  reduce using rule 49 (VALUE)


State 170

   54 VALUE: '|' VALUE '|' .

    $default  reduce using rule 54 (VALUE)


State 171

   58 FUNC_ACTIVE_INNER_ARGES: EXPRASION ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 58 (FUNC_ACTIVE_INNER_ARGES)


State 172

   29 EXPRASION: ID '[' EXPRASION ']' '=' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 121
    FALSE         shift, and go to state 122
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 123
    '('           shift, and go to state 124
    '|'           shift, and go to state 125

    '|'       [reduce using rule 46 (VALUE)]
    $default  reduce using rule 46 (VALUE)

    VALUE        go to state 178
    FUNC_ACTIVE  go to state 127
    CONST        go to state 128


State 173

   17 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}' .

    $default  reduce using rule 17 (FUNC_BLOCK)


State 174

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 179


State 175

   61 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE . STASTMENT

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '{'           shift, and go to state 26
    '|'           shift, and go to state 62

    EXPRASION              go to state 64
    FUNC_ACTIVE            go to state 65
    IF_STASTMENT           go to state 67
    STASTMENT              go to state 180
    LOOP_STATMENT          go to state 69
    COMPUND_STATMENT_PROC  go to state 70
    CONST                  go to state 75


State 176

   68 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' . EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '|'           shift, and go to state 62

    EXPRASION    go to state 181
    FUNC_ACTIVE  go to state 65
    CONST        go to state 75


State 177

   47 VALUE: ID '[' EXPRASION ']' .

    $default  reduce using rule 47 (VALUE)


State 178

   29 EXPRASION: ID '[' EXPRASION ']' '=' VALUE .

    $default  reduce using rule 29 (EXPRASION)


State 179

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}' .

    $default  reduce using rule 18 (FUNC_BLOCK)


State 180

   61 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT .

    $default  reduce using rule 61 (IF_STASTMENT)


State 181

   32 EXPRASION: EXPRASION . NE_OP VALUE
   33          | EXPRASION . AND_OP VALUE
   34          | EXPRASION . OR_OP VALUE
   35          | EXPRASION . '+' VALUE
   36          | EXPRASION . '-' VALUE
   37          | EXPRASION . '/' VALUE
   38          | EXPRASION . '*' VALUE
   39          | EXPRASION . EQL_OP VALUE
   40          | EXPRASION . GE_OP VALUE
   41          | EXPRASION . SE_OP VALUE
   42          | EXPRASION . '>' VALUE
   43          | EXPRASION . '<' VALUE
   68 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '+'     shift, and go to state 103
    '-'     shift, and go to state 104
    '*'     shift, and go to state 105
    '/'     shift, and go to state 106
    '>'     shift, and go to state 107
    '<'     shift, and go to state 108
    ')'     shift, and go to state 182


State 182

   68 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' . STASTMENT

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    TRUE          shift, and go to state 45
    FALSE         shift, and go to state 46
    ADDR_ID       shift, and go to state 49
    CHAR_VALUE    shift, and go to state 50
    STRING_VALUE  shift, and go to state 51
    INT_NUM       shift, and go to state 52
    R_NUM         shift, and go to state 53
    HEX_NUM       shift, and go to state 54
    ID            shift, and go to state 55
    '-'           shift, and go to state 56
    '!'           shift, and go to state 57
    '^'           shift, and go to state 58
    '&'           shift, and go to state 59
    '('           shift, and go to state 60
    '{'           shift, and go to state 26
    '|'           shift, and go to state 62

    EXPRASION              go to state 64
    FUNC_ACTIVE            go to state 65
    IF_STASTMENT           go to state 67
    STASTMENT              go to state 183
    LOOP_STATMENT          go to state 69
    COMPUND_STATMENT_PROC  go to state 70
    CONST                  go to state 75


State 183

   68 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT .

    $default  reduce using rule 68 (LOOP_STATMENT)
