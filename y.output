Terminals unused in grammar

   CHAR_POINTER
   REAL_POINTER
   FLOAT_POINTER
   INT_POINTER
   MAIN
   NULL_VALUE
   BOOL_VALUE
   CHAR_VALUE
   STRING_VALUE
   test
   UFUNC


State 5 conflicts: 2 shift/reduce
State 64 conflicts: 1 shift/reduce
State 79 conflicts: 1 shift/reduce
State 80 conflicts: 1 shift/reduce
State 81 conflicts: 1 shift/reduce
State 82 conflicts: 1 shift/reduce
State 118 conflicts: 12 shift/reduce
State 123 conflicts: 1 shift/reduce
State 124 conflicts: 1 shift/reduce
State 125 conflicts: 1 shift/reduce
State 126 conflicts: 12 shift/reduce
State 127 conflicts: 1 shift/reduce
State 128 conflicts: 1 shift/reduce
State 129 conflicts: 1 shift/reduce
State 130 conflicts: 1 shift/reduce
State 131 conflicts: 1 shift/reduce
State 132 conflicts: 1 shift/reduce
State 133 conflicts: 1 shift/reduce
State 134 conflicts: 1 shift/reduce
State 154 conflicts: 1 shift/reduce


Grammar

    0 $accept: S $end

    1 S: FUNC_PROC_DEC

    2 FUNC_PROC_DEC: DEF_A
    3              | DEF_A FUNC_PROC_DEC

    4 DEF_A: FUNC_DEF
    5      | PROC_DEF

    6 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC

    7 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK

    8 ARGES: '(' ')'
    9      | '(' OUT_ARGES ')'

   10 OUT_ARGES: INNER_ARGS ':' TYPE
   11          | INNER_ARGS ':' TYPE ';' OUT_ARGES

   12 INNER_ARGS: ID
   13           | ID ',' INNER_ARGS

   14 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}'
   15           | '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

   16 EXPRASION: CONST
   17          | '(' EXPRASION ')'
   18          | TRUE
   19          | FALSE
   20          | ID
   21          | '^' EXPRASION
   22          | '&' EXPRASION
   23          | '-' EXPRASION
   24          | '!' EXPRASION
   25          | ID '=' EXPRASION
   26          | EXPRASION NE_OP EXPRASION
   27          | EXPRASION AND_OP EXPRASION
   28          | EXPRASION OR_OP EXPRASION
   29          | EXPRASION '+' EXPRASION
   30          | EXPRASION '-' EXPRASION
   31          | EXPRASION '/' EXPRASION
   32          | EXPRASION '*' EXPRASION
   33          | EXPRASION EQL_OP EXPRASION
   34          | EXPRASION GE_OP EXPRASION
   35          | EXPRASION SE_OP EXPRASION
   36          | EXPRASION '>' EXPRASION
   37          | EXPRASION '<' EXPRASION
   38          | FUNC_ACTIVE

   39 FUNC_ACTIVE: ID '(' ')'
   40            | ID '(' FUNC_ACTIVE_INNER_ARGES ')'

   41 FUNC_ACTIVE_INNER_ARGES: ID
   42                        | FUNC_ACTIVE
   43                        | CONST
   44                        | ID ',' FUNC_ACTIVE_INNER_ARGES
   45                        | CONST ',' FUNC_ACTIVE_INNER_ARGES
   46                        | FUNC_ACTIVE ',' FUNC_ACTIVE_INNER_ARGES

   47 STASTMENT_LIST: STASTMENT_LIST STASTMENT
   48               | STASTMENT

   49 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   50             | IF '(' EXPRASION ')' STASTMENT

   51 STASTMENT: COMPUND_STATMENT
   52          | EXPRASION ';'
   53          | IF_STASTMENT
   54          | LOOP_STATMENT

   55 RETURN_STATMENT: RETURN EXPRASION ';'

   56 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT
   57              | FOR '(' EXPRASION ';' EXPRASION ';' UPDATES ')' STASTMENT

   58 UPDATES: ID '+' '+'
   59        | ID '-' '-'

   60 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT RETURN_STATMENT '}'
   61                 | '{' RETURN_STATMENT '}'

   62 COMPUND_STATMENT_PROC: '{' '}'
   63                      | '{' INNER_COMPUND_STATMENT '}'

   64 INNER_COMPUND_STATMENT: STASTMENT_LIST
   65                       | DEC_INNER_BLOCK
   66                       | DEC_INNER_BLOCK STASTMENT_LIST

   67 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK
   68                | NEW_DECLARE

   69 NEW_DECLARE: VAR_DECLARE
   70            | FUNC_PROC_DEC

   71 VAR_DECLARE: VF
   72            | VAR_DECLARE VF

   73 VF: VAR VFDEC

   74 VFDEC: INNER_ARGS ':' TYPE ';'
   75      | INNER_ARGS ':' TYPE ';' VFDEC

   76 CONST: INT_NUM
   77      | F_NUM
   78      | HEX_NUM

   79 TYPE: STRING '[' INT_NUM ']'
   80     | BOOL
   81     | INT
   82     | FLOAT
   83     | REAL
   84     | CHAR
   85     | CHAR_POINER
   86     | REAL_POINER
   87     | FLOAT_POINER
   88     | INT_POINER


Terminals, with rules where they appear

$end (0) 0
'!' (33) 24
'&' (38) 22
'(' (40) 8 9 17 39 40 49 50 56 57
')' (41) 8 9 17 39 40 49 50 56 57
'*' (42) 32
'+' (43) 29 58
',' (44) 13 44 45 46
'-' (45) 23 30 59
'/' (47) 31
':' (58) 10 11 74 75
';' (59) 11 14 15 52 55 57 74 75
'<' (60) 37
'=' (61) 25
'>' (62) 36
'[' (91) 79
']' (93) 79
'^' (94) 21
'{' (123) 14 15 60 61 62 63
'}' (125) 14 15 60 61 62 63
error (256)
CHAR <String> (258) 84
REAL <String> (259) 83
FLOAT <String> (260) 82
INT <String> (261) 81
BOOL <String> (262) 80
STRING <String> (263) 79
CHAR_POINER <String> (264) 85
REAL_POINER <String> (265) 86
FLOAT_POINER <String> (266) 87
INT_POINER <String> (267) 88
CHAR_POINTER <String> (268)
REAL_POINTER <String> (269)
FLOAT_POINTER <String> (270)
INT_POINTER <String> (271)
ELSE (272) 49
IF (273) 49 50
FOR (274) 57
WHILE (275) 56
TRUE (276) 18
FALSE (277) 19
RETURN (278) 7 14 15 55
MAIN <Node> (279)
VAR <String> (280) 73
FUNC <String> (281) 7
PROC <String> (282) 6
NULL_VALUE (283)
AND_OP (284) 27
GE_OP (285) 34
SE_OP (286) 35
NE_OP (287) 26
OR_OP (288) 28
EQL_OP (289) 33
BOOL_VALUE <String> (290)
CHAR_VALUE <String> (291)
STRING_VALUE <String> (292)
INT_NUM <String> (293) 76 79
F_NUM <String> (294) 77
HEX_NUM <String> (295) 78
ID <String> (296) 6 7 12 13 20 25 39 40 41 44 58 59
IFX (297)
test (298)
UMINUS (299)
UFUNC (300)


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
S <Node> (66)
    on left: 1, on right: 0
FUNC_PROC_DEC <Node> (67)
    on left: 2 3, on right: 1 3 70
DEF_A <Node> (68)
    on left: 4 5, on right: 2 3
PROC_DEF <Node> (69)
    on left: 6, on right: 5
FUNC_DEF <Node> (70)
    on left: 7, on right: 4
ARGES <Node> (71)
    on left: 8 9, on right: 6 7
OUT_ARGES <Node> (72)
    on left: 10 11, on right: 9 11
INNER_ARGS <Node> (73)
    on left: 12 13, on right: 10 11 13 74 75
FUNC_BLOCK <Node> (74)
    on left: 14 15, on right: 7
EXPRASION <Node> (75)
    on left: 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
    34 35 36 37 38, on right: 14 15 17 21 22 23 24 25 26 27 28 29 30
    31 32 33 34 35 36 37 49 50 52 55 56 57
FUNC_ACTIVE <Node> (76)
    on left: 39 40, on right: 38 42 46
FUNC_ACTIVE_INNER_ARGES <Node> (77)
    on left: 41 42 43 44 45 46, on right: 40 44 45 46
STASTMENT_LIST <Node> (78)
    on left: 47 48, on right: 47 64 66
IF_STASTMENT <Node> (79)
    on left: 49 50, on right: 53
STASTMENT <Node> (80)
    on left: 51 52 53 54, on right: 47 48 49 50 56 57
RETURN_STATMENT <Node> (81)
    on left: 55, on right: 60 61
LOOP_STATMENT <Node> (82)
    on left: 56 57, on right: 54
UPDATES <Node> (83)
    on left: 58 59, on right: 57
COMPUND_STATMENT <Node> (84)
    on left: 60 61, on right: 51
COMPUND_STATMENT_PROC <Node> (85)
    on left: 62 63, on right: 6
INNER_COMPUND_STATMENT <Node> (86)
    on left: 64 65 66, on right: 15 60 63
DEC_INNER_BLOCK <Node> (87)
    on left: 67 68, on right: 65 66 67
NEW_DECLARE <Node> (88)
    on left: 69 70, on right: 67 68
VAR_DECLARE <Node> (89)
    on left: 71 72, on right: 69 72
VF <Node> (90)
    on left: 73, on right: 71 72
VFDEC <Node> (91)
    on left: 74 75, on right: 73 75
CONST <Node> (92)
    on left: 76 77 78, on right: 16 43 45
TYPE <String> (93)
    on left: 79 80 81 82 83 84 85 86 87 88, on right: 7 10 11 74 75


State 0

    0 $accept: . S $end

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    S              go to state 3
    FUNC_PROC_DEC  go to state 4
    DEF_A          go to state 5
    PROC_DEF       go to state 6
    FUNC_DEF       go to state 7


State 1

    7 FUNC_DEF: FUNC . ID ARGES RETURN TYPE FUNC_BLOCK

    ID  shift, and go to state 8


State 2

    6 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT_PROC

    ID  shift, and go to state 9


State 3

    0 $accept: S . $end

    $end  shift, and go to state 10


State 4

    1 S: FUNC_PROC_DEC .

    $default  reduce using rule 1 (S)


State 5

    2 FUNC_PROC_DEC: DEF_A .
    3              | DEF_A . FUNC_PROC_DEC

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    FUNC      [reduce using rule 2 (FUNC_PROC_DEC)]
    PROC      [reduce using rule 2 (FUNC_PROC_DEC)]
    $default  reduce using rule 2 (FUNC_PROC_DEC)

    FUNC_PROC_DEC  go to state 11
    DEF_A          go to state 5
    PROC_DEF       go to state 6
    FUNC_DEF       go to state 7


State 6

    5 DEF_A: PROC_DEF .

    $default  reduce using rule 5 (DEF_A)


State 7

    4 DEF_A: FUNC_DEF .

    $default  reduce using rule 4 (DEF_A)


State 8

    7 FUNC_DEF: FUNC ID . ARGES RETURN TYPE FUNC_BLOCK

    '('  shift, and go to state 12

    ARGES  go to state 13


State 9

    6 PROC_DEF: PROC ID . ARGES COMPUND_STATMENT_PROC

    '('  shift, and go to state 12

    ARGES  go to state 14


State 10

    0 $accept: S $end .

    $default  accept


State 11

    3 FUNC_PROC_DEC: DEF_A FUNC_PROC_DEC .

    $default  reduce using rule 3 (FUNC_PROC_DEC)


State 12

    8 ARGES: '(' . ')'
    9      | '(' . OUT_ARGES ')'

    ID   shift, and go to state 15
    ')'  shift, and go to state 16

    OUT_ARGES   go to state 17
    INNER_ARGS  go to state 18


State 13

    7 FUNC_DEF: FUNC ID ARGES . RETURN TYPE FUNC_BLOCK

    RETURN  shift, and go to state 19


State 14

    6 PROC_DEF: PROC ID ARGES . COMPUND_STATMENT_PROC

    '{'  shift, and go to state 20

    COMPUND_STATMENT_PROC  go to state 21


State 15

   12 INNER_ARGS: ID .
   13           | ID . ',' INNER_ARGS

    ','  shift, and go to state 22

    $default  reduce using rule 12 (INNER_ARGS)


State 16

    8 ARGES: '(' ')' .

    $default  reduce using rule 8 (ARGES)


State 17

    9 ARGES: '(' OUT_ARGES . ')'

    ')'  shift, and go to state 23


State 18

   10 OUT_ARGES: INNER_ARGS . ':' TYPE
   11          | INNER_ARGS . ':' TYPE ';' OUT_ARGES

    ':'  shift, and go to state 24


State 19

    7 FUNC_DEF: FUNC ID ARGES RETURN . TYPE FUNC_BLOCK

    CHAR          shift, and go to state 25
    REAL          shift, and go to state 26
    FLOAT         shift, and go to state 27
    INT           shift, and go to state 28
    BOOL          shift, and go to state 29
    STRING        shift, and go to state 30
    CHAR_POINER   shift, and go to state 31
    REAL_POINER   shift, and go to state 32
    FLOAT_POINER  shift, and go to state 33
    INT_POINER    shift, and go to state 34

    TYPE  go to state 35


State 20

   62 COMPUND_STATMENT_PROC: '{' . '}'
   63                      | '{' . INNER_COMPUND_STATMENT '}'

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    VAR      shift, and go to state 41
    FUNC     shift, and go to state 1
    PROC     shift, and go to state 2
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 51
    '}'      shift, and go to state 52

    FUNC_PROC_DEC           go to state 53
    DEF_A                   go to state 5
    PROC_DEF                go to state 6
    FUNC_DEF                go to state 7
    EXPRASION               go to state 54
    FUNC_ACTIVE             go to state 55
    STASTMENT_LIST          go to state 56
    IF_STASTMENT            go to state 57
    STASTMENT               go to state 58
    LOOP_STATMENT           go to state 59
    COMPUND_STATMENT        go to state 60
    INNER_COMPUND_STATMENT  go to state 61
    DEC_INNER_BLOCK         go to state 62
    NEW_DECLARE             go to state 63
    VAR_DECLARE             go to state 64
    VF                      go to state 65
    CONST                   go to state 66


State 21

    6 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC .

    $default  reduce using rule 6 (PROC_DEF)


State 22

   13 INNER_ARGS: ID ',' . INNER_ARGS

    ID  shift, and go to state 15

    INNER_ARGS  go to state 67


State 23

    9 ARGES: '(' OUT_ARGES ')' .

    $default  reduce using rule 9 (ARGES)


State 24

   10 OUT_ARGES: INNER_ARGS ':' . TYPE
   11          | INNER_ARGS ':' . TYPE ';' OUT_ARGES

    CHAR          shift, and go to state 25
    REAL          shift, and go to state 26
    FLOAT         shift, and go to state 27
    INT           shift, and go to state 28
    BOOL          shift, and go to state 29
    STRING        shift, and go to state 30
    CHAR_POINER   shift, and go to state 31
    REAL_POINER   shift, and go to state 32
    FLOAT_POINER  shift, and go to state 33
    INT_POINER    shift, and go to state 34

    TYPE  go to state 68


State 25

   84 TYPE: CHAR .

    $default  reduce using rule 84 (TYPE)


State 26

   83 TYPE: REAL .

    $default  reduce using rule 83 (TYPE)


State 27

   82 TYPE: FLOAT .

    $default  reduce using rule 82 (TYPE)


State 28

   81 TYPE: INT .

    $default  reduce using rule 81 (TYPE)


State 29

   80 TYPE: BOOL .

    $default  reduce using rule 80 (TYPE)


State 30

   79 TYPE: STRING . '[' INT_NUM ']'

    '['  shift, and go to state 69


State 31

   85 TYPE: CHAR_POINER .

    $default  reduce using rule 85 (TYPE)


State 32

   86 TYPE: REAL_POINER .

    $default  reduce using rule 86 (TYPE)


State 33

   87 TYPE: FLOAT_POINER .

    $default  reduce using rule 87 (TYPE)


State 34

   88 TYPE: INT_POINER .

    $default  reduce using rule 88 (TYPE)


State 35

    7 FUNC_DEF: FUNC ID ARGES RETURN TYPE . FUNC_BLOCK

    '{'  shift, and go to state 70

    FUNC_BLOCK  go to state 71


State 36

   49 IF_STASTMENT: IF . '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   50             | IF . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 72


State 37

   57 LOOP_STATMENT: FOR . '(' EXPRASION ';' EXPRASION ';' UPDATES ')' STASTMENT

    '('  shift, and go to state 73


State 38

   56 LOOP_STATMENT: WHILE . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 74


State 39

   18 EXPRASION: TRUE .

    $default  reduce using rule 18 (EXPRASION)


State 40

   19 EXPRASION: FALSE .

    $default  reduce using rule 19 (EXPRASION)


State 41

   73 VF: VAR . VFDEC

    ID  shift, and go to state 15

    INNER_ARGS  go to state 75
    VFDEC       go to state 76


State 42

   76 CONST: INT_NUM .

    $default  reduce using rule 76 (CONST)


State 43

   77 CONST: F_NUM .

    $default  reduce using rule 77 (CONST)


State 44

   78 CONST: HEX_NUM .

    $default  reduce using rule 78 (CONST)


State 45

   20 EXPRASION: ID .
   25          | ID . '=' EXPRASION
   39 FUNC_ACTIVE: ID . '(' ')'
   40            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 77
    '='  shift, and go to state 78

    $default  reduce using rule 20 (EXPRASION)


State 46

   23 EXPRASION: '-' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 79
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 47

   24 EXPRASION: '!' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 80
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 48

   21 EXPRASION: '^' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 81
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 49

   22 EXPRASION: '&' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 82
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 50

   17 EXPRASION: '(' . EXPRASION ')'

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 83
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 51

   60 COMPUND_STATMENT: '{' . INNER_COMPUND_STATMENT RETURN_STATMENT '}'
   61                 | '{' . RETURN_STATMENT '}'

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    RETURN   shift, and go to state 84
    VAR      shift, and go to state 41
    FUNC     shift, and go to state 1
    PROC     shift, and go to state 2
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 51

    FUNC_PROC_DEC           go to state 53
    DEF_A                   go to state 5
    PROC_DEF                go to state 6
    FUNC_DEF                go to state 7
    EXPRASION               go to state 54
    FUNC_ACTIVE             go to state 55
    STASTMENT_LIST          go to state 56
    IF_STASTMENT            go to state 57
    STASTMENT               go to state 58
    RETURN_STATMENT         go to state 85
    LOOP_STATMENT           go to state 59
    COMPUND_STATMENT        go to state 60
    INNER_COMPUND_STATMENT  go to state 86
    DEC_INNER_BLOCK         go to state 62
    NEW_DECLARE             go to state 63
    VAR_DECLARE             go to state 64
    VF                      go to state 65
    CONST                   go to state 66


State 52

   62 COMPUND_STATMENT_PROC: '{' '}' .

    $default  reduce using rule 62 (COMPUND_STATMENT_PROC)


State 53

   70 NEW_DECLARE: FUNC_PROC_DEC .

    $default  reduce using rule 70 (NEW_DECLARE)


State 54

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION
   52 STASTMENT: EXPRASION . ';'

    AND_OP  shift, and go to state 87
    GE_OP   shift, and go to state 88
    SE_OP   shift, and go to state 89
    NE_OP   shift, and go to state 90
    OR_OP   shift, and go to state 91
    EQL_OP  shift, and go to state 92
    ';'     shift, and go to state 93
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '>'     shift, and go to state 98
    '<'     shift, and go to state 99


State 55

   38 EXPRASION: FUNC_ACTIVE .

    $default  reduce using rule 38 (EXPRASION)


State 56

   47 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   64 INNER_COMPUND_STATMENT: STASTMENT_LIST .

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 51

    $default  reduce using rule 64 (INNER_COMPUND_STATMENT)

    EXPRASION         go to state 54
    FUNC_ACTIVE       go to state 55
    IF_STASTMENT      go to state 57
    STASTMENT         go to state 100
    LOOP_STATMENT     go to state 59
    COMPUND_STATMENT  go to state 60
    CONST             go to state 66


State 57

   53 STASTMENT: IF_STASTMENT .

    $default  reduce using rule 53 (STASTMENT)


State 58

   48 STASTMENT_LIST: STASTMENT .

    $default  reduce using rule 48 (STASTMENT_LIST)


State 59

   54 STASTMENT: LOOP_STATMENT .

    $default  reduce using rule 54 (STASTMENT)


State 60

   51 STASTMENT: COMPUND_STATMENT .

    $default  reduce using rule 51 (STASTMENT)


State 61

   63 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT . '}'

    '}'  shift, and go to state 101


State 62

   65 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK .
   66                       | DEC_INNER_BLOCK . STASTMENT_LIST

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 51

    $default  reduce using rule 65 (INNER_COMPUND_STATMENT)

    EXPRASION         go to state 54
    FUNC_ACTIVE       go to state 55
    STASTMENT_LIST    go to state 102
    IF_STASTMENT      go to state 57
    STASTMENT         go to state 58
    LOOP_STATMENT     go to state 59
    COMPUND_STATMENT  go to state 60
    CONST             go to state 66


State 63

   67 DEC_INNER_BLOCK: NEW_DECLARE . DEC_INNER_BLOCK
   68                | NEW_DECLARE .

    VAR   shift, and go to state 41
    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    $default  reduce using rule 68 (DEC_INNER_BLOCK)

    FUNC_PROC_DEC    go to state 53
    DEF_A            go to state 5
    PROC_DEF         go to state 6
    FUNC_DEF         go to state 7
    DEC_INNER_BLOCK  go to state 103
    NEW_DECLARE      go to state 63
    VAR_DECLARE      go to state 64
    VF               go to state 65


State 64

   69 NEW_DECLARE: VAR_DECLARE .
   72 VAR_DECLARE: VAR_DECLARE . VF

    VAR  shift, and go to state 41

    VAR       [reduce using rule 69 (NEW_DECLARE)]
    $default  reduce using rule 69 (NEW_DECLARE)

    VF  go to state 104


State 65

   71 VAR_DECLARE: VF .

    $default  reduce using rule 71 (VAR_DECLARE)


State 66

   16 EXPRASION: CONST .

    $default  reduce using rule 16 (EXPRASION)


State 67

   13 INNER_ARGS: ID ',' INNER_ARGS .

    $default  reduce using rule 13 (INNER_ARGS)


State 68

   10 OUT_ARGES: INNER_ARGS ':' TYPE .
   11          | INNER_ARGS ':' TYPE . ';' OUT_ARGES

    ';'  shift, and go to state 105

    $default  reduce using rule 10 (OUT_ARGES)


State 69

   79 TYPE: STRING '[' . INT_NUM ']'

    INT_NUM  shift, and go to state 106


State 70

   14 FUNC_BLOCK: '{' . RETURN EXPRASION ';' '}'
   15           | '{' . INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    RETURN   shift, and go to state 107
    VAR      shift, and go to state 41
    FUNC     shift, and go to state 1
    PROC     shift, and go to state 2
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 51

    FUNC_PROC_DEC           go to state 53
    DEF_A                   go to state 5
    PROC_DEF                go to state 6
    FUNC_DEF                go to state 7
    EXPRASION               go to state 54
    FUNC_ACTIVE             go to state 55
    STASTMENT_LIST          go to state 56
    IF_STASTMENT            go to state 57
    STASTMENT               go to state 58
    LOOP_STATMENT           go to state 59
    COMPUND_STATMENT        go to state 60
    INNER_COMPUND_STATMENT  go to state 108
    DEC_INNER_BLOCK         go to state 62
    NEW_DECLARE             go to state 63
    VAR_DECLARE             go to state 64
    VF                      go to state 65
    CONST                   go to state 66


State 71

    7 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK .

    $default  reduce using rule 7 (FUNC_DEF)


State 72

   49 IF_STASTMENT: IF '(' . EXPRASION ')' STASTMENT ELSE STASTMENT
   50             | IF '(' . EXPRASION ')' STASTMENT

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 109
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 73

   57 LOOP_STATMENT: FOR '(' . EXPRASION ';' EXPRASION ';' UPDATES ')' STASTMENT

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 110
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 74

   56 LOOP_STATMENT: WHILE '(' . EXPRASION ')' STASTMENT

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 111
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 75

   74 VFDEC: INNER_ARGS . ':' TYPE ';'
   75      | INNER_ARGS . ':' TYPE ';' VFDEC

    ':'  shift, and go to state 112


State 76

   73 VF: VAR VFDEC .

    $default  reduce using rule 73 (VF)


State 77

   39 FUNC_ACTIVE: ID '(' . ')'
   40            | ID '(' . FUNC_ACTIVE_INNER_ARGES ')'

    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 113
    ')'      shift, and go to state 114

    FUNC_ACTIVE              go to state 115
    FUNC_ACTIVE_INNER_ARGES  go to state 116
    CONST                    go to state 117


State 78

   25 EXPRASION: ID '=' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 118
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 79

   23 EXPRASION: '-' EXPRASION .
   26          | EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    NE_OP  shift, and go to state 90

    NE_OP     [reduce using rule 23 (EXPRASION)]
    $default  reduce using rule 23 (EXPRASION)


State 80

   24 EXPRASION: '!' EXPRASION .
   26          | EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    NE_OP  shift, and go to state 90

    NE_OP     [reduce using rule 24 (EXPRASION)]
    $default  reduce using rule 24 (EXPRASION)


State 81

   21 EXPRASION: '^' EXPRASION .
   26          | EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    NE_OP  shift, and go to state 90

    NE_OP     [reduce using rule 21 (EXPRASION)]
    $default  reduce using rule 21 (EXPRASION)


State 82

   22 EXPRASION: '&' EXPRASION .
   26          | EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    NE_OP  shift, and go to state 90

    NE_OP     [reduce using rule 22 (EXPRASION)]
    $default  reduce using rule 22 (EXPRASION)


State 83

   17 EXPRASION: '(' EXPRASION . ')'
   26          | EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    AND_OP  shift, and go to state 87
    GE_OP   shift, and go to state 88
    SE_OP   shift, and go to state 89
    NE_OP   shift, and go to state 90
    OR_OP   shift, and go to state 91
    EQL_OP  shift, and go to state 92
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '>'     shift, and go to state 98
    '<'     shift, and go to state 99
    ')'     shift, and go to state 119


State 84

   55 RETURN_STATMENT: RETURN . EXPRASION ';'

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 120
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 85

   61 COMPUND_STATMENT: '{' RETURN_STATMENT . '}'

    '}'  shift, and go to state 121


State 86

   60 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT . RETURN_STATMENT '}'

    RETURN  shift, and go to state 84

    RETURN_STATMENT  go to state 122


State 87

   27 EXPRASION: EXPRASION AND_OP . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 123
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 88

   34 EXPRASION: EXPRASION GE_OP . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 124
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 89

   35 EXPRASION: EXPRASION SE_OP . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 125
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 90

   26 EXPRASION: EXPRASION NE_OP . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 126
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 91

   28 EXPRASION: EXPRASION OR_OP . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 127
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 92

   33 EXPRASION: EXPRASION EQL_OP . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 128
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 93

   52 STASTMENT: EXPRASION ';' .

    $default  reduce using rule 52 (STASTMENT)


State 94

   29 EXPRASION: EXPRASION '+' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 129
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 95

   30 EXPRASION: EXPRASION '-' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 130
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 96

   32 EXPRASION: EXPRASION '*' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 131
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 97

   31 EXPRASION: EXPRASION '/' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 132
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 98

   36 EXPRASION: EXPRASION '>' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 133
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 99

   37 EXPRASION: EXPRASION '<' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 134
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 100

   47 STASTMENT_LIST: STASTMENT_LIST STASTMENT .

    $default  reduce using rule 47 (STASTMENT_LIST)


State 101

   63 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT '}' .

    $default  reduce using rule 63 (COMPUND_STATMENT_PROC)


State 102

   47 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   66 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK STASTMENT_LIST .

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 51

    $default  reduce using rule 66 (INNER_COMPUND_STATMENT)

    EXPRASION         go to state 54
    FUNC_ACTIVE       go to state 55
    IF_STASTMENT      go to state 57
    STASTMENT         go to state 100
    LOOP_STATMENT     go to state 59
    COMPUND_STATMENT  go to state 60
    CONST             go to state 66


State 103

   67 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK .

    $default  reduce using rule 67 (DEC_INNER_BLOCK)


State 104

   72 VAR_DECLARE: VAR_DECLARE VF .

    $default  reduce using rule 72 (VAR_DECLARE)


State 105

   11 OUT_ARGES: INNER_ARGS ':' TYPE ';' . OUT_ARGES

    ID  shift, and go to state 15

    OUT_ARGES   go to state 135
    INNER_ARGS  go to state 18


State 106

   79 TYPE: STRING '[' INT_NUM . ']'

    ']'  shift, and go to state 136


State 107

   14 FUNC_BLOCK: '{' RETURN . EXPRASION ';' '}'

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 137
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 108

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT . RETURN EXPRASION ';' '}'

    RETURN  shift, and go to state 138


State 109

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION
   49 IF_STASTMENT: IF '(' EXPRASION . ')' STASTMENT ELSE STASTMENT
   50             | IF '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 87
    GE_OP   shift, and go to state 88
    SE_OP   shift, and go to state 89
    NE_OP   shift, and go to state 90
    OR_OP   shift, and go to state 91
    EQL_OP  shift, and go to state 92
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '>'     shift, and go to state 98
    '<'     shift, and go to state 99
    ')'     shift, and go to state 139


State 110

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION
   57 LOOP_STATMENT: FOR '(' EXPRASION . ';' EXPRASION ';' UPDATES ')' STASTMENT

    AND_OP  shift, and go to state 87
    GE_OP   shift, and go to state 88
    SE_OP   shift, and go to state 89
    NE_OP   shift, and go to state 90
    OR_OP   shift, and go to state 91
    EQL_OP  shift, and go to state 92
    ';'     shift, and go to state 140
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '>'     shift, and go to state 98
    '<'     shift, and go to state 99


State 111

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION
   56 LOOP_STATMENT: WHILE '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 87
    GE_OP   shift, and go to state 88
    SE_OP   shift, and go to state 89
    NE_OP   shift, and go to state 90
    OR_OP   shift, and go to state 91
    EQL_OP  shift, and go to state 92
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '>'     shift, and go to state 98
    '<'     shift, and go to state 99
    ')'     shift, and go to state 141


State 112

   74 VFDEC: INNER_ARGS ':' . TYPE ';'
   75      | INNER_ARGS ':' . TYPE ';' VFDEC

    CHAR          shift, and go to state 25
    REAL          shift, and go to state 26
    FLOAT         shift, and go to state 27
    INT           shift, and go to state 28
    BOOL          shift, and go to state 29
    STRING        shift, and go to state 30
    CHAR_POINER   shift, and go to state 31
    REAL_POINER   shift, and go to state 32
    FLOAT_POINER  shift, and go to state 33
    INT_POINER    shift, and go to state 34

    TYPE  go to state 142


State 113

   39 FUNC_ACTIVE: ID . '(' ')'
   40            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'
   41 FUNC_ACTIVE_INNER_ARGES: ID .
   44                        | ID . ',' FUNC_ACTIVE_INNER_ARGES

    '('  shift, and go to state 77
    ','  shift, and go to state 143

    $default  reduce using rule 41 (FUNC_ACTIVE_INNER_ARGES)


State 114

   39 FUNC_ACTIVE: ID '(' ')' .

    $default  reduce using rule 39 (FUNC_ACTIVE)


State 115

   42 FUNC_ACTIVE_INNER_ARGES: FUNC_ACTIVE .
   46                        | FUNC_ACTIVE . ',' FUNC_ACTIVE_INNER_ARGES

    ','  shift, and go to state 144

    $default  reduce using rule 42 (FUNC_ACTIVE_INNER_ARGES)


State 116

   40 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES . ')'

    ')'  shift, and go to state 145


State 117

   43 FUNC_ACTIVE_INNER_ARGES: CONST .
   45                        | CONST . ',' FUNC_ACTIVE_INNER_ARGES

    ','  shift, and go to state 146

    $default  reduce using rule 43 (FUNC_ACTIVE_INNER_ARGES)


State 118

   25 EXPRASION: ID '=' EXPRASION .
   26          | EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    AND_OP  shift, and go to state 87
    GE_OP   shift, and go to state 88
    SE_OP   shift, and go to state 89
    NE_OP   shift, and go to state 90
    OR_OP   shift, and go to state 91
    EQL_OP  shift, and go to state 92
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '>'     shift, and go to state 98
    '<'     shift, and go to state 99

    AND_OP    [reduce using rule 25 (EXPRASION)]
    GE_OP     [reduce using rule 25 (EXPRASION)]
    SE_OP     [reduce using rule 25 (EXPRASION)]
    NE_OP     [reduce using rule 25 (EXPRASION)]
    OR_OP     [reduce using rule 25 (EXPRASION)]
    EQL_OP    [reduce using rule 25 (EXPRASION)]
    '+'       [reduce using rule 25 (EXPRASION)]
    '-'       [reduce using rule 25 (EXPRASION)]
    '*'       [reduce using rule 25 (EXPRASION)]
    '/'       [reduce using rule 25 (EXPRASION)]
    '>'       [reduce using rule 25 (EXPRASION)]
    '<'       [reduce using rule 25 (EXPRASION)]
    $default  reduce using rule 25 (EXPRASION)


State 119

   17 EXPRASION: '(' EXPRASION ')' .

    $default  reduce using rule 17 (EXPRASION)


State 120

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION
   55 RETURN_STATMENT: RETURN EXPRASION . ';'

    AND_OP  shift, and go to state 87
    GE_OP   shift, and go to state 88
    SE_OP   shift, and go to state 89
    NE_OP   shift, and go to state 90
    OR_OP   shift, and go to state 91
    EQL_OP  shift, and go to state 92
    ';'     shift, and go to state 147
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '>'     shift, and go to state 98
    '<'     shift, and go to state 99


State 121

   61 COMPUND_STATMENT: '{' RETURN_STATMENT '}' .

    $default  reduce using rule 61 (COMPUND_STATMENT)


State 122

   60 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT RETURN_STATMENT . '}'

    '}'  shift, and go to state 148


State 123

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   27          | EXPRASION AND_OP EXPRASION .
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    NE_OP  shift, and go to state 90

    AND_OP  error (nonassociative)
    GE_OP   error (nonassociative)
    SE_OP   error (nonassociative)
    OR_OP   error (nonassociative)
    EQL_OP  error (nonassociative)
    '>'     error (nonassociative)
    '<'     error (nonassociative)

    NE_OP     [reduce using rule 27 (EXPRASION)]
    $default  reduce using rule 27 (EXPRASION)


State 124

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   34          | EXPRASION GE_OP EXPRASION .
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    NE_OP  shift, and go to state 90

    AND_OP  error (nonassociative)
    GE_OP   error (nonassociative)
    SE_OP   error (nonassociative)
    OR_OP   error (nonassociative)
    EQL_OP  error (nonassociative)
    '>'     error (nonassociative)
    '<'     error (nonassociative)

    NE_OP     [reduce using rule 34 (EXPRASION)]
    $default  reduce using rule 34 (EXPRASION)


State 125

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   35          | EXPRASION SE_OP EXPRASION .
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    NE_OP  shift, and go to state 90

    AND_OP  error (nonassociative)
    GE_OP   error (nonassociative)
    SE_OP   error (nonassociative)
    OR_OP   error (nonassociative)
    EQL_OP  error (nonassociative)
    '>'     error (nonassociative)
    '<'     error (nonassociative)

    NE_OP     [reduce using rule 35 (EXPRASION)]
    $default  reduce using rule 35 (EXPRASION)


State 126

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   26          | EXPRASION NE_OP EXPRASION .
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    AND_OP  shift, and go to state 87
    GE_OP   shift, and go to state 88
    SE_OP   shift, and go to state 89
    NE_OP   shift, and go to state 90
    OR_OP   shift, and go to state 91
    EQL_OP  shift, and go to state 92
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '>'     shift, and go to state 98
    '<'     shift, and go to state 99

    AND_OP    [reduce using rule 26 (EXPRASION)]
    GE_OP     [reduce using rule 26 (EXPRASION)]
    SE_OP     [reduce using rule 26 (EXPRASION)]
    NE_OP     [reduce using rule 26 (EXPRASION)]
    OR_OP     [reduce using rule 26 (EXPRASION)]
    EQL_OP    [reduce using rule 26 (EXPRASION)]
    '+'       [reduce using rule 26 (EXPRASION)]
    '-'       [reduce using rule 26 (EXPRASION)]
    '*'       [reduce using rule 26 (EXPRASION)]
    '/'       [reduce using rule 26 (EXPRASION)]
    '>'       [reduce using rule 26 (EXPRASION)]
    '<'       [reduce using rule 26 (EXPRASION)]
    $default  reduce using rule 26 (EXPRASION)


State 127

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   28          | EXPRASION OR_OP EXPRASION .
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    NE_OP  shift, and go to state 90

    AND_OP  error (nonassociative)
    GE_OP   error (nonassociative)
    SE_OP   error (nonassociative)
    OR_OP   error (nonassociative)
    EQL_OP  error (nonassociative)
    '>'     error (nonassociative)
    '<'     error (nonassociative)

    NE_OP     [reduce using rule 28 (EXPRASION)]
    $default  reduce using rule 28 (EXPRASION)


State 128

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   33          | EXPRASION EQL_OP EXPRASION .
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    NE_OP  shift, and go to state 90

    AND_OP  error (nonassociative)
    GE_OP   error (nonassociative)
    SE_OP   error (nonassociative)
    OR_OP   error (nonassociative)
    EQL_OP  error (nonassociative)
    '>'     error (nonassociative)
    '<'     error (nonassociative)

    NE_OP     [reduce using rule 33 (EXPRASION)]
    $default  reduce using rule 33 (EXPRASION)


State 129

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   29          | EXPRASION '+' EXPRASION .
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    AND_OP  shift, and go to state 87
    GE_OP   shift, and go to state 88
    SE_OP   shift, and go to state 89
    NE_OP   shift, and go to state 90
    OR_OP   shift, and go to state 91
    EQL_OP  shift, and go to state 92
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '>'     shift, and go to state 98
    '<'     shift, and go to state 99

    NE_OP     [reduce using rule 29 (EXPRASION)]
    $default  reduce using rule 29 (EXPRASION)


State 130

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   30          | EXPRASION '-' EXPRASION .
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    AND_OP  shift, and go to state 87
    GE_OP   shift, and go to state 88
    SE_OP   shift, and go to state 89
    NE_OP   shift, and go to state 90
    OR_OP   shift, and go to state 91
    EQL_OP  shift, and go to state 92
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '>'     shift, and go to state 98
    '<'     shift, and go to state 99

    NE_OP     [reduce using rule 30 (EXPRASION)]
    $default  reduce using rule 30 (EXPRASION)


State 131

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   32          | EXPRASION '*' EXPRASION .
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    AND_OP  shift, and go to state 87
    GE_OP   shift, and go to state 88
    SE_OP   shift, and go to state 89
    NE_OP   shift, and go to state 90
    OR_OP   shift, and go to state 91
    EQL_OP  shift, and go to state 92
    '>'     shift, and go to state 98
    '<'     shift, and go to state 99

    NE_OP     [reduce using rule 32 (EXPRASION)]
    $default  reduce using rule 32 (EXPRASION)


State 132

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   31          | EXPRASION '/' EXPRASION .
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    AND_OP  shift, and go to state 87
    GE_OP   shift, and go to state 88
    SE_OP   shift, and go to state 89
    NE_OP   shift, and go to state 90
    OR_OP   shift, and go to state 91
    EQL_OP  shift, and go to state 92
    '>'     shift, and go to state 98
    '<'     shift, and go to state 99

    NE_OP     [reduce using rule 31 (EXPRASION)]
    $default  reduce using rule 31 (EXPRASION)


State 133

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   36          | EXPRASION '>' EXPRASION .
   37          | EXPRASION . '<' EXPRASION

    NE_OP  shift, and go to state 90

    AND_OP  error (nonassociative)
    GE_OP   error (nonassociative)
    SE_OP   error (nonassociative)
    OR_OP   error (nonassociative)
    EQL_OP  error (nonassociative)
    '>'     error (nonassociative)
    '<'     error (nonassociative)

    NE_OP     [reduce using rule 36 (EXPRASION)]
    $default  reduce using rule 36 (EXPRASION)


State 134

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION
   37          | EXPRASION '<' EXPRASION .

    NE_OP  shift, and go to state 90

    AND_OP  error (nonassociative)
    GE_OP   error (nonassociative)
    SE_OP   error (nonassociative)
    OR_OP   error (nonassociative)
    EQL_OP  error (nonassociative)
    '>'     error (nonassociative)
    '<'     error (nonassociative)

    NE_OP     [reduce using rule 37 (EXPRASION)]
    $default  reduce using rule 37 (EXPRASION)


State 135

   11 OUT_ARGES: INNER_ARGS ':' TYPE ';' OUT_ARGES .

    $default  reduce using rule 11 (OUT_ARGES)


State 136

   79 TYPE: STRING '[' INT_NUM ']' .

    $default  reduce using rule 79 (TYPE)


State 137

   14 FUNC_BLOCK: '{' RETURN EXPRASION . ';' '}'
   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    AND_OP  shift, and go to state 87
    GE_OP   shift, and go to state 88
    SE_OP   shift, and go to state 89
    NE_OP   shift, and go to state 90
    OR_OP   shift, and go to state 91
    EQL_OP  shift, and go to state 92
    ';'     shift, and go to state 149
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '>'     shift, and go to state 98
    '<'     shift, and go to state 99


State 138

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN . EXPRASION ';' '}'

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 150
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 139

   49 IF_STASTMENT: IF '(' EXPRASION ')' . STASTMENT ELSE STASTMENT
   50             | IF '(' EXPRASION ')' . STASTMENT

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 51

    EXPRASION         go to state 54
    FUNC_ACTIVE       go to state 55
    IF_STASTMENT      go to state 57
    STASTMENT         go to state 151
    LOOP_STATMENT     go to state 59
    COMPUND_STATMENT  go to state 60
    CONST             go to state 66


State 140

   57 LOOP_STATMENT: FOR '(' EXPRASION ';' . EXPRASION ';' UPDATES ')' STASTMENT

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 152
    FUNC_ACTIVE  go to state 55
    CONST        go to state 66


State 141

   56 LOOP_STATMENT: WHILE '(' EXPRASION ')' . STASTMENT

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 51

    EXPRASION         go to state 54
    FUNC_ACTIVE       go to state 55
    IF_STASTMENT      go to state 57
    STASTMENT         go to state 153
    LOOP_STATMENT     go to state 59
    COMPUND_STATMENT  go to state 60
    CONST             go to state 66


State 142

   74 VFDEC: INNER_ARGS ':' TYPE . ';'
   75      | INNER_ARGS ':' TYPE . ';' VFDEC

    ';'  shift, and go to state 154


State 143

   44 FUNC_ACTIVE_INNER_ARGES: ID ',' . FUNC_ACTIVE_INNER_ARGES

    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 113

    FUNC_ACTIVE              go to state 115
    FUNC_ACTIVE_INNER_ARGES  go to state 155
    CONST                    go to state 117


State 144

   46 FUNC_ACTIVE_INNER_ARGES: FUNC_ACTIVE ',' . FUNC_ACTIVE_INNER_ARGES

    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 113

    FUNC_ACTIVE              go to state 115
    FUNC_ACTIVE_INNER_ARGES  go to state 156
    CONST                    go to state 117


State 145

   40 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES ')' .

    $default  reduce using rule 40 (FUNC_ACTIVE)


State 146

   45 FUNC_ACTIVE_INNER_ARGES: CONST ',' . FUNC_ACTIVE_INNER_ARGES

    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 113

    FUNC_ACTIVE              go to state 115
    FUNC_ACTIVE_INNER_ARGES  go to state 157
    CONST                    go to state 117


State 147

   55 RETURN_STATMENT: RETURN EXPRASION ';' .

    $default  reduce using rule 55 (RETURN_STATMENT)


State 148

   60 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT RETURN_STATMENT '}' .

    $default  reduce using rule 60 (COMPUND_STATMENT)


State 149

   14 FUNC_BLOCK: '{' RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 158


State 150

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION . ';' '}'
   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION

    AND_OP  shift, and go to state 87
    GE_OP   shift, and go to state 88
    SE_OP   shift, and go to state 89
    NE_OP   shift, and go to state 90
    OR_OP   shift, and go to state 91
    EQL_OP  shift, and go to state 92
    ';'     shift, and go to state 159
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '>'     shift, and go to state 98
    '<'     shift, and go to state 99


State 151

   49 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT . ELSE STASTMENT
   50             | IF '(' EXPRASION ')' STASTMENT .

    ELSE  shift, and go to state 160

    $default  reduce using rule 50 (IF_STASTMENT)


State 152

   26 EXPRASION: EXPRASION . NE_OP EXPRASION
   27          | EXPRASION . AND_OP EXPRASION
   28          | EXPRASION . OR_OP EXPRASION
   29          | EXPRASION . '+' EXPRASION
   30          | EXPRASION . '-' EXPRASION
   31          | EXPRASION . '/' EXPRASION
   32          | EXPRASION . '*' EXPRASION
   33          | EXPRASION . EQL_OP EXPRASION
   34          | EXPRASION . GE_OP EXPRASION
   35          | EXPRASION . SE_OP EXPRASION
   36          | EXPRASION . '>' EXPRASION
   37          | EXPRASION . '<' EXPRASION
   57 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION . ';' UPDATES ')' STASTMENT

    AND_OP  shift, and go to state 87
    GE_OP   shift, and go to state 88
    SE_OP   shift, and go to state 89
    NE_OP   shift, and go to state 90
    OR_OP   shift, and go to state 91
    EQL_OP  shift, and go to state 92
    ';'     shift, and go to state 161
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '>'     shift, and go to state 98
    '<'     shift, and go to state 99


State 153

   56 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT .

    $default  reduce using rule 56 (LOOP_STATMENT)


State 154

   74 VFDEC: INNER_ARGS ':' TYPE ';' .
   75      | INNER_ARGS ':' TYPE ';' . VFDEC

    ID  shift, and go to state 15

    ID        [reduce using rule 74 (VFDEC)]
    $default  reduce using rule 74 (VFDEC)

    INNER_ARGS  go to state 75
    VFDEC       go to state 162


State 155

   44 FUNC_ACTIVE_INNER_ARGES: ID ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 44 (FUNC_ACTIVE_INNER_ARGES)


State 156

   46 FUNC_ACTIVE_INNER_ARGES: FUNC_ACTIVE ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 46 (FUNC_ACTIVE_INNER_ARGES)


State 157

   45 FUNC_ACTIVE_INNER_ARGES: CONST ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 45 (FUNC_ACTIVE_INNER_ARGES)


State 158

   14 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}' .

    $default  reduce using rule 14 (FUNC_BLOCK)


State 159

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 163


State 160

   49 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE . STASTMENT

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 51

    EXPRASION         go to state 54
    FUNC_ACTIVE       go to state 55
    IF_STASTMENT      go to state 57
    STASTMENT         go to state 164
    LOOP_STATMENT     go to state 59
    COMPUND_STATMENT  go to state 60
    CONST             go to state 66


State 161

   57 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' . UPDATES ')' STASTMENT

    ID  shift, and go to state 165

    UPDATES  go to state 166


State 162

   75 VFDEC: INNER_ARGS ':' TYPE ';' VFDEC .

    $default  reduce using rule 75 (VFDEC)


State 163

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}' .

    $default  reduce using rule 15 (FUNC_BLOCK)


State 164

   49 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT .

    $default  reduce using rule 49 (IF_STASTMENT)


State 165

   58 UPDATES: ID . '+' '+'
   59        | ID . '-' '-'

    '+'  shift, and go to state 167
    '-'  shift, and go to state 168


State 166

   57 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' UPDATES . ')' STASTMENT

    ')'  shift, and go to state 169


State 167

   58 UPDATES: ID '+' . '+'

    '+'  shift, and go to state 170


State 168

   59 UPDATES: ID '-' . '-'

    '-'  shift, and go to state 171


State 169

   57 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' UPDATES ')' . STASTMENT

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 51

    EXPRASION         go to state 54
    FUNC_ACTIVE       go to state 55
    IF_STASTMENT      go to state 57
    STASTMENT         go to state 172
    LOOP_STATMENT     go to state 59
    COMPUND_STATMENT  go to state 60
    CONST             go to state 66


State 170

   58 UPDATES: ID '+' '+' .

    $default  reduce using rule 58 (UPDATES)


State 171

   59 UPDATES: ID '-' '-' .

    $default  reduce using rule 59 (UPDATES)


State 172

   57 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' UPDATES ')' STASTMENT .

    $default  reduce using rule 57 (LOOP_STATMENT)
