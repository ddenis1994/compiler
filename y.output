Nonterminals useless in grammar

   RETURN_STATMENT
   COMPUND_STATMENT


Terminals unused in grammar

   ADDR_ID


Rules useless in grammar

   92 RETURN_STATMENT: RETURN EXPRASION ';'

   93 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT RETURN_STATMENT '}'
   94                 | '{' RETURN_STATMENT '}'


State 125 conflicts: 12 shift/reduce


Grammar

    0 $accept: S $end

    1 S: FUNC_PROC_DEC

    2 FUNC_PROC_DEC: DEF_A
    3              | FUNC_PROC_DEC DEF_A

    4 DEF_A: FUNC_DEF
    5      | PROC_DEF

    6 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC

    7 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK

    8 ARGES: '(' ')'
    9      | '(' OUT_ARGES ')'

   10 OUT_ARGES: INNER_ARGS ':' TYPE
   11          | INNER_ARGS ':' TYPE ';' OUT_ARGES

   12 INNER_ARGS: ID
   13           | ID ',' INNER_ARGS

   14 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}'
   15           | '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

   16 EXPRASION: CONST
   17          | '(' EXPRASION ')'
   18          | ID
   19          | '^' VALUE
   20          | '&' VALUE
   21          | '-' VALUE
   22          | '!' VALUE
   23          | ID '[' EXPRASION ']' '=' VALUE
   24          | ID '[' EXPRASION ']'
   25          | ID '=' EXPRASION
   26          | EXPRASION NE_OP VALUE
   27          | EXPRASION AND_OP VALUE
   28          | EXPRASION OR_OP VALUE
   29          | EXPRASION '+' VALUE
   30          | EXPRASION '-' VALUE
   31          | EXPRASION '/' VALUE
   32          | EXPRASION '*' VALUE
   33          | EXPRASION EQL_OP VALUE
   34          | EXPRASION GE_OP VALUE
   35          | EXPRASION SE_OP VALUE
   36          | EXPRASION '>' VALUE
   37          | EXPRASION '<' VALUE
   38          | FUNC_ACTIVE
   39          | '|' EXPRASION '|'

   40 VALUE: ID '[' EXPRASION ']'
   41      | CONST
   42      | '(' EXPRASION ')'
   43      | TRUE
   44      | FALSE
   45      | ID
   46      | FUNC_ACTIVE
   47      | '|' VALUE '|'
   48      | '^' VALUE
   49      | '&' VALUE
   50      | '-' VALUE
   51      | '!' VALUE

   52 FUNC_ACTIVE: ID '(' ')'
   53            | ID '(' FUNC_ACTIVE_INNER_ARGES ')'

   54 FUNC_ACTIVE_INNER_ARGES: EXPRASION
   55                        | EXPRASION ',' FUNC_ACTIVE_INNER_ARGES

   56 STASTMENT_LIST: STASTMENT_LIST STASTMENT
   57               | STASTMENT

   58 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   59             | IF '(' EXPRASION ')' STASTMENT

   60 STASTMENT: COMPUND_STATMENT_PROC
   61          | EXPRASION ';'
   62          | IF_STASTMENT
   63          | LOOP_STATMENT

   64 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT
   65              | FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

   66 COMPUND_STATMENT_PROC: '{' '}'
   67                      | '{' INNER_COMPUND_STATMENT '}'

   68 INNER_COMPUND_STATMENT: STASTMENT_LIST
   69                       | DEC_INNER_BLOCK
   70                       | DEC_INNER_BLOCK STASTMENT_LIST

   71 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK
   72                | NEW_DECLARE

   73 NEW_DECLARE: VF
   74            | DEF_A

   75 VF: VAR VFDEC

   76 VFDEC: INNER_ARGS ':' TYPE ';'

   77 CONST: INT_NUM
   78      | R_NUM
   79      | HEX_NUM
   80      | NULLA
   81      | CHAR_VALUE
   82      | STRING_VALUE
   83      | BOOL_VAL

   84 TYPE: STRING '[' INT_NUM ']'
   85     | BOOL
   86     | INT
   87     | REAL
   88     | CHAR
   89     | CHAR_POINTER
   90     | REAL_POINTER
   91     | INT_POINTER


Terminals, with rules where they appear

$end (0) 0
'!' (33) 22 51
'&' (38) 20 49
'(' (40) 8 9 17 42 52 53 58 59 64 65
')' (41) 8 9 17 42 52 53 58 59 64 65
'*' (42) 32
'+' (43) 29
',' (44) 13 55
'-' (45) 21 30 50
'/' (47) 31
':' (58) 10 11 76
';' (59) 11 14 15 61 65 76
'<' (60) 37
'=' (61) 23 25
'>' (62) 36
'[' (91) 23 24 40 84
']' (93) 23 24 40 84
'^' (94) 19 48
'{' (123) 14 15 66 67
'|' (124) 39 47
'}' (125) 14 15 66 67
error (256)
CHAR <String> (258) 88
REAL <String> (259) 87
INT <String> (260) 86
BOOL <String> (261) 85
STRING <String> (262) 84
CHAR_POINTER <String> (263) 89
REAL_POINTER <String> (264) 90
INT_POINTER <String> (265) 91
NULLA <String> (266) 80
ELSE (267) 58
IF (268) 58 59
FOR (269) 65
WHILE (270) 64
TRUE (271) 43
FALSE (272) 44
RETURN (273) 7 14 15
VAR <String> (274) 75
FUNC <String> (275) 7
PROC <String> (276) 6
ADDR_ID <String> (277)
AND_OP (278) 27
GE_OP (279) 34
SE_OP (280) 35
NE_OP (281) 26
OR_OP (282) 28
EQL_OP (283) 33
CHAR_VALUE <String> (284) 81
STRING_VALUE <String> (285) 82
INT_NUM <String> (286) 77 84
R_NUM <String> (287) 78
HEX_NUM <String> (288) 79
ID <String> (289) 6 7 12 13 18 23 24 25 40 45 52 53
BOOL_VAL <String> (290) 83
IFX (291)
UMINUS (292)


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
S <Node> (59)
    on left: 1, on right: 0
FUNC_PROC_DEC <Node> (60)
    on left: 2 3, on right: 1 3
DEF_A <Node> (61)
    on left: 4 5, on right: 2 3 74
PROC_DEF <Node> (62)
    on left: 6, on right: 5
FUNC_DEF <Node> (63)
    on left: 7, on right: 4
ARGES <Node> (64)
    on left: 8 9, on right: 6 7
OUT_ARGES <Node> (65)
    on left: 10 11, on right: 9 11
INNER_ARGS <Node> (66)
    on left: 12 13, on right: 10 11 13 76
FUNC_BLOCK <Node> (67)
    on left: 14 15, on right: 7
EXPRASION <Node> (68)
    on left: 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
    34 35 36 37 38 39, on right: 14 15 17 23 24 25 26 27 28 29 30 31
    32 33 34 35 36 37 39 40 42 54 55 58 59 61 64 65
VALUE <Node> (69)
    on left: 40 41 42 43 44 45 46 47 48 49 50 51, on right: 19 20 21
    22 23 26 27 28 29 30 31 32 33 34 35 36 37 47 48 49 50 51
FUNC_ACTIVE <Node> (70)
    on left: 52 53, on right: 38 46
FUNC_ACTIVE_INNER_ARGES <Node> (71)
    on left: 54 55, on right: 53 55
STASTMENT_LIST <Node> (72)
    on left: 56 57, on right: 56 68 70
IF_STASTMENT <Node> (73)
    on left: 58 59, on right: 62
STASTMENT <Node> (74)
    on left: 60 61 62 63, on right: 56 57 58 59 64 65
LOOP_STATMENT <Node> (75)
    on left: 64 65, on right: 63
COMPUND_STATMENT_PROC <Node> (76)
    on left: 66 67, on right: 6 60
INNER_COMPUND_STATMENT <Node> (77)
    on left: 68 69 70, on right: 15 67
DEC_INNER_BLOCK <Node> (78)
    on left: 71 72, on right: 69 70 71
NEW_DECLARE <Node> (79)
    on left: 73 74, on right: 71 72
VF <Node> (80)
    on left: 75, on right: 73
VFDEC <Node> (81)
    on left: 76, on right: 75
CONST <Node> (82)
    on left: 77 78 79 80 81 82 83, on right: 16 41
TYPE <String> (83)
    on left: 84 85 86 87 88 89 90 91, on right: 7 10 11 76


State 0

    0 $accept: . S $end

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    S              go to state 3
    FUNC_PROC_DEC  go to state 4
    DEF_A          go to state 5
    PROC_DEF       go to state 6
    FUNC_DEF       go to state 7


State 1

    7 FUNC_DEF: FUNC . ID ARGES RETURN TYPE FUNC_BLOCK

    ID  shift, and go to state 8


State 2

    6 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT_PROC

    ID  shift, and go to state 9


State 3

    0 $accept: S . $end

    $end  shift, and go to state 10


State 4

    1 S: FUNC_PROC_DEC .
    3 FUNC_PROC_DEC: FUNC_PROC_DEC . DEF_A

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    $default  reduce using rule 1 (S)

    DEF_A     go to state 11
    PROC_DEF  go to state 6
    FUNC_DEF  go to state 7


State 5

    2 FUNC_PROC_DEC: DEF_A .

    $default  reduce using rule 2 (FUNC_PROC_DEC)


State 6

    5 DEF_A: PROC_DEF .

    $default  reduce using rule 5 (DEF_A)


State 7

    4 DEF_A: FUNC_DEF .

    $default  reduce using rule 4 (DEF_A)


State 8

    7 FUNC_DEF: FUNC ID . ARGES RETURN TYPE FUNC_BLOCK

    '('  shift, and go to state 12

    ARGES  go to state 13


State 9

    6 PROC_DEF: PROC ID . ARGES COMPUND_STATMENT_PROC

    '('  shift, and go to state 12

    ARGES  go to state 14


State 10

    0 $accept: S $end .

    $default  accept


State 11

    3 FUNC_PROC_DEC: FUNC_PROC_DEC DEF_A .

    $default  reduce using rule 3 (FUNC_PROC_DEC)


State 12

    8 ARGES: '(' . ')'
    9      | '(' . OUT_ARGES ')'

    ID   shift, and go to state 15
    ')'  shift, and go to state 16

    OUT_ARGES   go to state 17
    INNER_ARGS  go to state 18


State 13

    7 FUNC_DEF: FUNC ID ARGES . RETURN TYPE FUNC_BLOCK

    RETURN  shift, and go to state 19


State 14

    6 PROC_DEF: PROC ID ARGES . COMPUND_STATMENT_PROC

    '{'  shift, and go to state 20

    COMPUND_STATMENT_PROC  go to state 21


State 15

   12 INNER_ARGS: ID .
   13           | ID . ',' INNER_ARGS

    ','  shift, and go to state 22

    $default  reduce using rule 12 (INNER_ARGS)


State 16

    8 ARGES: '(' ')' .

    $default  reduce using rule 8 (ARGES)


State 17

    9 ARGES: '(' OUT_ARGES . ')'

    ')'  shift, and go to state 23


State 18

   10 OUT_ARGES: INNER_ARGS . ':' TYPE
   11          | INNER_ARGS . ':' TYPE ';' OUT_ARGES

    ':'  shift, and go to state 24


State 19

    7 FUNC_DEF: FUNC ID ARGES RETURN . TYPE FUNC_BLOCK

    CHAR          shift, and go to state 25
    REAL          shift, and go to state 26
    INT           shift, and go to state 27
    BOOL          shift, and go to state 28
    STRING        shift, and go to state 29
    CHAR_POINTER  shift, and go to state 30
    REAL_POINTER  shift, and go to state 31
    INT_POINTER   shift, and go to state 32

    TYPE  go to state 33


State 20

   66 COMPUND_STATMENT_PROC: '{' . '}'
   67                      | '{' . INNER_COMPUND_STATMENT '}'

    NULLA         shift, and go to state 34
    IF            shift, and go to state 35
    FOR           shift, and go to state 36
    WHILE         shift, and go to state 37
    VAR           shift, and go to state 38
    FUNC          shift, and go to state 1
    PROC          shift, and go to state 2
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '{'           shift, and go to state 20
    '}'           shift, and go to state 51
    '|'           shift, and go to state 52

    DEF_A                   go to state 53
    PROC_DEF                go to state 6
    FUNC_DEF                go to state 7
    EXPRASION               go to state 54
    FUNC_ACTIVE             go to state 55
    STASTMENT_LIST          go to state 56
    IF_STASTMENT            go to state 57
    STASTMENT               go to state 58
    LOOP_STATMENT           go to state 59
    COMPUND_STATMENT_PROC   go to state 60
    INNER_COMPUND_STATMENT  go to state 61
    DEC_INNER_BLOCK         go to state 62
    NEW_DECLARE             go to state 63
    VF                      go to state 64
    CONST                   go to state 65


State 21

    6 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC .

    $default  reduce using rule 6 (PROC_DEF)


State 22

   13 INNER_ARGS: ID ',' . INNER_ARGS

    ID  shift, and go to state 15

    INNER_ARGS  go to state 66


State 23

    9 ARGES: '(' OUT_ARGES ')' .

    $default  reduce using rule 9 (ARGES)


State 24

   10 OUT_ARGES: INNER_ARGS ':' . TYPE
   11          | INNER_ARGS ':' . TYPE ';' OUT_ARGES

    CHAR          shift, and go to state 25
    REAL          shift, and go to state 26
    INT           shift, and go to state 27
    BOOL          shift, and go to state 28
    STRING        shift, and go to state 29
    CHAR_POINTER  shift, and go to state 30
    REAL_POINTER  shift, and go to state 31
    INT_POINTER   shift, and go to state 32

    TYPE  go to state 67


State 25

   88 TYPE: CHAR .

    $default  reduce using rule 88 (TYPE)


State 26

   87 TYPE: REAL .

    $default  reduce using rule 87 (TYPE)


State 27

   86 TYPE: INT .

    $default  reduce using rule 86 (TYPE)


State 28

   85 TYPE: BOOL .

    $default  reduce using rule 85 (TYPE)


State 29

   84 TYPE: STRING . '[' INT_NUM ']'

    '['  shift, and go to state 68


State 30

   89 TYPE: CHAR_POINTER .

    $default  reduce using rule 89 (TYPE)


State 31

   90 TYPE: REAL_POINTER .

    $default  reduce using rule 90 (TYPE)


State 32

   91 TYPE: INT_POINTER .

    $default  reduce using rule 91 (TYPE)


State 33

    7 FUNC_DEF: FUNC ID ARGES RETURN TYPE . FUNC_BLOCK

    '{'  shift, and go to state 69

    FUNC_BLOCK  go to state 70


State 34

   80 CONST: NULLA .

    $default  reduce using rule 80 (CONST)


State 35

   58 IF_STASTMENT: IF . '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   59             | IF . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 71


State 36

   65 LOOP_STATMENT: FOR . '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    '('  shift, and go to state 72


State 37

   64 LOOP_STATMENT: WHILE . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 73


State 38

   75 VF: VAR . VFDEC

    ID  shift, and go to state 15

    INNER_ARGS  go to state 74
    VFDEC       go to state 75


State 39

   81 CONST: CHAR_VALUE .

    $default  reduce using rule 81 (CONST)


State 40

   82 CONST: STRING_VALUE .

    $default  reduce using rule 82 (CONST)


State 41

   77 CONST: INT_NUM .

    $default  reduce using rule 77 (CONST)


State 42

   78 CONST: R_NUM .

    $default  reduce using rule 78 (CONST)


State 43

   79 CONST: HEX_NUM .

    $default  reduce using rule 79 (CONST)


State 44

   18 EXPRASION: ID .
   23          | ID . '[' EXPRASION ']' '=' VALUE
   24          | ID . '[' EXPRASION ']'
   25          | ID . '=' EXPRASION
   52 FUNC_ACTIVE: ID . '(' ')'
   53            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 76
    '['  shift, and go to state 77
    '='  shift, and go to state 78

    $default  reduce using rule 18 (EXPRASION)


State 45

   83 CONST: BOOL_VAL .

    $default  reduce using rule 83 (CONST)


State 46

   22 EXPRASION: '!' . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 88
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 47

   19 EXPRASION: '^' . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 91
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 48

   20 EXPRASION: '&' . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 92
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 49

   21 EXPRASION: '-' . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 93
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 50

   17 EXPRASION: '(' . EXPRASION ')'

    NULLA         shift, and go to state 34
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '|'           shift, and go to state 52

    EXPRASION    go to state 94
    FUNC_ACTIVE  go to state 55
    CONST        go to state 65


State 51

   66 COMPUND_STATMENT_PROC: '{' '}' .

    $default  reduce using rule 66 (COMPUND_STATMENT_PROC)


State 52

   39 EXPRASION: '|' . EXPRASION '|'

    NULLA         shift, and go to state 34
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '|'           shift, and go to state 52

    EXPRASION    go to state 95
    FUNC_ACTIVE  go to state 55
    CONST        go to state 65


State 53

   74 NEW_DECLARE: DEF_A .

    $default  reduce using rule 74 (NEW_DECLARE)


State 54

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   61 STASTMENT: EXPRASION . ';'

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 102
    '<'     shift, and go to state 103
    ';'     shift, and go to state 104
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108


State 55

   38 EXPRASION: FUNC_ACTIVE .

    $default  reduce using rule 38 (EXPRASION)


State 56

   56 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   68 INNER_COMPUND_STATMENT: STASTMENT_LIST .

    NULLA         shift, and go to state 34
    IF            shift, and go to state 35
    FOR           shift, and go to state 36
    WHILE         shift, and go to state 37
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '{'           shift, and go to state 20
    '|'           shift, and go to state 52

    $default  reduce using rule 68 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 54
    FUNC_ACTIVE            go to state 55
    IF_STASTMENT           go to state 57
    STASTMENT              go to state 109
    LOOP_STATMENT          go to state 59
    COMPUND_STATMENT_PROC  go to state 60
    CONST                  go to state 65


State 57

   62 STASTMENT: IF_STASTMENT .

    $default  reduce using rule 62 (STASTMENT)


State 58

   57 STASTMENT_LIST: STASTMENT .

    $default  reduce using rule 57 (STASTMENT_LIST)


State 59

   63 STASTMENT: LOOP_STATMENT .

    $default  reduce using rule 63 (STASTMENT)


State 60

   60 STASTMENT: COMPUND_STATMENT_PROC .

    $default  reduce using rule 60 (STASTMENT)


State 61

   67 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT . '}'

    '}'  shift, and go to state 110


State 62

   69 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK .
   70                       | DEC_INNER_BLOCK . STASTMENT_LIST

    NULLA         shift, and go to state 34
    IF            shift, and go to state 35
    FOR           shift, and go to state 36
    WHILE         shift, and go to state 37
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '{'           shift, and go to state 20
    '|'           shift, and go to state 52

    $default  reduce using rule 69 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 54
    FUNC_ACTIVE            go to state 55
    STASTMENT_LIST         go to state 111
    IF_STASTMENT           go to state 57
    STASTMENT              go to state 58
    LOOP_STATMENT          go to state 59
    COMPUND_STATMENT_PROC  go to state 60
    CONST                  go to state 65


State 63

   71 DEC_INNER_BLOCK: NEW_DECLARE . DEC_INNER_BLOCK
   72                | NEW_DECLARE .

    VAR   shift, and go to state 38
    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    $default  reduce using rule 72 (DEC_INNER_BLOCK)

    DEF_A            go to state 53
    PROC_DEF         go to state 6
    FUNC_DEF         go to state 7
    DEC_INNER_BLOCK  go to state 112
    NEW_DECLARE      go to state 63
    VF               go to state 64


State 64

   73 NEW_DECLARE: VF .

    $default  reduce using rule 73 (NEW_DECLARE)


State 65

   16 EXPRASION: CONST .

    $default  reduce using rule 16 (EXPRASION)


State 66

   13 INNER_ARGS: ID ',' INNER_ARGS .

    $default  reduce using rule 13 (INNER_ARGS)


State 67

   10 OUT_ARGES: INNER_ARGS ':' TYPE .
   11          | INNER_ARGS ':' TYPE . ';' OUT_ARGES

    ';'  shift, and go to state 113

    $default  reduce using rule 10 (OUT_ARGES)


State 68

   84 TYPE: STRING '[' . INT_NUM ']'

    INT_NUM  shift, and go to state 114


State 69

   14 FUNC_BLOCK: '{' . RETURN EXPRASION ';' '}'
   15           | '{' . INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

    NULLA         shift, and go to state 34
    IF            shift, and go to state 35
    FOR           shift, and go to state 36
    WHILE         shift, and go to state 37
    RETURN        shift, and go to state 115
    VAR           shift, and go to state 38
    FUNC          shift, and go to state 1
    PROC          shift, and go to state 2
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '{'           shift, and go to state 20
    '|'           shift, and go to state 52

    DEF_A                   go to state 53
    PROC_DEF                go to state 6
    FUNC_DEF                go to state 7
    EXPRASION               go to state 54
    FUNC_ACTIVE             go to state 55
    STASTMENT_LIST          go to state 56
    IF_STASTMENT            go to state 57
    STASTMENT               go to state 58
    LOOP_STATMENT           go to state 59
    COMPUND_STATMENT_PROC   go to state 60
    INNER_COMPUND_STATMENT  go to state 116
    DEC_INNER_BLOCK         go to state 62
    NEW_DECLARE             go to state 63
    VF                      go to state 64
    CONST                   go to state 65


State 70

    7 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK .

    $default  reduce using rule 7 (FUNC_DEF)


State 71

   58 IF_STASTMENT: IF '(' . EXPRASION ')' STASTMENT ELSE STASTMENT
   59             | IF '(' . EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 34
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '|'           shift, and go to state 52

    EXPRASION    go to state 117
    FUNC_ACTIVE  go to state 55
    CONST        go to state 65


State 72

   65 LOOP_STATMENT: FOR '(' . EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 34
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '|'           shift, and go to state 52

    EXPRASION    go to state 118
    FUNC_ACTIVE  go to state 55
    CONST        go to state 65


State 73

   64 LOOP_STATMENT: WHILE '(' . EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 34
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '|'           shift, and go to state 52

    EXPRASION    go to state 119
    FUNC_ACTIVE  go to state 55
    CONST        go to state 65


State 74

   76 VFDEC: INNER_ARGS . ':' TYPE ';'

    ':'  shift, and go to state 120


State 75

   75 VF: VAR VFDEC .

    $default  reduce using rule 75 (VF)


State 76

   52 FUNC_ACTIVE: ID '(' . ')'
   53            | ID '(' . FUNC_ACTIVE_INNER_ARGES ')'

    NULLA         shift, and go to state 34
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    ')'           shift, and go to state 121
    '|'           shift, and go to state 52

    EXPRASION                go to state 122
    FUNC_ACTIVE              go to state 55
    FUNC_ACTIVE_INNER_ARGES  go to state 123
    CONST                    go to state 65


State 77

   23 EXPRASION: ID '[' . EXPRASION ']' '=' VALUE
   24          | ID '[' . EXPRASION ']'

    NULLA         shift, and go to state 34
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '|'           shift, and go to state 52

    EXPRASION    go to state 124
    FUNC_ACTIVE  go to state 55
    CONST        go to state 65


State 78

   25 EXPRASION: ID '=' . EXPRASION

    NULLA         shift, and go to state 34
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '|'           shift, and go to state 52

    EXPRASION    go to state 125
    FUNC_ACTIVE  go to state 55
    CONST        go to state 65


State 79

   43 VALUE: TRUE .

    $default  reduce using rule 43 (VALUE)


State 80

   44 VALUE: FALSE .

    $default  reduce using rule 44 (VALUE)


State 81

   40 VALUE: ID . '[' EXPRASION ']'
   45      | ID .
   52 FUNC_ACTIVE: ID . '(' ')'
   53            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 76
    '['  shift, and go to state 126

    $default  reduce using rule 45 (VALUE)


State 82

   51 VALUE: '!' . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 127
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 83

   48 VALUE: '^' . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 128
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 84

   49 VALUE: '&' . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 129
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 85

   50 VALUE: '-' . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 130
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 86

   42 VALUE: '(' . EXPRASION ')'

    NULLA         shift, and go to state 34
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '|'           shift, and go to state 52

    EXPRASION    go to state 131
    FUNC_ACTIVE  go to state 55
    CONST        go to state 65


State 87

   47 VALUE: '|' . VALUE '|'

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 132
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 88

   22 EXPRASION: '!' VALUE .

    $default  reduce using rule 22 (EXPRASION)


State 89

   46 VALUE: FUNC_ACTIVE .

    $default  reduce using rule 46 (VALUE)


State 90

   41 VALUE: CONST .

    $default  reduce using rule 41 (VALUE)


State 91

   19 EXPRASION: '^' VALUE .

    $default  reduce using rule 19 (EXPRASION)


State 92

   20 EXPRASION: '&' VALUE .

    $default  reduce using rule 20 (EXPRASION)


State 93

   21 EXPRASION: '-' VALUE .

    $default  reduce using rule 21 (EXPRASION)


State 94

   17 EXPRASION: '(' EXPRASION . ')'
   26          | EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 102
    '<'     shift, and go to state 103
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    ')'     shift, and go to state 133


State 95

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   39          | '|' EXPRASION . '|'

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 102
    '<'     shift, and go to state 103
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    '|'     shift, and go to state 134


State 96

   27 EXPRASION: EXPRASION AND_OP . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 135
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 97

   34 EXPRASION: EXPRASION GE_OP . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 136
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 98

   35 EXPRASION: EXPRASION SE_OP . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 137
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 99

   26 EXPRASION: EXPRASION NE_OP . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 138
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 100

   28 EXPRASION: EXPRASION OR_OP . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 139
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 101

   33 EXPRASION: EXPRASION EQL_OP . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 140
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 102

   36 EXPRASION: EXPRASION '>' . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 141
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 103

   37 EXPRASION: EXPRASION '<' . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 142
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 104

   61 STASTMENT: EXPRASION ';' .

    $default  reduce using rule 61 (STASTMENT)


State 105

   29 EXPRASION: EXPRASION '+' . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 143
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 106

   30 EXPRASION: EXPRASION '-' . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 144
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 107

   32 EXPRASION: EXPRASION '*' . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 145
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 108

   31 EXPRASION: EXPRASION '/' . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 146
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 109

   56 STASTMENT_LIST: STASTMENT_LIST STASTMENT .

    $default  reduce using rule 56 (STASTMENT_LIST)


State 110

   67 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT '}' .

    $default  reduce using rule 67 (COMPUND_STATMENT_PROC)


State 111

   56 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   70 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK STASTMENT_LIST .

    NULLA         shift, and go to state 34
    IF            shift, and go to state 35
    FOR           shift, and go to state 36
    WHILE         shift, and go to state 37
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '{'           shift, and go to state 20
    '|'           shift, and go to state 52

    $default  reduce using rule 70 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 54
    FUNC_ACTIVE            go to state 55
    IF_STASTMENT           go to state 57
    STASTMENT              go to state 109
    LOOP_STATMENT          go to state 59
    COMPUND_STATMENT_PROC  go to state 60
    CONST                  go to state 65


State 112

   71 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK .

    $default  reduce using rule 71 (DEC_INNER_BLOCK)


State 113

   11 OUT_ARGES: INNER_ARGS ':' TYPE ';' . OUT_ARGES

    ID  shift, and go to state 15

    OUT_ARGES   go to state 147
    INNER_ARGS  go to state 18


State 114

   84 TYPE: STRING '[' INT_NUM . ']'

    ']'  shift, and go to state 148


State 115

   14 FUNC_BLOCK: '{' RETURN . EXPRASION ';' '}'

    NULLA         shift, and go to state 34
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '|'           shift, and go to state 52

    EXPRASION    go to state 149
    FUNC_ACTIVE  go to state 55
    CONST        go to state 65


State 116

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT . RETURN EXPRASION ';' '}'

    RETURN  shift, and go to state 150


State 117

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   58 IF_STASTMENT: IF '(' EXPRASION . ')' STASTMENT ELSE STASTMENT
   59             | IF '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 102
    '<'     shift, and go to state 103
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    ')'     shift, and go to state 151


State 118

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   65 LOOP_STATMENT: FOR '(' EXPRASION . ';' EXPRASION ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 102
    '<'     shift, and go to state 103
    ';'     shift, and go to state 152
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108


State 119

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   64 LOOP_STATMENT: WHILE '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 102
    '<'     shift, and go to state 103
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    ')'     shift, and go to state 153


State 120

   76 VFDEC: INNER_ARGS ':' . TYPE ';'

    CHAR          shift, and go to state 25
    REAL          shift, and go to state 26
    INT           shift, and go to state 27
    BOOL          shift, and go to state 28
    STRING        shift, and go to state 29
    CHAR_POINTER  shift, and go to state 30
    REAL_POINTER  shift, and go to state 31
    INT_POINTER   shift, and go to state 32

    TYPE  go to state 154


State 121

   52 FUNC_ACTIVE: ID '(' ')' .

    $default  reduce using rule 52 (FUNC_ACTIVE)


State 122

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   54 FUNC_ACTIVE_INNER_ARGES: EXPRASION .
   55                        | EXPRASION . ',' FUNC_ACTIVE_INNER_ARGES

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 102
    '<'     shift, and go to state 103
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    ','     shift, and go to state 155

    $default  reduce using rule 54 (FUNC_ACTIVE_INNER_ARGES)


State 123

   53 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES . ')'

    ')'  shift, and go to state 156


State 124

   23 EXPRASION: ID '[' EXPRASION . ']' '=' VALUE
   24          | ID '[' EXPRASION . ']'
   26          | EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 102
    '<'     shift, and go to state 103
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    ']'     shift, and go to state 157


State 125

   25 EXPRASION: ID '=' EXPRASION .
   26          | EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 102
    '<'     shift, and go to state 103
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108

    AND_OP    [reduce using rule 25 (EXPRASION)]
    GE_OP     [reduce using rule 25 (EXPRASION)]
    SE_OP     [reduce using rule 25 (EXPRASION)]
    NE_OP     [reduce using rule 25 (EXPRASION)]
    OR_OP     [reduce using rule 25 (EXPRASION)]
    EQL_OP    [reduce using rule 25 (EXPRASION)]
    '>'       [reduce using rule 25 (EXPRASION)]
    '<'       [reduce using rule 25 (EXPRASION)]
    '+'       [reduce using rule 25 (EXPRASION)]
    '-'       [reduce using rule 25 (EXPRASION)]
    '*'       [reduce using rule 25 (EXPRASION)]
    '/'       [reduce using rule 25 (EXPRASION)]
    $default  reduce using rule 25 (EXPRASION)


State 126

   40 VALUE: ID '[' . EXPRASION ']'

    NULLA         shift, and go to state 34
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '|'           shift, and go to state 52

    EXPRASION    go to state 158
    FUNC_ACTIVE  go to state 55
    CONST        go to state 65


State 127

   51 VALUE: '!' VALUE .

    $default  reduce using rule 51 (VALUE)


State 128

   48 VALUE: '^' VALUE .

    $default  reduce using rule 48 (VALUE)


State 129

   49 VALUE: '&' VALUE .

    $default  reduce using rule 49 (VALUE)


State 130

   50 VALUE: '-' VALUE .

    $default  reduce using rule 50 (VALUE)


State 131

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   42 VALUE: '(' EXPRASION . ')'

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 102
    '<'     shift, and go to state 103
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    ')'     shift, and go to state 159


State 132

   47 VALUE: '|' VALUE . '|'

    '|'  shift, and go to state 160


State 133

   17 EXPRASION: '(' EXPRASION ')' .

    $default  reduce using rule 17 (EXPRASION)


State 134

   39 EXPRASION: '|' EXPRASION '|' .

    $default  reduce using rule 39 (EXPRASION)


State 135

   27 EXPRASION: EXPRASION AND_OP VALUE .

    $default  reduce using rule 27 (EXPRASION)


State 136

   34 EXPRASION: EXPRASION GE_OP VALUE .

    $default  reduce using rule 34 (EXPRASION)


State 137

   35 EXPRASION: EXPRASION SE_OP VALUE .

    $default  reduce using rule 35 (EXPRASION)


State 138

   26 EXPRASION: EXPRASION NE_OP VALUE .

    $default  reduce using rule 26 (EXPRASION)


State 139

   28 EXPRASION: EXPRASION OR_OP VALUE .

    $default  reduce using rule 28 (EXPRASION)


State 140

   33 EXPRASION: EXPRASION EQL_OP VALUE .

    $default  reduce using rule 33 (EXPRASION)


State 141

   36 EXPRASION: EXPRASION '>' VALUE .

    $default  reduce using rule 36 (EXPRASION)


State 142

   37 EXPRASION: EXPRASION '<' VALUE .

    $default  reduce using rule 37 (EXPRASION)


State 143

   29 EXPRASION: EXPRASION '+' VALUE .

    $default  reduce using rule 29 (EXPRASION)


State 144

   30 EXPRASION: EXPRASION '-' VALUE .

    $default  reduce using rule 30 (EXPRASION)


State 145

   32 EXPRASION: EXPRASION '*' VALUE .

    $default  reduce using rule 32 (EXPRASION)


State 146

   31 EXPRASION: EXPRASION '/' VALUE .

    $default  reduce using rule 31 (EXPRASION)


State 147

   11 OUT_ARGES: INNER_ARGS ':' TYPE ';' OUT_ARGES .

    $default  reduce using rule 11 (OUT_ARGES)


State 148

   84 TYPE: STRING '[' INT_NUM ']' .

    $default  reduce using rule 84 (TYPE)


State 149

   14 FUNC_BLOCK: '{' RETURN EXPRASION . ';' '}'
   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 102
    '<'     shift, and go to state 103
    ';'     shift, and go to state 161
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108


State 150

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN . EXPRASION ';' '}'

    NULLA         shift, and go to state 34
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '|'           shift, and go to state 52

    EXPRASION    go to state 162
    FUNC_ACTIVE  go to state 55
    CONST        go to state 65


State 151

   58 IF_STASTMENT: IF '(' EXPRASION ')' . STASTMENT ELSE STASTMENT
   59             | IF '(' EXPRASION ')' . STASTMENT

    NULLA         shift, and go to state 34
    IF            shift, and go to state 35
    FOR           shift, and go to state 36
    WHILE         shift, and go to state 37
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '{'           shift, and go to state 20
    '|'           shift, and go to state 52

    EXPRASION              go to state 54
    FUNC_ACTIVE            go to state 55
    IF_STASTMENT           go to state 57
    STASTMENT              go to state 163
    LOOP_STATMENT          go to state 59
    COMPUND_STATMENT_PROC  go to state 60
    CONST                  go to state 65


State 152

   65 LOOP_STATMENT: FOR '(' EXPRASION ';' . EXPRASION ';' EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 34
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '|'           shift, and go to state 52

    EXPRASION    go to state 164
    FUNC_ACTIVE  go to state 55
    CONST        go to state 65


State 153

   64 LOOP_STATMENT: WHILE '(' EXPRASION ')' . STASTMENT

    NULLA         shift, and go to state 34
    IF            shift, and go to state 35
    FOR           shift, and go to state 36
    WHILE         shift, and go to state 37
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '{'           shift, and go to state 20
    '|'           shift, and go to state 52

    EXPRASION              go to state 54
    FUNC_ACTIVE            go to state 55
    IF_STASTMENT           go to state 57
    STASTMENT              go to state 165
    LOOP_STATMENT          go to state 59
    COMPUND_STATMENT_PROC  go to state 60
    CONST                  go to state 65


State 154

   76 VFDEC: INNER_ARGS ':' TYPE . ';'

    ';'  shift, and go to state 166


State 155

   55 FUNC_ACTIVE_INNER_ARGES: EXPRASION ',' . FUNC_ACTIVE_INNER_ARGES

    NULLA         shift, and go to state 34
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '|'           shift, and go to state 52

    EXPRASION                go to state 122
    FUNC_ACTIVE              go to state 55
    FUNC_ACTIVE_INNER_ARGES  go to state 167
    CONST                    go to state 65


State 156

   53 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES ')' .

    $default  reduce using rule 53 (FUNC_ACTIVE)


State 157

   23 EXPRASION: ID '[' EXPRASION ']' . '=' VALUE
   24          | ID '[' EXPRASION ']' .

    '='  shift, and go to state 168

    $default  reduce using rule 24 (EXPRASION)


State 158

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   40 VALUE: ID '[' EXPRASION . ']'

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 102
    '<'     shift, and go to state 103
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    ']'     shift, and go to state 169


State 159

   42 VALUE: '(' EXPRASION ')' .

    $default  reduce using rule 42 (VALUE)


State 160

   47 VALUE: '|' VALUE '|' .

    $default  reduce using rule 47 (VALUE)


State 161

   14 FUNC_BLOCK: '{' RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 170


State 162

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION . ';' '}'
   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 102
    '<'     shift, and go to state 103
    ';'     shift, and go to state 171
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108


State 163

   58 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT . ELSE STASTMENT
   59             | IF '(' EXPRASION ')' STASTMENT .

    ELSE  shift, and go to state 172

    $default  reduce using rule 59 (IF_STASTMENT)


State 164

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   65 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION . ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 102
    '<'     shift, and go to state 103
    ';'     shift, and go to state 173
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108


State 165

   64 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT .

    $default  reduce using rule 64 (LOOP_STATMENT)


State 166

   76 VFDEC: INNER_ARGS ':' TYPE ';' .

    $default  reduce using rule 76 (VFDEC)


State 167

   55 FUNC_ACTIVE_INNER_ARGES: EXPRASION ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 55 (FUNC_ACTIVE_INNER_ARGES)


State 168

   23 EXPRASION: ID '[' EXPRASION ']' '=' . VALUE

    NULLA         shift, and go to state 34
    TRUE          shift, and go to state 79
    FALSE         shift, and go to state 80
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 81
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 82
    '^'           shift, and go to state 83
    '&'           shift, and go to state 84
    '-'           shift, and go to state 85
    '('           shift, and go to state 86
    '|'           shift, and go to state 87

    VALUE        go to state 174
    FUNC_ACTIVE  go to state 89
    CONST        go to state 90


State 169

   40 VALUE: ID '[' EXPRASION ']' .

    $default  reduce using rule 40 (VALUE)


State 170

   14 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}' .

    $default  reduce using rule 14 (FUNC_BLOCK)


State 171

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 175


State 172

   58 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE . STASTMENT

    NULLA         shift, and go to state 34
    IF            shift, and go to state 35
    FOR           shift, and go to state 36
    WHILE         shift, and go to state 37
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '{'           shift, and go to state 20
    '|'           shift, and go to state 52

    EXPRASION              go to state 54
    FUNC_ACTIVE            go to state 55
    IF_STASTMENT           go to state 57
    STASTMENT              go to state 176
    LOOP_STATMENT          go to state 59
    COMPUND_STATMENT_PROC  go to state 60
    CONST                  go to state 65


State 173

   65 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' . EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 34
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '|'           shift, and go to state 52

    EXPRASION    go to state 177
    FUNC_ACTIVE  go to state 55
    CONST        go to state 65


State 174

   23 EXPRASION: ID '[' EXPRASION ']' '=' VALUE .

    $default  reduce using rule 23 (EXPRASION)


State 175

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}' .

    $default  reduce using rule 15 (FUNC_BLOCK)


State 176

   58 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT .

    $default  reduce using rule 58 (IF_STASTMENT)


State 177

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   65 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 96
    GE_OP   shift, and go to state 97
    SE_OP   shift, and go to state 98
    NE_OP   shift, and go to state 99
    OR_OP   shift, and go to state 100
    EQL_OP  shift, and go to state 101
    '>'     shift, and go to state 102
    '<'     shift, and go to state 103
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    ')'     shift, and go to state 178


State 178

   65 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' . STASTMENT

    NULLA         shift, and go to state 34
    IF            shift, and go to state 35
    FOR           shift, and go to state 36
    WHILE         shift, and go to state 37
    CHAR_VALUE    shift, and go to state 39
    STRING_VALUE  shift, and go to state 40
    INT_NUM       shift, and go to state 41
    R_NUM         shift, and go to state 42
    HEX_NUM       shift, and go to state 43
    ID            shift, and go to state 44
    BOOL_VAL      shift, and go to state 45
    '!'           shift, and go to state 46
    '^'           shift, and go to state 47
    '&'           shift, and go to state 48
    '-'           shift, and go to state 49
    '('           shift, and go to state 50
    '{'           shift, and go to state 20
    '|'           shift, and go to state 52

    EXPRASION              go to state 54
    FUNC_ACTIVE            go to state 55
    IF_STASTMENT           go to state 57
    STASTMENT              go to state 179
    LOOP_STATMENT          go to state 59
    COMPUND_STATMENT_PROC  go to state 60
    CONST                  go to state 65


State 179

   65 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT .

    $default  reduce using rule 65 (LOOP_STATMENT)
