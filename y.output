Nonterminals useless in grammar

   RETURN_STATMENT
   COMPUND_STATMENT


Terminals unused in grammar

   FLOAT_POINER
   CHAR_POINTER
   REAL_POINTER
   INT_POINTER
   NULL_VALUE
   BOOL_VALUE
   CHAR_VALUE
   STRING_VALUE
   test
   UFUNC


Rules useless in grammar

   95 RETURN_STATMENT: RETURN EXPRASION ';'

   96 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT RETURN_STATMENT '}'
   97                 | '{' RETURN_STATMENT '}'


State 60 conflicts: 2 shift/reduce
State 71 conflicts: 1 shift/reduce
State 87 conflicts: 1 shift/reduce
State 88 conflicts: 1 shift/reduce
State 89 conflicts: 1 shift/reduce
State 90 conflicts: 1 shift/reduce
State 125 conflicts: 12 shift/reduce
State 165 conflicts: 1 shift/reduce


Grammar

    0 $accept: S $end

    1 S: MAINBLOCK

    2 MAIN_END: PROC MAIN '(' ')' COMPUND_STATMENT_PROC

    3 MAINBLOCK: FUNC_PROC_DEC MAIN_END
    4          | MAIN_END

    5 FUNC_PROC_DEC: DEF_A
    6              | FUNC_PROC_DEC DEF_A

    7 DEF_A: FUNC_DEF
    8      | PROC_DEF

    9 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC

   10 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK

   11 ARGES: '(' ')'
   12      | '(' OUT_ARGES ')'

   13 OUT_ARGES: INNER_ARGS ':' TYPE
   14          | INNER_ARGS ':' TYPE ';' OUT_ARGES

   15 INNER_ARGS: ID
   16           | ID ',' INNER_ARGS

   17 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}'
   18           | '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

   19 EXPRASION: CONST
   20          | '(' EXPRASION ')'
   21          | TRUE
   22          | FALSE
   23          | ID
   24          | '^' EXPRASION
   25          | '&' EXPRASION
   26          | '-' EXPRASION
   27          | '!' EXPRASION
   28          | ID '[' EXPRASION ']' '=' VALUE
   29          | ID '=' EXPRASION
   30          | EXPRASION NE_OP VALUE
   31          | EXPRASION AND_OP VALUE
   32          | EXPRASION OR_OP VALUE
   33          | EXPRASION '+' VALUE
   34          | EXPRASION '-' VALUE
   35          | EXPRASION '/' VALUE
   36          | EXPRASION '*' VALUE
   37          | EXPRASION EQL_OP VALUE
   38          | EXPRASION GE_OP VALUE
   39          | EXPRASION SE_OP VALUE
   40          | EXPRASION '>' VALUE
   41          | EXPRASION '<' VALUE
   42          | FUNC_ACTIVE
   43          | '|' EXPRASION '|'

   44 VALUE: %empty
   45      | CONST
   46      | '(' EXPRASION ')'
   47      | TRUE
   48      | FALSE
   49      | ID
   50      | FUNC_ACTIVE

   51 FUNC_ACTIVE: ID '(' ')'
   52            | ID '(' FUNC_ACTIVE_INNER_ARGES ')'

   53 FUNC_ACTIVE_INNER_ARGES: ID
   54                        | FUNC_ACTIVE
   55                        | CONST
   56                        | ID ',' FUNC_ACTIVE_INNER_ARGES
   57                        | CONST ',' FUNC_ACTIVE_INNER_ARGES
   58                        | FUNC_ACTIVE ',' FUNC_ACTIVE_INNER_ARGES

   59 STASTMENT_LIST: STASTMENT_LIST STASTMENT
   60               | STASTMENT

   61 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   62             | IF '(' EXPRASION ')' STASTMENT

   63 STASTMENT: COMPUND_STATMENT_PROC
   64          | EXPRASION ';'
   65          | IF_STASTMENT
   66          | LOOP_STATMENT

   67 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT
   68              | FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

   69 COMPUND_STATMENT_PROC: '{' '}'
   70                      | '{' INNER_COMPUND_STATMENT '}'

   71 INNER_COMPUND_STATMENT: STASTMENT_LIST
   72                       | DEC_INNER_BLOCK
   73                       | DEC_INNER_BLOCK STASTMENT_LIST

   74 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK
   75                | NEW_DECLARE

   76 NEW_DECLARE: VAR_DECLARE
   77            | FUNC_PROC_DEC

   78 VAR_DECLARE: VF
   79            | VAR_DECLARE VF

   80 VF: VAR VFDEC

   81 VFDEC: INNER_ARGS ':' TYPE ';'
   82      | INNER_ARGS ':' TYPE ';' VFDEC

   83 CONST: INT_NUM
   84      | R_NUM
   85      | HEX_NUM
   86      | NULLA

   87 TYPE: STRING '[' INT_NUM ']'
   88     | BOOL
   89     | INT
   90     | REAL
   91     | CHAR
   92     | CHAR_POINER
   93     | REAL_POINER
   94     | INT_POINER


Terminals, with rules where they appear

$end (0) 0
'!' (33) 27
'&' (38) 25
'(' (40) 2 11 12 20 46 51 52 61 62 67 68
')' (41) 2 11 12 20 46 51 52 61 62 67 68
'*' (42) 36
'+' (43) 33
',' (44) 16 56 57 58
'-' (45) 26 34
'/' (47) 35
':' (58) 13 14 81 82
';' (59) 14 17 18 64 68 81 82
'<' (60) 41
'=' (61) 28 29
'>' (62) 40
'[' (91) 28 87
']' (93) 28 87
'^' (94) 24
'{' (123) 17 18 69 70
'|' (124) 43
'}' (125) 17 18 69 70
error (256)
CHAR <String> (258) 91
REAL <String> (259) 90
INT <String> (260) 89
BOOL <String> (261) 88
STRING <String> (262) 87
CHAR_POINER <String> (263) 92
REAL_POINER <String> (264) 93
FLOAT_POINER <String> (265)
INT_POINER <String> (266) 94
CHAR_POINTER <String> (267)
REAL_POINTER <String> (268)
INT_POINTER <String> (269)
NULLA <String> (270) 86
ELSE (271) 61
IF (272) 61 62
FOR (273) 68
WHILE (274) 67
TRUE (275) 21 47
FALSE (276) 22 48
RETURN (277) 10 17 18
MAIN (278) 2
VAR <String> (279) 80
FUNC <String> (280) 10
PROC <String> (281) 2 9
NULL_VALUE (282)
AND_OP (283) 31
GE_OP (284) 38
SE_OP (285) 39
NE_OP (286) 30
OR_OP (287) 32
EQL_OP (288) 37
BOOL_VALUE <String> (289)
CHAR_VALUE <String> (290)
STRING_VALUE <String> (291)
INT_NUM <String> (292) 83 87
R_NUM <String> (293) 84
HEX_NUM <String> (294) 85
ID <String> (295) 9 10 15 16 23 28 29 49 51 52 53 56
IFX (296)
test (297)
UMINUS (298)
UFUNC (299)


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
S <Node> (66)
    on left: 1, on right: 0
MAIN_END <Node> (67)
    on left: 2, on right: 3 4
MAINBLOCK <Node> (68)
    on left: 3 4, on right: 1
FUNC_PROC_DEC <Node> (69)
    on left: 5 6, on right: 3 6 77
DEF_A <Node> (70)
    on left: 7 8, on right: 5 6
PROC_DEF <Node> (71)
    on left: 9, on right: 8
FUNC_DEF <Node> (72)
    on left: 10, on right: 7
ARGES <Node> (73)
    on left: 11 12, on right: 9 10
OUT_ARGES <Node> (74)
    on left: 13 14, on right: 12 14
INNER_ARGS <Node> (75)
    on left: 15 16, on right: 13 14 16 81 82
FUNC_BLOCK <Node> (76)
    on left: 17 18, on right: 10
EXPRASION <Node> (77)
    on left: 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36
    37 38 39 40 41 42 43, on right: 17 18 20 24 25 26 27 28 29 30 31
    32 33 34 35 36 37 38 39 40 41 43 46 61 62 64 67 68
VALUE <Node> (78)
    on left: 44 45 46 47 48 49 50, on right: 28 30 31 32 33 34 35 36
    37 38 39 40 41
FUNC_ACTIVE <Node> (79)
    on left: 51 52, on right: 42 50 54 58
FUNC_ACTIVE_INNER_ARGES <Node> (80)
    on left: 53 54 55 56 57 58, on right: 52 56 57 58
STASTMENT_LIST <Node> (81)
    on left: 59 60, on right: 59 71 73
IF_STASTMENT <Node> (82)
    on left: 61 62, on right: 65
STASTMENT <Node> (83)
    on left: 63 64 65 66, on right: 59 60 61 62 67 68
LOOP_STATMENT <Node> (84)
    on left: 67 68, on right: 66
COMPUND_STATMENT_PROC <Node> (85)
    on left: 69 70, on right: 2 9 63
INNER_COMPUND_STATMENT <Node> (86)
    on left: 71 72 73, on right: 18 70
DEC_INNER_BLOCK <Node> (87)
    on left: 74 75, on right: 72 73 74
NEW_DECLARE <Node> (88)
    on left: 76 77, on right: 74 75
VAR_DECLARE <Node> (89)
    on left: 78 79, on right: 76 79
VF <Node> (90)
    on left: 80, on right: 78 79
VFDEC <Node> (91)
    on left: 81 82, on right: 80 82
CONST <Node> (92)
    on left: 83 84 85 86, on right: 19 45 55 57
TYPE <String> (93)
    on left: 87 88 89 90 91 92 93 94, on right: 10 13 14 81 82


State 0

    0 $accept: . S $end

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    S              go to state 3
    MAIN_END       go to state 4
    MAINBLOCK      go to state 5
    FUNC_PROC_DEC  go to state 6
    DEF_A          go to state 7
    PROC_DEF       go to state 8
    FUNC_DEF       go to state 9


State 1

   10 FUNC_DEF: FUNC . ID ARGES RETURN TYPE FUNC_BLOCK

    ID  shift, and go to state 10


State 2

    2 MAIN_END: PROC . MAIN '(' ')' COMPUND_STATMENT_PROC
    9 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT_PROC

    MAIN  shift, and go to state 11
    ID    shift, and go to state 12


State 3

    0 $accept: S . $end

    $end  shift, and go to state 13


State 4

    4 MAINBLOCK: MAIN_END .

    $default  reduce using rule 4 (MAINBLOCK)


State 5

    1 S: MAINBLOCK .

    $default  reduce using rule 1 (S)


State 6

    3 MAINBLOCK: FUNC_PROC_DEC . MAIN_END
    6 FUNC_PROC_DEC: FUNC_PROC_DEC . DEF_A

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    MAIN_END  go to state 14
    DEF_A     go to state 15
    PROC_DEF  go to state 8
    FUNC_DEF  go to state 9


State 7

    5 FUNC_PROC_DEC: DEF_A .

    $default  reduce using rule 5 (FUNC_PROC_DEC)


State 8

    8 DEF_A: PROC_DEF .

    $default  reduce using rule 8 (DEF_A)


State 9

    7 DEF_A: FUNC_DEF .

    $default  reduce using rule 7 (DEF_A)


State 10

   10 FUNC_DEF: FUNC ID . ARGES RETURN TYPE FUNC_BLOCK

    '('  shift, and go to state 16

    ARGES  go to state 17


State 11

    2 MAIN_END: PROC MAIN . '(' ')' COMPUND_STATMENT_PROC

    '('  shift, and go to state 18


State 12

    9 PROC_DEF: PROC ID . ARGES COMPUND_STATMENT_PROC

    '('  shift, and go to state 16

    ARGES  go to state 19


State 13

    0 $accept: S $end .

    $default  accept


State 14

    3 MAINBLOCK: FUNC_PROC_DEC MAIN_END .

    $default  reduce using rule 3 (MAINBLOCK)


State 15

    6 FUNC_PROC_DEC: FUNC_PROC_DEC DEF_A .

    $default  reduce using rule 6 (FUNC_PROC_DEC)


State 16

   11 ARGES: '(' . ')'
   12      | '(' . OUT_ARGES ')'

    ID   shift, and go to state 20
    ')'  shift, and go to state 21

    OUT_ARGES   go to state 22
    INNER_ARGS  go to state 23


State 17

   10 FUNC_DEF: FUNC ID ARGES . RETURN TYPE FUNC_BLOCK

    RETURN  shift, and go to state 24


State 18

    2 MAIN_END: PROC MAIN '(' . ')' COMPUND_STATMENT_PROC

    ')'  shift, and go to state 25


State 19

    9 PROC_DEF: PROC ID ARGES . COMPUND_STATMENT_PROC

    '{'  shift, and go to state 26

    COMPUND_STATMENT_PROC  go to state 27


State 20

   15 INNER_ARGS: ID .
   16           | ID . ',' INNER_ARGS

    ','  shift, and go to state 28

    $default  reduce using rule 15 (INNER_ARGS)


State 21

   11 ARGES: '(' ')' .

    $default  reduce using rule 11 (ARGES)


State 22

   12 ARGES: '(' OUT_ARGES . ')'

    ')'  shift, and go to state 29


State 23

   13 OUT_ARGES: INNER_ARGS . ':' TYPE
   14          | INNER_ARGS . ':' TYPE ';' OUT_ARGES

    ':'  shift, and go to state 30


State 24

   10 FUNC_DEF: FUNC ID ARGES RETURN . TYPE FUNC_BLOCK

    CHAR         shift, and go to state 31
    REAL         shift, and go to state 32
    INT          shift, and go to state 33
    BOOL         shift, and go to state 34
    STRING       shift, and go to state 35
    CHAR_POINER  shift, and go to state 36
    REAL_POINER  shift, and go to state 37
    INT_POINER   shift, and go to state 38

    TYPE  go to state 39


State 25

    2 MAIN_END: PROC MAIN '(' ')' . COMPUND_STATMENT_PROC

    '{'  shift, and go to state 26

    COMPUND_STATMENT_PROC  go to state 40


State 26

   69 COMPUND_STATMENT_PROC: '{' . '}'
   70                      | '{' . INNER_COMPUND_STATMENT '}'

    NULLA    shift, and go to state 41
    IF       shift, and go to state 42
    FOR      shift, and go to state 43
    WHILE    shift, and go to state 44
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    VAR      shift, and go to state 47
    FUNC     shift, and go to state 1
    PROC     shift, and go to state 48
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '{'      shift, and go to state 26
    '}'      shift, and go to state 58
    '|'      shift, and go to state 59

    FUNC_PROC_DEC           go to state 60
    DEF_A                   go to state 7
    PROC_DEF                go to state 8
    FUNC_DEF                go to state 9
    EXPRASION               go to state 61
    FUNC_ACTIVE             go to state 62
    STASTMENT_LIST          go to state 63
    IF_STASTMENT            go to state 64
    STASTMENT               go to state 65
    LOOP_STATMENT           go to state 66
    COMPUND_STATMENT_PROC   go to state 67
    INNER_COMPUND_STATMENT  go to state 68
    DEC_INNER_BLOCK         go to state 69
    NEW_DECLARE             go to state 70
    VAR_DECLARE             go to state 71
    VF                      go to state 72
    CONST                   go to state 73


State 27

    9 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC .

    $default  reduce using rule 9 (PROC_DEF)


State 28

   16 INNER_ARGS: ID ',' . INNER_ARGS

    ID  shift, and go to state 20

    INNER_ARGS  go to state 74


State 29

   12 ARGES: '(' OUT_ARGES ')' .

    $default  reduce using rule 12 (ARGES)


State 30

   13 OUT_ARGES: INNER_ARGS ':' . TYPE
   14          | INNER_ARGS ':' . TYPE ';' OUT_ARGES

    CHAR         shift, and go to state 31
    REAL         shift, and go to state 32
    INT          shift, and go to state 33
    BOOL         shift, and go to state 34
    STRING       shift, and go to state 35
    CHAR_POINER  shift, and go to state 36
    REAL_POINER  shift, and go to state 37
    INT_POINER   shift, and go to state 38

    TYPE  go to state 75


State 31

   91 TYPE: CHAR .

    $default  reduce using rule 91 (TYPE)


State 32

   90 TYPE: REAL .

    $default  reduce using rule 90 (TYPE)


State 33

   89 TYPE: INT .

    $default  reduce using rule 89 (TYPE)


State 34

   88 TYPE: BOOL .

    $default  reduce using rule 88 (TYPE)


State 35

   87 TYPE: STRING . '[' INT_NUM ']'

    '['  shift, and go to state 76


State 36

   92 TYPE: CHAR_POINER .

    $default  reduce using rule 92 (TYPE)


State 37

   93 TYPE: REAL_POINER .

    $default  reduce using rule 93 (TYPE)


State 38

   94 TYPE: INT_POINER .

    $default  reduce using rule 94 (TYPE)


State 39

   10 FUNC_DEF: FUNC ID ARGES RETURN TYPE . FUNC_BLOCK

    '{'  shift, and go to state 77

    FUNC_BLOCK  go to state 78


State 40

    2 MAIN_END: PROC MAIN '(' ')' COMPUND_STATMENT_PROC .

    $default  reduce using rule 2 (MAIN_END)


State 41

   86 CONST: NULLA .

    $default  reduce using rule 86 (CONST)


State 42

   61 IF_STASTMENT: IF . '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   62             | IF . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 79


State 43

   68 LOOP_STATMENT: FOR . '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    '('  shift, and go to state 80


State 44

   67 LOOP_STATMENT: WHILE . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 81


State 45

   21 EXPRASION: TRUE .

    $default  reduce using rule 21 (EXPRASION)


State 46

   22 EXPRASION: FALSE .

    $default  reduce using rule 22 (EXPRASION)


State 47

   80 VF: VAR . VFDEC

    ID  shift, and go to state 20

    INNER_ARGS  go to state 82
    VFDEC       go to state 83


State 48

    9 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT_PROC

    ID  shift, and go to state 12


State 49

   83 CONST: INT_NUM .

    $default  reduce using rule 83 (CONST)


State 50

   84 CONST: R_NUM .

    $default  reduce using rule 84 (CONST)


State 51

   85 CONST: HEX_NUM .

    $default  reduce using rule 85 (CONST)


State 52

   23 EXPRASION: ID .
   28          | ID . '[' EXPRASION ']' '=' VALUE
   29          | ID . '=' EXPRASION
   51 FUNC_ACTIVE: ID . '(' ')'
   52            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 84
    '['  shift, and go to state 85
    '='  shift, and go to state 86

    $default  reduce using rule 23 (EXPRASION)


State 53

   26 EXPRASION: '-' . EXPRASION

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 87
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 54

   27 EXPRASION: '!' . EXPRASION

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 88
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 55

   24 EXPRASION: '^' . EXPRASION

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 89
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 56

   25 EXPRASION: '&' . EXPRASION

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 90
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 57

   20 EXPRASION: '(' . EXPRASION ')'

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 91
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 58

   69 COMPUND_STATMENT_PROC: '{' '}' .

    $default  reduce using rule 69 (COMPUND_STATMENT_PROC)


State 59

   43 EXPRASION: '|' . EXPRASION '|'

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 92
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 60

    6 FUNC_PROC_DEC: FUNC_PROC_DEC . DEF_A
   77 NEW_DECLARE: FUNC_PROC_DEC .

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 48

    FUNC      [reduce using rule 77 (NEW_DECLARE)]
    PROC      [reduce using rule 77 (NEW_DECLARE)]
    $default  reduce using rule 77 (NEW_DECLARE)

    DEF_A     go to state 15
    PROC_DEF  go to state 8
    FUNC_DEF  go to state 9


State 61

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   64 STASTMENT: EXPRASION . ';'

    AND_OP  shift, and go to state 93
    GE_OP   shift, and go to state 94
    SE_OP   shift, and go to state 95
    NE_OP   shift, and go to state 96
    OR_OP   shift, and go to state 97
    EQL_OP  shift, and go to state 98
    ';'     shift, and go to state 99
    '+'     shift, and go to state 100
    '-'     shift, and go to state 101
    '*'     shift, and go to state 102
    '/'     shift, and go to state 103
    '>'     shift, and go to state 104
    '<'     shift, and go to state 105


State 62

   42 EXPRASION: FUNC_ACTIVE .

    $default  reduce using rule 42 (EXPRASION)


State 63

   59 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   71 INNER_COMPUND_STATMENT: STASTMENT_LIST .

    NULLA    shift, and go to state 41
    IF       shift, and go to state 42
    FOR      shift, and go to state 43
    WHILE    shift, and go to state 44
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '{'      shift, and go to state 26
    '|'      shift, and go to state 59

    $default  reduce using rule 71 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 61
    FUNC_ACTIVE            go to state 62
    IF_STASTMENT           go to state 64
    STASTMENT              go to state 106
    LOOP_STATMENT          go to state 66
    COMPUND_STATMENT_PROC  go to state 67
    CONST                  go to state 73


State 64

   65 STASTMENT: IF_STASTMENT .

    $default  reduce using rule 65 (STASTMENT)


State 65

   60 STASTMENT_LIST: STASTMENT .

    $default  reduce using rule 60 (STASTMENT_LIST)


State 66

   66 STASTMENT: LOOP_STATMENT .

    $default  reduce using rule 66 (STASTMENT)


State 67

   63 STASTMENT: COMPUND_STATMENT_PROC .

    $default  reduce using rule 63 (STASTMENT)


State 68

   70 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT . '}'

    '}'  shift, and go to state 107


State 69

   72 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK .
   73                       | DEC_INNER_BLOCK . STASTMENT_LIST

    NULLA    shift, and go to state 41
    IF       shift, and go to state 42
    FOR      shift, and go to state 43
    WHILE    shift, and go to state 44
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '{'      shift, and go to state 26
    '|'      shift, and go to state 59

    $default  reduce using rule 72 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 61
    FUNC_ACTIVE            go to state 62
    STASTMENT_LIST         go to state 108
    IF_STASTMENT           go to state 64
    STASTMENT              go to state 65
    LOOP_STATMENT          go to state 66
    COMPUND_STATMENT_PROC  go to state 67
    CONST                  go to state 73


State 70

   74 DEC_INNER_BLOCK: NEW_DECLARE . DEC_INNER_BLOCK
   75                | NEW_DECLARE .

    VAR   shift, and go to state 47
    FUNC  shift, and go to state 1
    PROC  shift, and go to state 48

    $default  reduce using rule 75 (DEC_INNER_BLOCK)

    FUNC_PROC_DEC    go to state 60
    DEF_A            go to state 7
    PROC_DEF         go to state 8
    FUNC_DEF         go to state 9
    DEC_INNER_BLOCK  go to state 109
    NEW_DECLARE      go to state 70
    VAR_DECLARE      go to state 71
    VF               go to state 72


State 71

   76 NEW_DECLARE: VAR_DECLARE .
   79 VAR_DECLARE: VAR_DECLARE . VF

    VAR  shift, and go to state 47

    VAR       [reduce using rule 76 (NEW_DECLARE)]
    $default  reduce using rule 76 (NEW_DECLARE)

    VF  go to state 110


State 72

   78 VAR_DECLARE: VF .

    $default  reduce using rule 78 (VAR_DECLARE)


State 73

   19 EXPRASION: CONST .

    $default  reduce using rule 19 (EXPRASION)


State 74

   16 INNER_ARGS: ID ',' INNER_ARGS .

    $default  reduce using rule 16 (INNER_ARGS)


State 75

   13 OUT_ARGES: INNER_ARGS ':' TYPE .
   14          | INNER_ARGS ':' TYPE . ';' OUT_ARGES

    ';'  shift, and go to state 111

    $default  reduce using rule 13 (OUT_ARGES)


State 76

   87 TYPE: STRING '[' . INT_NUM ']'

    INT_NUM  shift, and go to state 112


State 77

   17 FUNC_BLOCK: '{' . RETURN EXPRASION ';' '}'
   18           | '{' . INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

    NULLA    shift, and go to state 41
    IF       shift, and go to state 42
    FOR      shift, and go to state 43
    WHILE    shift, and go to state 44
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    RETURN   shift, and go to state 113
    VAR      shift, and go to state 47
    FUNC     shift, and go to state 1
    PROC     shift, and go to state 48
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '{'      shift, and go to state 26
    '|'      shift, and go to state 59

    FUNC_PROC_DEC           go to state 60
    DEF_A                   go to state 7
    PROC_DEF                go to state 8
    FUNC_DEF                go to state 9
    EXPRASION               go to state 61
    FUNC_ACTIVE             go to state 62
    STASTMENT_LIST          go to state 63
    IF_STASTMENT            go to state 64
    STASTMENT               go to state 65
    LOOP_STATMENT           go to state 66
    COMPUND_STATMENT_PROC   go to state 67
    INNER_COMPUND_STATMENT  go to state 114
    DEC_INNER_BLOCK         go to state 69
    NEW_DECLARE             go to state 70
    VAR_DECLARE             go to state 71
    VF                      go to state 72
    CONST                   go to state 73


State 78

   10 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK .

    $default  reduce using rule 10 (FUNC_DEF)


State 79

   61 IF_STASTMENT: IF '(' . EXPRASION ')' STASTMENT ELSE STASTMENT
   62             | IF '(' . EXPRASION ')' STASTMENT

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 115
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 80

   68 LOOP_STATMENT: FOR '(' . EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 116
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 81

   67 LOOP_STATMENT: WHILE '(' . EXPRASION ')' STASTMENT

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 117
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 82

   81 VFDEC: INNER_ARGS . ':' TYPE ';'
   82      | INNER_ARGS . ':' TYPE ';' VFDEC

    ':'  shift, and go to state 118


State 83

   80 VF: VAR VFDEC .

    $default  reduce using rule 80 (VF)


State 84

   51 FUNC_ACTIVE: ID '(' . ')'
   52            | ID '(' . FUNC_ACTIVE_INNER_ARGES ')'

    NULLA    shift, and go to state 41
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 119
    ')'      shift, and go to state 120

    FUNC_ACTIVE              go to state 121
    FUNC_ACTIVE_INNER_ARGES  go to state 122
    CONST                    go to state 123


State 85

   28 EXPRASION: ID '[' . EXPRASION ']' '=' VALUE

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 124
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 86

   29 EXPRASION: ID '=' . EXPRASION

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 125
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 87

   26 EXPRASION: '-' EXPRASION .
   30          | EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 96

    NE_OP     [reduce using rule 26 (EXPRASION)]
    $default  reduce using rule 26 (EXPRASION)


State 88

   27 EXPRASION: '!' EXPRASION .
   30          | EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 96

    NE_OP     [reduce using rule 27 (EXPRASION)]
    $default  reduce using rule 27 (EXPRASION)


State 89

   24 EXPRASION: '^' EXPRASION .
   30          | EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 96

    NE_OP     [reduce using rule 24 (EXPRASION)]
    $default  reduce using rule 24 (EXPRASION)


State 90

   25 EXPRASION: '&' EXPRASION .
   30          | EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 96

    NE_OP     [reduce using rule 25 (EXPRASION)]
    $default  reduce using rule 25 (EXPRASION)


State 91

   20 EXPRASION: '(' EXPRASION . ')'
   30          | EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 93
    GE_OP   shift, and go to state 94
    SE_OP   shift, and go to state 95
    NE_OP   shift, and go to state 96
    OR_OP   shift, and go to state 97
    EQL_OP  shift, and go to state 98
    '+'     shift, and go to state 100
    '-'     shift, and go to state 101
    '*'     shift, and go to state 102
    '/'     shift, and go to state 103
    '>'     shift, and go to state 104
    '<'     shift, and go to state 105
    ')'     shift, and go to state 126


State 92

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   43          | '|' EXPRASION . '|'

    AND_OP  shift, and go to state 93
    GE_OP   shift, and go to state 94
    SE_OP   shift, and go to state 95
    NE_OP   shift, and go to state 96
    OR_OP   shift, and go to state 97
    EQL_OP  shift, and go to state 98
    '+'     shift, and go to state 100
    '-'     shift, and go to state 101
    '*'     shift, and go to state 102
    '/'     shift, and go to state 103
    '>'     shift, and go to state 104
    '<'     shift, and go to state 105
    '|'     shift, and go to state 127


State 93

   31 EXPRASION: EXPRASION AND_OP . VALUE

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 128
    FALSE    shift, and go to state 129
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 130
    '('      shift, and go to state 131

    $default  reduce using rule 44 (VALUE)

    VALUE        go to state 132
    FUNC_ACTIVE  go to state 133
    CONST        go to state 134


State 94

   38 EXPRASION: EXPRASION GE_OP . VALUE

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 128
    FALSE    shift, and go to state 129
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 130
    '('      shift, and go to state 131

    $default  reduce using rule 44 (VALUE)

    VALUE        go to state 135
    FUNC_ACTIVE  go to state 133
    CONST        go to state 134


State 95

   39 EXPRASION: EXPRASION SE_OP . VALUE

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 128
    FALSE    shift, and go to state 129
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 130
    '('      shift, and go to state 131

    $default  reduce using rule 44 (VALUE)

    VALUE        go to state 136
    FUNC_ACTIVE  go to state 133
    CONST        go to state 134


State 96

   30 EXPRASION: EXPRASION NE_OP . VALUE

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 128
    FALSE    shift, and go to state 129
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 130
    '('      shift, and go to state 131

    $default  reduce using rule 44 (VALUE)

    VALUE        go to state 137
    FUNC_ACTIVE  go to state 133
    CONST        go to state 134


State 97

   32 EXPRASION: EXPRASION OR_OP . VALUE

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 128
    FALSE    shift, and go to state 129
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 130
    '('      shift, and go to state 131

    $default  reduce using rule 44 (VALUE)

    VALUE        go to state 138
    FUNC_ACTIVE  go to state 133
    CONST        go to state 134


State 98

   37 EXPRASION: EXPRASION EQL_OP . VALUE

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 128
    FALSE    shift, and go to state 129
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 130
    '('      shift, and go to state 131

    $default  reduce using rule 44 (VALUE)

    VALUE        go to state 139
    FUNC_ACTIVE  go to state 133
    CONST        go to state 134


State 99

   64 STASTMENT: EXPRASION ';' .

    $default  reduce using rule 64 (STASTMENT)


State 100

   33 EXPRASION: EXPRASION '+' . VALUE

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 128
    FALSE    shift, and go to state 129
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 130
    '('      shift, and go to state 131

    $default  reduce using rule 44 (VALUE)

    VALUE        go to state 140
    FUNC_ACTIVE  go to state 133
    CONST        go to state 134


State 101

   34 EXPRASION: EXPRASION '-' . VALUE

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 128
    FALSE    shift, and go to state 129
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 130
    '('      shift, and go to state 131

    $default  reduce using rule 44 (VALUE)

    VALUE        go to state 141
    FUNC_ACTIVE  go to state 133
    CONST        go to state 134


State 102

   36 EXPRASION: EXPRASION '*' . VALUE

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 128
    FALSE    shift, and go to state 129
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 130
    '('      shift, and go to state 131

    $default  reduce using rule 44 (VALUE)

    VALUE        go to state 142
    FUNC_ACTIVE  go to state 133
    CONST        go to state 134


State 103

   35 EXPRASION: EXPRASION '/' . VALUE

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 128
    FALSE    shift, and go to state 129
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 130
    '('      shift, and go to state 131

    $default  reduce using rule 44 (VALUE)

    VALUE        go to state 143
    FUNC_ACTIVE  go to state 133
    CONST        go to state 134


State 104

   40 EXPRASION: EXPRASION '>' . VALUE

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 128
    FALSE    shift, and go to state 129
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 130
    '('      shift, and go to state 131

    $default  reduce using rule 44 (VALUE)

    VALUE        go to state 144
    FUNC_ACTIVE  go to state 133
    CONST        go to state 134


State 105

   41 EXPRASION: EXPRASION '<' . VALUE

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 128
    FALSE    shift, and go to state 129
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 130
    '('      shift, and go to state 131

    $default  reduce using rule 44 (VALUE)

    VALUE        go to state 145
    FUNC_ACTIVE  go to state 133
    CONST        go to state 134


State 106

   59 STASTMENT_LIST: STASTMENT_LIST STASTMENT .

    $default  reduce using rule 59 (STASTMENT_LIST)


State 107

   70 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT '}' .

    $default  reduce using rule 70 (COMPUND_STATMENT_PROC)


State 108

   59 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   73 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK STASTMENT_LIST .

    NULLA    shift, and go to state 41
    IF       shift, and go to state 42
    FOR      shift, and go to state 43
    WHILE    shift, and go to state 44
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '{'      shift, and go to state 26
    '|'      shift, and go to state 59

    $default  reduce using rule 73 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 61
    FUNC_ACTIVE            go to state 62
    IF_STASTMENT           go to state 64
    STASTMENT              go to state 106
    LOOP_STATMENT          go to state 66
    COMPUND_STATMENT_PROC  go to state 67
    CONST                  go to state 73


State 109

   74 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK .

    $default  reduce using rule 74 (DEC_INNER_BLOCK)


State 110

   79 VAR_DECLARE: VAR_DECLARE VF .

    $default  reduce using rule 79 (VAR_DECLARE)


State 111

   14 OUT_ARGES: INNER_ARGS ':' TYPE ';' . OUT_ARGES

    ID  shift, and go to state 20

    OUT_ARGES   go to state 146
    INNER_ARGS  go to state 23


State 112

   87 TYPE: STRING '[' INT_NUM . ']'

    ']'  shift, and go to state 147


State 113

   17 FUNC_BLOCK: '{' RETURN . EXPRASION ';' '}'

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 148
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 114

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT . RETURN EXPRASION ';' '}'

    RETURN  shift, and go to state 149


State 115

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   61 IF_STASTMENT: IF '(' EXPRASION . ')' STASTMENT ELSE STASTMENT
   62             | IF '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 93
    GE_OP   shift, and go to state 94
    SE_OP   shift, and go to state 95
    NE_OP   shift, and go to state 96
    OR_OP   shift, and go to state 97
    EQL_OP  shift, and go to state 98
    '+'     shift, and go to state 100
    '-'     shift, and go to state 101
    '*'     shift, and go to state 102
    '/'     shift, and go to state 103
    '>'     shift, and go to state 104
    '<'     shift, and go to state 105
    ')'     shift, and go to state 150


State 116

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   68 LOOP_STATMENT: FOR '(' EXPRASION . ';' EXPRASION ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 93
    GE_OP   shift, and go to state 94
    SE_OP   shift, and go to state 95
    NE_OP   shift, and go to state 96
    OR_OP   shift, and go to state 97
    EQL_OP  shift, and go to state 98
    ';'     shift, and go to state 151
    '+'     shift, and go to state 100
    '-'     shift, and go to state 101
    '*'     shift, and go to state 102
    '/'     shift, and go to state 103
    '>'     shift, and go to state 104
    '<'     shift, and go to state 105


State 117

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   67 LOOP_STATMENT: WHILE '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 93
    GE_OP   shift, and go to state 94
    SE_OP   shift, and go to state 95
    NE_OP   shift, and go to state 96
    OR_OP   shift, and go to state 97
    EQL_OP  shift, and go to state 98
    '+'     shift, and go to state 100
    '-'     shift, and go to state 101
    '*'     shift, and go to state 102
    '/'     shift, and go to state 103
    '>'     shift, and go to state 104
    '<'     shift, and go to state 105
    ')'     shift, and go to state 152


State 118

   81 VFDEC: INNER_ARGS ':' . TYPE ';'
   82      | INNER_ARGS ':' . TYPE ';' VFDEC

    CHAR         shift, and go to state 31
    REAL         shift, and go to state 32
    INT          shift, and go to state 33
    BOOL         shift, and go to state 34
    STRING       shift, and go to state 35
    CHAR_POINER  shift, and go to state 36
    REAL_POINER  shift, and go to state 37
    INT_POINER   shift, and go to state 38

    TYPE  go to state 153


State 119

   51 FUNC_ACTIVE: ID . '(' ')'
   52            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'
   53 FUNC_ACTIVE_INNER_ARGES: ID .
   56                        | ID . ',' FUNC_ACTIVE_INNER_ARGES

    '('  shift, and go to state 84
    ','  shift, and go to state 154

    $default  reduce using rule 53 (FUNC_ACTIVE_INNER_ARGES)


State 120

   51 FUNC_ACTIVE: ID '(' ')' .

    $default  reduce using rule 51 (FUNC_ACTIVE)


State 121

   54 FUNC_ACTIVE_INNER_ARGES: FUNC_ACTIVE .
   58                        | FUNC_ACTIVE . ',' FUNC_ACTIVE_INNER_ARGES

    ','  shift, and go to state 155

    $default  reduce using rule 54 (FUNC_ACTIVE_INNER_ARGES)


State 122

   52 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES . ')'

    ')'  shift, and go to state 156


State 123

   55 FUNC_ACTIVE_INNER_ARGES: CONST .
   57                        | CONST . ',' FUNC_ACTIVE_INNER_ARGES

    ','  shift, and go to state 157

    $default  reduce using rule 55 (FUNC_ACTIVE_INNER_ARGES)


State 124

   28 EXPRASION: ID '[' EXPRASION . ']' '=' VALUE
   30          | EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 93
    GE_OP   shift, and go to state 94
    SE_OP   shift, and go to state 95
    NE_OP   shift, and go to state 96
    OR_OP   shift, and go to state 97
    EQL_OP  shift, and go to state 98
    '+'     shift, and go to state 100
    '-'     shift, and go to state 101
    '*'     shift, and go to state 102
    '/'     shift, and go to state 103
    '>'     shift, and go to state 104
    '<'     shift, and go to state 105
    ']'     shift, and go to state 158


State 125

   29 EXPRASION: ID '=' EXPRASION .
   30          | EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 93
    GE_OP   shift, and go to state 94
    SE_OP   shift, and go to state 95
    NE_OP   shift, and go to state 96
    OR_OP   shift, and go to state 97
    EQL_OP  shift, and go to state 98
    '+'     shift, and go to state 100
    '-'     shift, and go to state 101
    '*'     shift, and go to state 102
    '/'     shift, and go to state 103
    '>'     shift, and go to state 104
    '<'     shift, and go to state 105

    AND_OP    [reduce using rule 29 (EXPRASION)]
    GE_OP     [reduce using rule 29 (EXPRASION)]
    SE_OP     [reduce using rule 29 (EXPRASION)]
    NE_OP     [reduce using rule 29 (EXPRASION)]
    OR_OP     [reduce using rule 29 (EXPRASION)]
    EQL_OP    [reduce using rule 29 (EXPRASION)]
    '+'       [reduce using rule 29 (EXPRASION)]
    '-'       [reduce using rule 29 (EXPRASION)]
    '*'       [reduce using rule 29 (EXPRASION)]
    '/'       [reduce using rule 29 (EXPRASION)]
    '>'       [reduce using rule 29 (EXPRASION)]
    '<'       [reduce using rule 29 (EXPRASION)]
    $default  reduce using rule 29 (EXPRASION)


State 126

   20 EXPRASION: '(' EXPRASION ')' .

    $default  reduce using rule 20 (EXPRASION)


State 127

   43 EXPRASION: '|' EXPRASION '|' .

    $default  reduce using rule 43 (EXPRASION)


State 128

   47 VALUE: TRUE .

    $default  reduce using rule 47 (VALUE)


State 129

   48 VALUE: FALSE .

    $default  reduce using rule 48 (VALUE)


State 130

   49 VALUE: ID .
   51 FUNC_ACTIVE: ID . '(' ')'
   52            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 84

    $default  reduce using rule 49 (VALUE)


State 131

   46 VALUE: '(' . EXPRASION ')'

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 159
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 132

   31 EXPRASION: EXPRASION AND_OP VALUE .

    $default  reduce using rule 31 (EXPRASION)


State 133

   50 VALUE: FUNC_ACTIVE .

    $default  reduce using rule 50 (VALUE)


State 134

   45 VALUE: CONST .

    $default  reduce using rule 45 (VALUE)


State 135

   38 EXPRASION: EXPRASION GE_OP VALUE .

    $default  reduce using rule 38 (EXPRASION)


State 136

   39 EXPRASION: EXPRASION SE_OP VALUE .

    $default  reduce using rule 39 (EXPRASION)


State 137

   30 EXPRASION: EXPRASION NE_OP VALUE .

    $default  reduce using rule 30 (EXPRASION)


State 138

   32 EXPRASION: EXPRASION OR_OP VALUE .

    $default  reduce using rule 32 (EXPRASION)


State 139

   37 EXPRASION: EXPRASION EQL_OP VALUE .

    $default  reduce using rule 37 (EXPRASION)


State 140

   33 EXPRASION: EXPRASION '+' VALUE .

    $default  reduce using rule 33 (EXPRASION)


State 141

   34 EXPRASION: EXPRASION '-' VALUE .

    $default  reduce using rule 34 (EXPRASION)


State 142

   36 EXPRASION: EXPRASION '*' VALUE .

    $default  reduce using rule 36 (EXPRASION)


State 143

   35 EXPRASION: EXPRASION '/' VALUE .

    $default  reduce using rule 35 (EXPRASION)


State 144

   40 EXPRASION: EXPRASION '>' VALUE .

    $default  reduce using rule 40 (EXPRASION)


State 145

   41 EXPRASION: EXPRASION '<' VALUE .

    $default  reduce using rule 41 (EXPRASION)


State 146

   14 OUT_ARGES: INNER_ARGS ':' TYPE ';' OUT_ARGES .

    $default  reduce using rule 14 (OUT_ARGES)


State 147

   87 TYPE: STRING '[' INT_NUM ']' .

    $default  reduce using rule 87 (TYPE)


State 148

   17 FUNC_BLOCK: '{' RETURN EXPRASION . ';' '}'
   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 93
    GE_OP   shift, and go to state 94
    SE_OP   shift, and go to state 95
    NE_OP   shift, and go to state 96
    OR_OP   shift, and go to state 97
    EQL_OP  shift, and go to state 98
    ';'     shift, and go to state 160
    '+'     shift, and go to state 100
    '-'     shift, and go to state 101
    '*'     shift, and go to state 102
    '/'     shift, and go to state 103
    '>'     shift, and go to state 104
    '<'     shift, and go to state 105


State 149

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN . EXPRASION ';' '}'

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 161
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 150

   61 IF_STASTMENT: IF '(' EXPRASION ')' . STASTMENT ELSE STASTMENT
   62             | IF '(' EXPRASION ')' . STASTMENT

    NULLA    shift, and go to state 41
    IF       shift, and go to state 42
    FOR      shift, and go to state 43
    WHILE    shift, and go to state 44
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '{'      shift, and go to state 26
    '|'      shift, and go to state 59

    EXPRASION              go to state 61
    FUNC_ACTIVE            go to state 62
    IF_STASTMENT           go to state 64
    STASTMENT              go to state 162
    LOOP_STATMENT          go to state 66
    COMPUND_STATMENT_PROC  go to state 67
    CONST                  go to state 73


State 151

   68 LOOP_STATMENT: FOR '(' EXPRASION ';' . EXPRASION ';' EXPRASION ')' STASTMENT

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 163
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 152

   67 LOOP_STATMENT: WHILE '(' EXPRASION ')' . STASTMENT

    NULLA    shift, and go to state 41
    IF       shift, and go to state 42
    FOR      shift, and go to state 43
    WHILE    shift, and go to state 44
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '{'      shift, and go to state 26
    '|'      shift, and go to state 59

    EXPRASION              go to state 61
    FUNC_ACTIVE            go to state 62
    IF_STASTMENT           go to state 64
    STASTMENT              go to state 164
    LOOP_STATMENT          go to state 66
    COMPUND_STATMENT_PROC  go to state 67
    CONST                  go to state 73


State 153

   81 VFDEC: INNER_ARGS ':' TYPE . ';'
   82      | INNER_ARGS ':' TYPE . ';' VFDEC

    ';'  shift, and go to state 165


State 154

   56 FUNC_ACTIVE_INNER_ARGES: ID ',' . FUNC_ACTIVE_INNER_ARGES

    NULLA    shift, and go to state 41
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 119

    FUNC_ACTIVE              go to state 121
    FUNC_ACTIVE_INNER_ARGES  go to state 166
    CONST                    go to state 123


State 155

   58 FUNC_ACTIVE_INNER_ARGES: FUNC_ACTIVE ',' . FUNC_ACTIVE_INNER_ARGES

    NULLA    shift, and go to state 41
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 119

    FUNC_ACTIVE              go to state 121
    FUNC_ACTIVE_INNER_ARGES  go to state 167
    CONST                    go to state 123


State 156

   52 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES ')' .

    $default  reduce using rule 52 (FUNC_ACTIVE)


State 157

   57 FUNC_ACTIVE_INNER_ARGES: CONST ',' . FUNC_ACTIVE_INNER_ARGES

    NULLA    shift, and go to state 41
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 119

    FUNC_ACTIVE              go to state 121
    FUNC_ACTIVE_INNER_ARGES  go to state 168
    CONST                    go to state 123


State 158

   28 EXPRASION: ID '[' EXPRASION ']' . '=' VALUE

    '='  shift, and go to state 169


State 159

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   46 VALUE: '(' EXPRASION . ')'

    AND_OP  shift, and go to state 93
    GE_OP   shift, and go to state 94
    SE_OP   shift, and go to state 95
    NE_OP   shift, and go to state 96
    OR_OP   shift, and go to state 97
    EQL_OP  shift, and go to state 98
    '+'     shift, and go to state 100
    '-'     shift, and go to state 101
    '*'     shift, and go to state 102
    '/'     shift, and go to state 103
    '>'     shift, and go to state 104
    '<'     shift, and go to state 105
    ')'     shift, and go to state 170


State 160

   17 FUNC_BLOCK: '{' RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 171


State 161

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION . ';' '}'
   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 93
    GE_OP   shift, and go to state 94
    SE_OP   shift, and go to state 95
    NE_OP   shift, and go to state 96
    OR_OP   shift, and go to state 97
    EQL_OP  shift, and go to state 98
    ';'     shift, and go to state 172
    '+'     shift, and go to state 100
    '-'     shift, and go to state 101
    '*'     shift, and go to state 102
    '/'     shift, and go to state 103
    '>'     shift, and go to state 104
    '<'     shift, and go to state 105


State 162

   61 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT . ELSE STASTMENT
   62             | IF '(' EXPRASION ')' STASTMENT .

    ELSE  shift, and go to state 173

    $default  reduce using rule 62 (IF_STASTMENT)


State 163

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   68 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION . ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 93
    GE_OP   shift, and go to state 94
    SE_OP   shift, and go to state 95
    NE_OP   shift, and go to state 96
    OR_OP   shift, and go to state 97
    EQL_OP  shift, and go to state 98
    ';'     shift, and go to state 174
    '+'     shift, and go to state 100
    '-'     shift, and go to state 101
    '*'     shift, and go to state 102
    '/'     shift, and go to state 103
    '>'     shift, and go to state 104
    '<'     shift, and go to state 105


State 164

   67 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT .

    $default  reduce using rule 67 (LOOP_STATMENT)


State 165

   81 VFDEC: INNER_ARGS ':' TYPE ';' .
   82      | INNER_ARGS ':' TYPE ';' . VFDEC

    ID  shift, and go to state 20

    ID        [reduce using rule 81 (VFDEC)]
    $default  reduce using rule 81 (VFDEC)

    INNER_ARGS  go to state 82
    VFDEC       go to state 175


State 166

   56 FUNC_ACTIVE_INNER_ARGES: ID ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 56 (FUNC_ACTIVE_INNER_ARGES)


State 167

   58 FUNC_ACTIVE_INNER_ARGES: FUNC_ACTIVE ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 58 (FUNC_ACTIVE_INNER_ARGES)


State 168

   57 FUNC_ACTIVE_INNER_ARGES: CONST ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 57 (FUNC_ACTIVE_INNER_ARGES)


State 169

   28 EXPRASION: ID '[' EXPRASION ']' '=' . VALUE

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 128
    FALSE    shift, and go to state 129
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 130
    '('      shift, and go to state 131

    $default  reduce using rule 44 (VALUE)

    VALUE        go to state 176
    FUNC_ACTIVE  go to state 133
    CONST        go to state 134


State 170

   46 VALUE: '(' EXPRASION ')' .

    $default  reduce using rule 46 (VALUE)


State 171

   17 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}' .

    $default  reduce using rule 17 (FUNC_BLOCK)


State 172

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 177


State 173

   61 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE . STASTMENT

    NULLA    shift, and go to state 41
    IF       shift, and go to state 42
    FOR      shift, and go to state 43
    WHILE    shift, and go to state 44
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '{'      shift, and go to state 26
    '|'      shift, and go to state 59

    EXPRASION              go to state 61
    FUNC_ACTIVE            go to state 62
    IF_STASTMENT           go to state 64
    STASTMENT              go to state 178
    LOOP_STATMENT          go to state 66
    COMPUND_STATMENT_PROC  go to state 67
    CONST                  go to state 73


State 174

   68 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' . EXPRASION ')' STASTMENT

    NULLA    shift, and go to state 41
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '|'      shift, and go to state 59

    EXPRASION    go to state 179
    FUNC_ACTIVE  go to state 62
    CONST        go to state 73


State 175

   82 VFDEC: INNER_ARGS ':' TYPE ';' VFDEC .

    $default  reduce using rule 82 (VFDEC)


State 176

   28 EXPRASION: ID '[' EXPRASION ']' '=' VALUE .

    $default  reduce using rule 28 (EXPRASION)


State 177

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}' .

    $default  reduce using rule 18 (FUNC_BLOCK)


State 178

   61 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT .

    $default  reduce using rule 61 (IF_STASTMENT)


State 179

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   68 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 93
    GE_OP   shift, and go to state 94
    SE_OP   shift, and go to state 95
    NE_OP   shift, and go to state 96
    OR_OP   shift, and go to state 97
    EQL_OP  shift, and go to state 98
    '+'     shift, and go to state 100
    '-'     shift, and go to state 101
    '*'     shift, and go to state 102
    '/'     shift, and go to state 103
    '>'     shift, and go to state 104
    '<'     shift, and go to state 105
    ')'     shift, and go to state 180


State 180

   68 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' . STASTMENT

    NULLA    shift, and go to state 41
    IF       shift, and go to state 42
    FOR      shift, and go to state 43
    WHILE    shift, and go to state 44
    TRUE     shift, and go to state 45
    FALSE    shift, and go to state 46
    INT_NUM  shift, and go to state 49
    R_NUM    shift, and go to state 50
    HEX_NUM  shift, and go to state 51
    ID       shift, and go to state 52
    '-'      shift, and go to state 53
    '!'      shift, and go to state 54
    '^'      shift, and go to state 55
    '&'      shift, and go to state 56
    '('      shift, and go to state 57
    '{'      shift, and go to state 26
    '|'      shift, and go to state 59

    EXPRASION              go to state 61
    FUNC_ACTIVE            go to state 62
    IF_STASTMENT           go to state 64
    STASTMENT              go to state 181
    LOOP_STATMENT          go to state 66
    COMPUND_STATMENT_PROC  go to state 67
    CONST                  go to state 73


State 181

   68 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT .

    $default  reduce using rule 68 (LOOP_STATMENT)
