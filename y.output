Nonterminals useless in grammar

   RETURN_STATMENT
   COMPUND_STATMENT


Terminals unused in grammar

   FLOAT_POINER
   CHAR_POINTER
   REAL_POINTER
   INT_POINTER
   NULL_VALUE
   BOOL_VALUE
   CHAR_VALUE
   STRING_VALUE
   test
   UFUNC


Rules useless in grammar

   92 RETURN_STATMENT: RETURN EXPRASION ';'

   93 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT RETURN_STATMENT '}'
   94                 | '{' RETURN_STATMENT '}'


State 56 conflicts: 2 shift/reduce
State 67 conflicts: 1 shift/reduce
State 84 conflicts: 1 shift/reduce
State 85 conflicts: 1 shift/reduce
State 86 conflicts: 1 shift/reduce
State 87 conflicts: 1 shift/reduce
State 123 conflicts: 12 shift/reduce
State 163 conflicts: 1 shift/reduce


Grammar

    0 $accept: S $end

    1 S: FUNC_PROC_DEC MAIN_END

    2 MAIN_END: PROC MAIN '(' ')' COMPUND_STATMENT_PROC

    3 FUNC_PROC_DEC: DEF_A
    4              | FUNC_PROC_DEC DEF_A

    5 DEF_A: FUNC_DEF
    6      | PROC_DEF

    7 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC

    8 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK

    9 ARGES: '(' ')'
   10      | '(' OUT_ARGES ')'

   11 OUT_ARGES: INNER_ARGS ':' TYPE
   12          | INNER_ARGS ':' TYPE ';' OUT_ARGES

   13 INNER_ARGS: ID
   14           | ID ',' INNER_ARGS

   15 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}'
   16           | '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

   17 EXPRASION: CONST
   18          | '(' EXPRASION ')'
   19          | TRUE
   20          | FALSE
   21          | ID
   22          | '^' EXPRASION
   23          | '&' EXPRASION
   24          | '-' EXPRASION
   25          | '!' EXPRASION
   26          | ID '[' EXPRASION ']' '=' VALUE
   27          | ID '=' EXPRASION
   28          | EXPRASION NE_OP VALUE
   29          | EXPRASION AND_OP VALUE
   30          | EXPRASION OR_OP VALUE
   31          | EXPRASION '+' VALUE
   32          | EXPRASION '-' VALUE
   33          | EXPRASION '/' VALUE
   34          | EXPRASION '*' VALUE
   35          | EXPRASION EQL_OP VALUE
   36          | EXPRASION GE_OP VALUE
   37          | EXPRASION SE_OP VALUE
   38          | EXPRASION '>' VALUE
   39          | EXPRASION '<' VALUE
   40          | FUNC_ACTIVE
   41          | '|' EXPRASION '|'

   42 VALUE: CONST
   43      | '(' EXPRASION ')'
   44      | TRUE
   45      | FALSE
   46      | ID
   47      | FUNC_ACTIVE

   48 FUNC_ACTIVE: ID '(' ')'
   49            | ID '(' FUNC_ACTIVE_INNER_ARGES ')'

   50 FUNC_ACTIVE_INNER_ARGES: ID
   51                        | FUNC_ACTIVE
   52                        | CONST
   53                        | ID ',' FUNC_ACTIVE_INNER_ARGES
   54                        | CONST ',' FUNC_ACTIVE_INNER_ARGES
   55                        | FUNC_ACTIVE ',' FUNC_ACTIVE_INNER_ARGES

   56 STASTMENT_LIST: STASTMENT_LIST STASTMENT
   57               | STASTMENT

   58 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   59             | IF '(' EXPRASION ')' STASTMENT

   60 STASTMENT: COMPUND_STATMENT_PROC
   61          | EXPRASION ';'
   62          | IF_STASTMENT
   63          | LOOP_STATMENT

   64 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT
   65              | FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

   66 COMPUND_STATMENT_PROC: '{' '}'
   67                      | '{' INNER_COMPUND_STATMENT '}'

   68 INNER_COMPUND_STATMENT: STASTMENT_LIST
   69                       | DEC_INNER_BLOCK
   70                       | DEC_INNER_BLOCK STASTMENT_LIST

   71 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK
   72                | NEW_DECLARE

   73 NEW_DECLARE: VAR_DECLARE
   74            | FUNC_PROC_DEC

   75 VAR_DECLARE: VF
   76            | VAR_DECLARE VF

   77 VF: VAR VFDEC

   78 VFDEC: INNER_ARGS ':' TYPE ';'
   79      | INNER_ARGS ':' TYPE ';' VFDEC

   80 CONST: INT_NUM
   81      | R_NUM
   82      | HEX_NUM
   83      | NULLA

   84 TYPE: STRING '[' INT_NUM ']'
   85     | BOOL
   86     | INT
   87     | REAL
   88     | CHAR
   89     | CHAR_POINER
   90     | REAL_POINER
   91     | INT_POINER


Terminals, with rules where they appear

$end (0) 0
'!' (33) 25
'&' (38) 23
'(' (40) 2 9 10 18 43 48 49 58 59 64 65
')' (41) 2 9 10 18 43 48 49 58 59 64 65
'*' (42) 34
'+' (43) 31
',' (44) 14 53 54 55
'-' (45) 24 32
'/' (47) 33
':' (58) 11 12 78 79
';' (59) 12 15 16 61 65 78 79
'<' (60) 39
'=' (61) 26 27
'>' (62) 38
'[' (91) 26 84
']' (93) 26 84
'^' (94) 22
'{' (123) 15 16 66 67
'|' (124) 41
'}' (125) 15 16 66 67
error (256)
CHAR (258) 88
REAL (259) 87
INT (260) 86
BOOL (261) 85
STRING (262) 84
CHAR_POINER (263) 89
REAL_POINER (264) 90
FLOAT_POINER (265)
INT_POINER (266) 91
CHAR_POINTER (267)
REAL_POINTER (268)
INT_POINTER (269)
NULLA (270) 83
ELSE (271) 58
IF (272) 58 59
FOR (273) 65
WHILE (274) 64
TRUE (275) 19 44
FALSE (276) 20 45
RETURN (277) 8 15 16
MAIN (278) 2
VAR (279) 77
FUNC (280) 8
PROC (281) 2 7
NULL_VALUE (282)
AND_OP (283) 29
GE_OP (284) 36
SE_OP (285) 37
NE_OP (286) 28
OR_OP (287) 30
EQL_OP (288) 35
BOOL_VALUE (289)
CHAR_VALUE (290)
STRING_VALUE (291)
INT_NUM (292) 80 84
R_NUM (293) 81
HEX_NUM (294) 82
ID (295) 7 8 13 14 21 26 27 46 48 49 50 53
IFX (296)
test (297)
UMINUS (298)
UFUNC (299)


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
S (66)
    on left: 1, on right: 0
MAIN_END (67)
    on left: 2, on right: 1
FUNC_PROC_DEC (68)
    on left: 3 4, on right: 1 4 74
DEF_A (69)
    on left: 5 6, on right: 3 4
PROC_DEF (70)
    on left: 7, on right: 6
FUNC_DEF (71)
    on left: 8, on right: 5
ARGES (72)
    on left: 9 10, on right: 7 8
OUT_ARGES (73)
    on left: 11 12, on right: 10 12
INNER_ARGS (74)
    on left: 13 14, on right: 11 12 14 78 79
FUNC_BLOCK (75)
    on left: 15 16, on right: 8
EXPRASION (76)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
    35 36 37 38 39 40 41, on right: 15 16 18 22 23 24 25 26 27 28 29
    30 31 32 33 34 35 36 37 38 39 41 43 58 59 61 64 65
VALUE (77)
    on left: 42 43 44 45 46 47, on right: 26 28 29 30 31 32 33 34 35
    36 37 38 39
FUNC_ACTIVE (78)
    on left: 48 49, on right: 40 47 51 55
FUNC_ACTIVE_INNER_ARGES (79)
    on left: 50 51 52 53 54 55, on right: 49 53 54 55
STASTMENT_LIST (80)
    on left: 56 57, on right: 56 68 70
IF_STASTMENT (81)
    on left: 58 59, on right: 62
STASTMENT (82)
    on left: 60 61 62 63, on right: 56 57 58 59 64 65
LOOP_STATMENT (83)
    on left: 64 65, on right: 63
COMPUND_STATMENT_PROC (84)
    on left: 66 67, on right: 2 7 60
INNER_COMPUND_STATMENT (85)
    on left: 68 69 70, on right: 16 67
DEC_INNER_BLOCK (86)
    on left: 71 72, on right: 69 70 71
NEW_DECLARE (87)
    on left: 73 74, on right: 71 72
VAR_DECLARE (88)
    on left: 75 76, on right: 73 76
VF (89)
    on left: 77, on right: 75 76
VFDEC (90)
    on left: 78 79, on right: 77 79
CONST (91)
    on left: 80 81 82 83, on right: 17 42 52 54
TYPE (92)
    on left: 84 85 86 87 88 89 90 91, on right: 8 11 12 78 79


State 0

    0 $accept: . S $end

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    S              go to state 3
    FUNC_PROC_DEC  go to state 4
    DEF_A          go to state 5
    PROC_DEF       go to state 6
    FUNC_DEF       go to state 7


State 1

    8 FUNC_DEF: FUNC . ID ARGES RETURN TYPE FUNC_BLOCK

    ID  shift, and go to state 8


State 2

    7 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT_PROC

    ID  shift, and go to state 9


State 3

    0 $accept: S . $end

    $end  shift, and go to state 10


State 4

    1 S: FUNC_PROC_DEC . MAIN_END
    4 FUNC_PROC_DEC: FUNC_PROC_DEC . DEF_A

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 11

    MAIN_END  go to state 12
    DEF_A     go to state 13
    PROC_DEF  go to state 6
    FUNC_DEF  go to state 7


State 5

    3 FUNC_PROC_DEC: DEF_A .

    $default  reduce using rule 3 (FUNC_PROC_DEC)


State 6

    6 DEF_A: PROC_DEF .

    $default  reduce using rule 6 (DEF_A)


State 7

    5 DEF_A: FUNC_DEF .

    $default  reduce using rule 5 (DEF_A)


State 8

    8 FUNC_DEF: FUNC ID . ARGES RETURN TYPE FUNC_BLOCK

    '('  shift, and go to state 14

    ARGES  go to state 15


State 9

    7 PROC_DEF: PROC ID . ARGES COMPUND_STATMENT_PROC

    '('  shift, and go to state 14

    ARGES  go to state 16


State 10

    0 $accept: S $end .

    $default  accept


State 11

    2 MAIN_END: PROC . MAIN '(' ')' COMPUND_STATMENT_PROC
    7 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT_PROC

    MAIN  shift, and go to state 17
    ID    shift, and go to state 9


State 12

    1 S: FUNC_PROC_DEC MAIN_END .

    $default  reduce using rule 1 (S)


State 13

    4 FUNC_PROC_DEC: FUNC_PROC_DEC DEF_A .

    $default  reduce using rule 4 (FUNC_PROC_DEC)


State 14

    9 ARGES: '(' . ')'
   10      | '(' . OUT_ARGES ')'

    ID   shift, and go to state 18
    ')'  shift, and go to state 19

    OUT_ARGES   go to state 20
    INNER_ARGS  go to state 21


State 15

    8 FUNC_DEF: FUNC ID ARGES . RETURN TYPE FUNC_BLOCK

    RETURN  shift, and go to state 22


State 16

    7 PROC_DEF: PROC ID ARGES . COMPUND_STATMENT_PROC

    '{'  shift, and go to state 23

    COMPUND_STATMENT_PROC  go to state 24


State 17

    2 MAIN_END: PROC MAIN . '(' ')' COMPUND_STATMENT_PROC

    '('  shift, and go to state 25


State 18

   13 INNER_ARGS: ID .
   14           | ID . ',' INNER_ARGS

    ','  shift, and go to state 26

    $default  reduce using rule 13 (INNER_ARGS)


State 19

    9 ARGES: '(' ')' .

    $default  reduce using rule 9 (ARGES)


State 20

   10 ARGES: '(' OUT_ARGES . ')'

    ')'  shift, and go to state 27


State 21

   11 OUT_ARGES: INNER_ARGS . ':' TYPE
   12          | INNER_ARGS . ':' TYPE ';' OUT_ARGES

    ':'  shift, and go to state 28


State 22

    8 FUNC_DEF: FUNC ID ARGES RETURN . TYPE FUNC_BLOCK

    CHAR         shift, and go to state 29
    REAL         shift, and go to state 30
    INT          shift, and go to state 31
    BOOL         shift, and go to state 32
    STRING       shift, and go to state 33
    CHAR_POINER  shift, and go to state 34
    REAL_POINER  shift, and go to state 35
    INT_POINER   shift, and go to state 36

    TYPE  go to state 37


State 23

   66 COMPUND_STATMENT_PROC: '{' . '}'
   67                      | '{' . INNER_COMPUND_STATMENT '}'

    NULLA    shift, and go to state 38
    IF       shift, and go to state 39
    FOR      shift, and go to state 40
    WHILE    shift, and go to state 41
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    VAR      shift, and go to state 44
    FUNC     shift, and go to state 1
    PROC     shift, and go to state 2
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '{'      shift, and go to state 23
    '}'      shift, and go to state 54
    '|'      shift, and go to state 55

    FUNC_PROC_DEC           go to state 56
    DEF_A                   go to state 5
    PROC_DEF                go to state 6
    FUNC_DEF                go to state 7
    EXPRASION               go to state 57
    FUNC_ACTIVE             go to state 58
    STASTMENT_LIST          go to state 59
    IF_STASTMENT            go to state 60
    STASTMENT               go to state 61
    LOOP_STATMENT           go to state 62
    COMPUND_STATMENT_PROC   go to state 63
    INNER_COMPUND_STATMENT  go to state 64
    DEC_INNER_BLOCK         go to state 65
    NEW_DECLARE             go to state 66
    VAR_DECLARE             go to state 67
    VF                      go to state 68
    CONST                   go to state 69


State 24

    7 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC .

    $default  reduce using rule 7 (PROC_DEF)


State 25

    2 MAIN_END: PROC MAIN '(' . ')' COMPUND_STATMENT_PROC

    ')'  shift, and go to state 70


State 26

   14 INNER_ARGS: ID ',' . INNER_ARGS

    ID  shift, and go to state 18

    INNER_ARGS  go to state 71


State 27

   10 ARGES: '(' OUT_ARGES ')' .

    $default  reduce using rule 10 (ARGES)


State 28

   11 OUT_ARGES: INNER_ARGS ':' . TYPE
   12          | INNER_ARGS ':' . TYPE ';' OUT_ARGES

    CHAR         shift, and go to state 29
    REAL         shift, and go to state 30
    INT          shift, and go to state 31
    BOOL         shift, and go to state 32
    STRING       shift, and go to state 33
    CHAR_POINER  shift, and go to state 34
    REAL_POINER  shift, and go to state 35
    INT_POINER   shift, and go to state 36

    TYPE  go to state 72


State 29

   88 TYPE: CHAR .

    $default  reduce using rule 88 (TYPE)


State 30

   87 TYPE: REAL .

    $default  reduce using rule 87 (TYPE)


State 31

   86 TYPE: INT .

    $default  reduce using rule 86 (TYPE)


State 32

   85 TYPE: BOOL .

    $default  reduce using rule 85 (TYPE)


State 33

   84 TYPE: STRING . '[' INT_NUM ']'

    '['  shift, and go to state 73


State 34

   89 TYPE: CHAR_POINER .

    $default  reduce using rule 89 (TYPE)


State 35

   90 TYPE: REAL_POINER .

    $default  reduce using rule 90 (TYPE)


State 36

   91 TYPE: INT_POINER .

    $default  reduce using rule 91 (TYPE)


State 37

    8 FUNC_DEF: FUNC ID ARGES RETURN TYPE . FUNC_BLOCK

    '{'  shift, and go to state 74

    FUNC_BLOCK  go to state 75


State 38

   83 CONST: NULLA .

    $default  reduce using rule 83 (CONST)


State 39

   58 IF_STASTMENT: IF . '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   59             | IF . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 76


State 40

   65 LOOP_STATMENT: FOR . '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    '('  shift, and go to state 77


State 41

   64 LOOP_STATMENT: WHILE . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 78


State 42

   19 EXPRASION: TRUE .

    $default  reduce using rule 19 (EXPRASION)


State 43

   20 EXPRASION: FALSE .

    $default  reduce using rule 20 (EXPRASION)


State 44

   77 VF: VAR . VFDEC

    ID  shift, and go to state 18

    INNER_ARGS  go to state 79
    VFDEC       go to state 80


State 45

   80 CONST: INT_NUM .

    $default  reduce using rule 80 (CONST)


State 46

   81 CONST: R_NUM .

    $default  reduce using rule 81 (CONST)


State 47

   82 CONST: HEX_NUM .

    $default  reduce using rule 82 (CONST)


State 48

   21 EXPRASION: ID .
   26          | ID . '[' EXPRASION ']' '=' VALUE
   27          | ID . '=' EXPRASION
   48 FUNC_ACTIVE: ID . '(' ')'
   49            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 81
    '['  shift, and go to state 82
    '='  shift, and go to state 83

    $default  reduce using rule 21 (EXPRASION)


State 49

   24 EXPRASION: '-' . EXPRASION

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 84
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 50

   25 EXPRASION: '!' . EXPRASION

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 85
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 51

   22 EXPRASION: '^' . EXPRASION

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 86
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 52

   23 EXPRASION: '&' . EXPRASION

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 87
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 53

   18 EXPRASION: '(' . EXPRASION ')'

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 88
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 54

   66 COMPUND_STATMENT_PROC: '{' '}' .

    $default  reduce using rule 66 (COMPUND_STATMENT_PROC)


State 55

   41 EXPRASION: '|' . EXPRASION '|'

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 89
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 56

    4 FUNC_PROC_DEC: FUNC_PROC_DEC . DEF_A
   74 NEW_DECLARE: FUNC_PROC_DEC .

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    FUNC      [reduce using rule 74 (NEW_DECLARE)]
    PROC      [reduce using rule 74 (NEW_DECLARE)]
    $default  reduce using rule 74 (NEW_DECLARE)

    DEF_A     go to state 13
    PROC_DEF  go to state 6
    FUNC_DEF  go to state 7


State 57

   28 EXPRASION: EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE
   61 STASTMENT: EXPRASION . ';'

    AND_OP  shift, and go to state 90
    GE_OP   shift, and go to state 91
    SE_OP   shift, and go to state 92
    NE_OP   shift, and go to state 93
    OR_OP   shift, and go to state 94
    EQL_OP  shift, and go to state 95
    ';'     shift, and go to state 96
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '*'     shift, and go to state 99
    '/'     shift, and go to state 100
    '>'     shift, and go to state 101
    '<'     shift, and go to state 102


State 58

   40 EXPRASION: FUNC_ACTIVE .

    $default  reduce using rule 40 (EXPRASION)


State 59

   56 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   68 INNER_COMPUND_STATMENT: STASTMENT_LIST .

    NULLA    shift, and go to state 38
    IF       shift, and go to state 39
    FOR      shift, and go to state 40
    WHILE    shift, and go to state 41
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '{'      shift, and go to state 23
    '|'      shift, and go to state 55

    $default  reduce using rule 68 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 57
    FUNC_ACTIVE            go to state 58
    IF_STASTMENT           go to state 60
    STASTMENT              go to state 103
    LOOP_STATMENT          go to state 62
    COMPUND_STATMENT_PROC  go to state 63
    CONST                  go to state 69


State 60

   62 STASTMENT: IF_STASTMENT .

    $default  reduce using rule 62 (STASTMENT)


State 61

   57 STASTMENT_LIST: STASTMENT .

    $default  reduce using rule 57 (STASTMENT_LIST)


State 62

   63 STASTMENT: LOOP_STATMENT .

    $default  reduce using rule 63 (STASTMENT)


State 63

   60 STASTMENT: COMPUND_STATMENT_PROC .

    $default  reduce using rule 60 (STASTMENT)


State 64

   67 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT . '}'

    '}'  shift, and go to state 104


State 65

   69 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK .
   70                       | DEC_INNER_BLOCK . STASTMENT_LIST

    NULLA    shift, and go to state 38
    IF       shift, and go to state 39
    FOR      shift, and go to state 40
    WHILE    shift, and go to state 41
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '{'      shift, and go to state 23
    '|'      shift, and go to state 55

    $default  reduce using rule 69 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 57
    FUNC_ACTIVE            go to state 58
    STASTMENT_LIST         go to state 105
    IF_STASTMENT           go to state 60
    STASTMENT              go to state 61
    LOOP_STATMENT          go to state 62
    COMPUND_STATMENT_PROC  go to state 63
    CONST                  go to state 69


State 66

   71 DEC_INNER_BLOCK: NEW_DECLARE . DEC_INNER_BLOCK
   72                | NEW_DECLARE .

    VAR   shift, and go to state 44
    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    $default  reduce using rule 72 (DEC_INNER_BLOCK)

    FUNC_PROC_DEC    go to state 56
    DEF_A            go to state 5
    PROC_DEF         go to state 6
    FUNC_DEF         go to state 7
    DEC_INNER_BLOCK  go to state 106
    NEW_DECLARE      go to state 66
    VAR_DECLARE      go to state 67
    VF               go to state 68


State 67

   73 NEW_DECLARE: VAR_DECLARE .
   76 VAR_DECLARE: VAR_DECLARE . VF

    VAR  shift, and go to state 44

    VAR       [reduce using rule 73 (NEW_DECLARE)]
    $default  reduce using rule 73 (NEW_DECLARE)

    VF  go to state 107


State 68

   75 VAR_DECLARE: VF .

    $default  reduce using rule 75 (VAR_DECLARE)


State 69

   17 EXPRASION: CONST .

    $default  reduce using rule 17 (EXPRASION)


State 70

    2 MAIN_END: PROC MAIN '(' ')' . COMPUND_STATMENT_PROC

    '{'  shift, and go to state 23

    COMPUND_STATMENT_PROC  go to state 108


State 71

   14 INNER_ARGS: ID ',' INNER_ARGS .

    $default  reduce using rule 14 (INNER_ARGS)


State 72

   11 OUT_ARGES: INNER_ARGS ':' TYPE .
   12          | INNER_ARGS ':' TYPE . ';' OUT_ARGES

    ';'  shift, and go to state 109

    $default  reduce using rule 11 (OUT_ARGES)


State 73

   84 TYPE: STRING '[' . INT_NUM ']'

    INT_NUM  shift, and go to state 110


State 74

   15 FUNC_BLOCK: '{' . RETURN EXPRASION ';' '}'
   16           | '{' . INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

    NULLA    shift, and go to state 38
    IF       shift, and go to state 39
    FOR      shift, and go to state 40
    WHILE    shift, and go to state 41
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    RETURN   shift, and go to state 111
    VAR      shift, and go to state 44
    FUNC     shift, and go to state 1
    PROC     shift, and go to state 2
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '{'      shift, and go to state 23
    '|'      shift, and go to state 55

    FUNC_PROC_DEC           go to state 56
    DEF_A                   go to state 5
    PROC_DEF                go to state 6
    FUNC_DEF                go to state 7
    EXPRASION               go to state 57
    FUNC_ACTIVE             go to state 58
    STASTMENT_LIST          go to state 59
    IF_STASTMENT            go to state 60
    STASTMENT               go to state 61
    LOOP_STATMENT           go to state 62
    COMPUND_STATMENT_PROC   go to state 63
    INNER_COMPUND_STATMENT  go to state 112
    DEC_INNER_BLOCK         go to state 65
    NEW_DECLARE             go to state 66
    VAR_DECLARE             go to state 67
    VF                      go to state 68
    CONST                   go to state 69


State 75

    8 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK .

    $default  reduce using rule 8 (FUNC_DEF)


State 76

   58 IF_STASTMENT: IF '(' . EXPRASION ')' STASTMENT ELSE STASTMENT
   59             | IF '(' . EXPRASION ')' STASTMENT

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 113
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 77

   65 LOOP_STATMENT: FOR '(' . EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 114
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 78

   64 LOOP_STATMENT: WHILE '(' . EXPRASION ')' STASTMENT

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 115
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 79

   78 VFDEC: INNER_ARGS . ':' TYPE ';'
   79      | INNER_ARGS . ':' TYPE ';' VFDEC

    ':'  shift, and go to state 116


State 80

   77 VF: VAR VFDEC .

    $default  reduce using rule 77 (VF)


State 81

   48 FUNC_ACTIVE: ID '(' . ')'
   49            | ID '(' . FUNC_ACTIVE_INNER_ARGES ')'

    NULLA    shift, and go to state 38
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 117
    ')'      shift, and go to state 118

    FUNC_ACTIVE              go to state 119
    FUNC_ACTIVE_INNER_ARGES  go to state 120
    CONST                    go to state 121


State 82

   26 EXPRASION: ID '[' . EXPRASION ']' '=' VALUE

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 122
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 83

   27 EXPRASION: ID '=' . EXPRASION

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 123
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 84

   24 EXPRASION: '-' EXPRASION .
   28          | EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 93

    NE_OP     [reduce using rule 24 (EXPRASION)]
    $default  reduce using rule 24 (EXPRASION)


State 85

   25 EXPRASION: '!' EXPRASION .
   28          | EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 93

    NE_OP     [reduce using rule 25 (EXPRASION)]
    $default  reduce using rule 25 (EXPRASION)


State 86

   22 EXPRASION: '^' EXPRASION .
   28          | EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 93

    NE_OP     [reduce using rule 22 (EXPRASION)]
    $default  reduce using rule 22 (EXPRASION)


State 87

   23 EXPRASION: '&' EXPRASION .
   28          | EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 93

    NE_OP     [reduce using rule 23 (EXPRASION)]
    $default  reduce using rule 23 (EXPRASION)


State 88

   18 EXPRASION: '(' EXPRASION . ')'
   28          | EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 90
    GE_OP   shift, and go to state 91
    SE_OP   shift, and go to state 92
    NE_OP   shift, and go to state 93
    OR_OP   shift, and go to state 94
    EQL_OP  shift, and go to state 95
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '*'     shift, and go to state 99
    '/'     shift, and go to state 100
    '>'     shift, and go to state 101
    '<'     shift, and go to state 102
    ')'     shift, and go to state 124


State 89

   28 EXPRASION: EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE
   41          | '|' EXPRASION . '|'

    AND_OP  shift, and go to state 90
    GE_OP   shift, and go to state 91
    SE_OP   shift, and go to state 92
    NE_OP   shift, and go to state 93
    OR_OP   shift, and go to state 94
    EQL_OP  shift, and go to state 95
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '*'     shift, and go to state 99
    '/'     shift, and go to state 100
    '>'     shift, and go to state 101
    '<'     shift, and go to state 102
    '|'     shift, and go to state 125


State 90

   29 EXPRASION: EXPRASION AND_OP . VALUE

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 126
    FALSE    shift, and go to state 127
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 128
    '('      shift, and go to state 129

    VALUE        go to state 130
    FUNC_ACTIVE  go to state 131
    CONST        go to state 132


State 91

   36 EXPRASION: EXPRASION GE_OP . VALUE

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 126
    FALSE    shift, and go to state 127
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 128
    '('      shift, and go to state 129

    VALUE        go to state 133
    FUNC_ACTIVE  go to state 131
    CONST        go to state 132


State 92

   37 EXPRASION: EXPRASION SE_OP . VALUE

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 126
    FALSE    shift, and go to state 127
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 128
    '('      shift, and go to state 129

    VALUE        go to state 134
    FUNC_ACTIVE  go to state 131
    CONST        go to state 132


State 93

   28 EXPRASION: EXPRASION NE_OP . VALUE

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 126
    FALSE    shift, and go to state 127
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 128
    '('      shift, and go to state 129

    VALUE        go to state 135
    FUNC_ACTIVE  go to state 131
    CONST        go to state 132


State 94

   30 EXPRASION: EXPRASION OR_OP . VALUE

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 126
    FALSE    shift, and go to state 127
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 128
    '('      shift, and go to state 129

    VALUE        go to state 136
    FUNC_ACTIVE  go to state 131
    CONST        go to state 132


State 95

   35 EXPRASION: EXPRASION EQL_OP . VALUE

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 126
    FALSE    shift, and go to state 127
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 128
    '('      shift, and go to state 129

    VALUE        go to state 137
    FUNC_ACTIVE  go to state 131
    CONST        go to state 132


State 96

   61 STASTMENT: EXPRASION ';' .

    $default  reduce using rule 61 (STASTMENT)


State 97

   31 EXPRASION: EXPRASION '+' . VALUE

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 126
    FALSE    shift, and go to state 127
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 128
    '('      shift, and go to state 129

    VALUE        go to state 138
    FUNC_ACTIVE  go to state 131
    CONST        go to state 132


State 98

   32 EXPRASION: EXPRASION '-' . VALUE

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 126
    FALSE    shift, and go to state 127
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 128
    '('      shift, and go to state 129

    VALUE        go to state 139
    FUNC_ACTIVE  go to state 131
    CONST        go to state 132


State 99

   34 EXPRASION: EXPRASION '*' . VALUE

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 126
    FALSE    shift, and go to state 127
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 128
    '('      shift, and go to state 129

    VALUE        go to state 140
    FUNC_ACTIVE  go to state 131
    CONST        go to state 132


State 100

   33 EXPRASION: EXPRASION '/' . VALUE

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 126
    FALSE    shift, and go to state 127
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 128
    '('      shift, and go to state 129

    VALUE        go to state 141
    FUNC_ACTIVE  go to state 131
    CONST        go to state 132


State 101

   38 EXPRASION: EXPRASION '>' . VALUE

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 126
    FALSE    shift, and go to state 127
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 128
    '('      shift, and go to state 129

    VALUE        go to state 142
    FUNC_ACTIVE  go to state 131
    CONST        go to state 132


State 102

   39 EXPRASION: EXPRASION '<' . VALUE

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 126
    FALSE    shift, and go to state 127
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 128
    '('      shift, and go to state 129

    VALUE        go to state 143
    FUNC_ACTIVE  go to state 131
    CONST        go to state 132


State 103

   56 STASTMENT_LIST: STASTMENT_LIST STASTMENT .

    $default  reduce using rule 56 (STASTMENT_LIST)


State 104

   67 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT '}' .

    $default  reduce using rule 67 (COMPUND_STATMENT_PROC)


State 105

   56 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   70 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK STASTMENT_LIST .

    NULLA    shift, and go to state 38
    IF       shift, and go to state 39
    FOR      shift, and go to state 40
    WHILE    shift, and go to state 41
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '{'      shift, and go to state 23
    '|'      shift, and go to state 55

    $default  reduce using rule 70 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 57
    FUNC_ACTIVE            go to state 58
    IF_STASTMENT           go to state 60
    STASTMENT              go to state 103
    LOOP_STATMENT          go to state 62
    COMPUND_STATMENT_PROC  go to state 63
    CONST                  go to state 69


State 106

   71 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK .

    $default  reduce using rule 71 (DEC_INNER_BLOCK)


State 107

   76 VAR_DECLARE: VAR_DECLARE VF .

    $default  reduce using rule 76 (VAR_DECLARE)


State 108

    2 MAIN_END: PROC MAIN '(' ')' COMPUND_STATMENT_PROC .

    $default  reduce using rule 2 (MAIN_END)


State 109

   12 OUT_ARGES: INNER_ARGS ':' TYPE ';' . OUT_ARGES

    ID  shift, and go to state 18

    OUT_ARGES   go to state 144
    INNER_ARGS  go to state 21


State 110

   84 TYPE: STRING '[' INT_NUM . ']'

    ']'  shift, and go to state 145


State 111

   15 FUNC_BLOCK: '{' RETURN . EXPRASION ';' '}'

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 146
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 112

   16 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT . RETURN EXPRASION ';' '}'

    RETURN  shift, and go to state 147


State 113

   28 EXPRASION: EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE
   58 IF_STASTMENT: IF '(' EXPRASION . ')' STASTMENT ELSE STASTMENT
   59             | IF '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 90
    GE_OP   shift, and go to state 91
    SE_OP   shift, and go to state 92
    NE_OP   shift, and go to state 93
    OR_OP   shift, and go to state 94
    EQL_OP  shift, and go to state 95
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '*'     shift, and go to state 99
    '/'     shift, and go to state 100
    '>'     shift, and go to state 101
    '<'     shift, and go to state 102
    ')'     shift, and go to state 148


State 114

   28 EXPRASION: EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE
   65 LOOP_STATMENT: FOR '(' EXPRASION . ';' EXPRASION ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 90
    GE_OP   shift, and go to state 91
    SE_OP   shift, and go to state 92
    NE_OP   shift, and go to state 93
    OR_OP   shift, and go to state 94
    EQL_OP  shift, and go to state 95
    ';'     shift, and go to state 149
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '*'     shift, and go to state 99
    '/'     shift, and go to state 100
    '>'     shift, and go to state 101
    '<'     shift, and go to state 102


State 115

   28 EXPRASION: EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE
   64 LOOP_STATMENT: WHILE '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 90
    GE_OP   shift, and go to state 91
    SE_OP   shift, and go to state 92
    NE_OP   shift, and go to state 93
    OR_OP   shift, and go to state 94
    EQL_OP  shift, and go to state 95
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '*'     shift, and go to state 99
    '/'     shift, and go to state 100
    '>'     shift, and go to state 101
    '<'     shift, and go to state 102
    ')'     shift, and go to state 150


State 116

   78 VFDEC: INNER_ARGS ':' . TYPE ';'
   79      | INNER_ARGS ':' . TYPE ';' VFDEC

    CHAR         shift, and go to state 29
    REAL         shift, and go to state 30
    INT          shift, and go to state 31
    BOOL         shift, and go to state 32
    STRING       shift, and go to state 33
    CHAR_POINER  shift, and go to state 34
    REAL_POINER  shift, and go to state 35
    INT_POINER   shift, and go to state 36

    TYPE  go to state 151


State 117

   48 FUNC_ACTIVE: ID . '(' ')'
   49            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'
   50 FUNC_ACTIVE_INNER_ARGES: ID .
   53                        | ID . ',' FUNC_ACTIVE_INNER_ARGES

    '('  shift, and go to state 81
    ','  shift, and go to state 152

    $default  reduce using rule 50 (FUNC_ACTIVE_INNER_ARGES)


State 118

   48 FUNC_ACTIVE: ID '(' ')' .

    $default  reduce using rule 48 (FUNC_ACTIVE)


State 119

   51 FUNC_ACTIVE_INNER_ARGES: FUNC_ACTIVE .
   55                        | FUNC_ACTIVE . ',' FUNC_ACTIVE_INNER_ARGES

    ','  shift, and go to state 153

    $default  reduce using rule 51 (FUNC_ACTIVE_INNER_ARGES)


State 120

   49 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES . ')'

    ')'  shift, and go to state 154


State 121

   52 FUNC_ACTIVE_INNER_ARGES: CONST .
   54                        | CONST . ',' FUNC_ACTIVE_INNER_ARGES

    ','  shift, and go to state 155

    $default  reduce using rule 52 (FUNC_ACTIVE_INNER_ARGES)


State 122

   26 EXPRASION: ID '[' EXPRASION . ']' '=' VALUE
   28          | EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 90
    GE_OP   shift, and go to state 91
    SE_OP   shift, and go to state 92
    NE_OP   shift, and go to state 93
    OR_OP   shift, and go to state 94
    EQL_OP  shift, and go to state 95
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '*'     shift, and go to state 99
    '/'     shift, and go to state 100
    '>'     shift, and go to state 101
    '<'     shift, and go to state 102
    ']'     shift, and go to state 156


State 123

   27 EXPRASION: ID '=' EXPRASION .
   28          | EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 90
    GE_OP   shift, and go to state 91
    SE_OP   shift, and go to state 92
    NE_OP   shift, and go to state 93
    OR_OP   shift, and go to state 94
    EQL_OP  shift, and go to state 95
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '*'     shift, and go to state 99
    '/'     shift, and go to state 100
    '>'     shift, and go to state 101
    '<'     shift, and go to state 102

    AND_OP    [reduce using rule 27 (EXPRASION)]
    GE_OP     [reduce using rule 27 (EXPRASION)]
    SE_OP     [reduce using rule 27 (EXPRASION)]
    NE_OP     [reduce using rule 27 (EXPRASION)]
    OR_OP     [reduce using rule 27 (EXPRASION)]
    EQL_OP    [reduce using rule 27 (EXPRASION)]
    '+'       [reduce using rule 27 (EXPRASION)]
    '-'       [reduce using rule 27 (EXPRASION)]
    '*'       [reduce using rule 27 (EXPRASION)]
    '/'       [reduce using rule 27 (EXPRASION)]
    '>'       [reduce using rule 27 (EXPRASION)]
    '<'       [reduce using rule 27 (EXPRASION)]
    $default  reduce using rule 27 (EXPRASION)


State 124

   18 EXPRASION: '(' EXPRASION ')' .

    $default  reduce using rule 18 (EXPRASION)


State 125

   41 EXPRASION: '|' EXPRASION '|' .

    $default  reduce using rule 41 (EXPRASION)


State 126

   44 VALUE: TRUE .

    $default  reduce using rule 44 (VALUE)


State 127

   45 VALUE: FALSE .

    $default  reduce using rule 45 (VALUE)


State 128

   46 VALUE: ID .
   48 FUNC_ACTIVE: ID . '(' ')'
   49            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 81

    $default  reduce using rule 46 (VALUE)


State 129

   43 VALUE: '(' . EXPRASION ')'

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 157
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 130

   29 EXPRASION: EXPRASION AND_OP VALUE .

    $default  reduce using rule 29 (EXPRASION)


State 131

   47 VALUE: FUNC_ACTIVE .

    $default  reduce using rule 47 (VALUE)


State 132

   42 VALUE: CONST .

    $default  reduce using rule 42 (VALUE)


State 133

   36 EXPRASION: EXPRASION GE_OP VALUE .

    $default  reduce using rule 36 (EXPRASION)


State 134

   37 EXPRASION: EXPRASION SE_OP VALUE .

    $default  reduce using rule 37 (EXPRASION)


State 135

   28 EXPRASION: EXPRASION NE_OP VALUE .

    $default  reduce using rule 28 (EXPRASION)


State 136

   30 EXPRASION: EXPRASION OR_OP VALUE .

    $default  reduce using rule 30 (EXPRASION)


State 137

   35 EXPRASION: EXPRASION EQL_OP VALUE .

    $default  reduce using rule 35 (EXPRASION)


State 138

   31 EXPRASION: EXPRASION '+' VALUE .

    $default  reduce using rule 31 (EXPRASION)


State 139

   32 EXPRASION: EXPRASION '-' VALUE .

    $default  reduce using rule 32 (EXPRASION)


State 140

   34 EXPRASION: EXPRASION '*' VALUE .

    $default  reduce using rule 34 (EXPRASION)


State 141

   33 EXPRASION: EXPRASION '/' VALUE .

    $default  reduce using rule 33 (EXPRASION)


State 142

   38 EXPRASION: EXPRASION '>' VALUE .

    $default  reduce using rule 38 (EXPRASION)


State 143

   39 EXPRASION: EXPRASION '<' VALUE .

    $default  reduce using rule 39 (EXPRASION)


State 144

   12 OUT_ARGES: INNER_ARGS ':' TYPE ';' OUT_ARGES .

    $default  reduce using rule 12 (OUT_ARGES)


State 145

   84 TYPE: STRING '[' INT_NUM ']' .

    $default  reduce using rule 84 (TYPE)


State 146

   15 FUNC_BLOCK: '{' RETURN EXPRASION . ';' '}'
   28 EXPRASION: EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 90
    GE_OP   shift, and go to state 91
    SE_OP   shift, and go to state 92
    NE_OP   shift, and go to state 93
    OR_OP   shift, and go to state 94
    EQL_OP  shift, and go to state 95
    ';'     shift, and go to state 158
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '*'     shift, and go to state 99
    '/'     shift, and go to state 100
    '>'     shift, and go to state 101
    '<'     shift, and go to state 102


State 147

   16 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN . EXPRASION ';' '}'

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 159
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 148

   58 IF_STASTMENT: IF '(' EXPRASION ')' . STASTMENT ELSE STASTMENT
   59             | IF '(' EXPRASION ')' . STASTMENT

    NULLA    shift, and go to state 38
    IF       shift, and go to state 39
    FOR      shift, and go to state 40
    WHILE    shift, and go to state 41
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '{'      shift, and go to state 23
    '|'      shift, and go to state 55

    EXPRASION              go to state 57
    FUNC_ACTIVE            go to state 58
    IF_STASTMENT           go to state 60
    STASTMENT              go to state 160
    LOOP_STATMENT          go to state 62
    COMPUND_STATMENT_PROC  go to state 63
    CONST                  go to state 69


State 149

   65 LOOP_STATMENT: FOR '(' EXPRASION ';' . EXPRASION ';' EXPRASION ')' STASTMENT

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 161
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 150

   64 LOOP_STATMENT: WHILE '(' EXPRASION ')' . STASTMENT

    NULLA    shift, and go to state 38
    IF       shift, and go to state 39
    FOR      shift, and go to state 40
    WHILE    shift, and go to state 41
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '{'      shift, and go to state 23
    '|'      shift, and go to state 55

    EXPRASION              go to state 57
    FUNC_ACTIVE            go to state 58
    IF_STASTMENT           go to state 60
    STASTMENT              go to state 162
    LOOP_STATMENT          go to state 62
    COMPUND_STATMENT_PROC  go to state 63
    CONST                  go to state 69


State 151

   78 VFDEC: INNER_ARGS ':' TYPE . ';'
   79      | INNER_ARGS ':' TYPE . ';' VFDEC

    ';'  shift, and go to state 163


State 152

   53 FUNC_ACTIVE_INNER_ARGES: ID ',' . FUNC_ACTIVE_INNER_ARGES

    NULLA    shift, and go to state 38
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 117

    FUNC_ACTIVE              go to state 119
    FUNC_ACTIVE_INNER_ARGES  go to state 164
    CONST                    go to state 121


State 153

   55 FUNC_ACTIVE_INNER_ARGES: FUNC_ACTIVE ',' . FUNC_ACTIVE_INNER_ARGES

    NULLA    shift, and go to state 38
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 117

    FUNC_ACTIVE              go to state 119
    FUNC_ACTIVE_INNER_ARGES  go to state 165
    CONST                    go to state 121


State 154

   49 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES ')' .

    $default  reduce using rule 49 (FUNC_ACTIVE)


State 155

   54 FUNC_ACTIVE_INNER_ARGES: CONST ',' . FUNC_ACTIVE_INNER_ARGES

    NULLA    shift, and go to state 38
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 117

    FUNC_ACTIVE              go to state 119
    FUNC_ACTIVE_INNER_ARGES  go to state 166
    CONST                    go to state 121


State 156

   26 EXPRASION: ID '[' EXPRASION ']' . '=' VALUE

    '='  shift, and go to state 167


State 157

   28 EXPRASION: EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE
   43 VALUE: '(' EXPRASION . ')'

    AND_OP  shift, and go to state 90
    GE_OP   shift, and go to state 91
    SE_OP   shift, and go to state 92
    NE_OP   shift, and go to state 93
    OR_OP   shift, and go to state 94
    EQL_OP  shift, and go to state 95
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '*'     shift, and go to state 99
    '/'     shift, and go to state 100
    '>'     shift, and go to state 101
    '<'     shift, and go to state 102
    ')'     shift, and go to state 168


State 158

   15 FUNC_BLOCK: '{' RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 169


State 159

   16 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION . ';' '}'
   28 EXPRASION: EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 90
    GE_OP   shift, and go to state 91
    SE_OP   shift, and go to state 92
    NE_OP   shift, and go to state 93
    OR_OP   shift, and go to state 94
    EQL_OP  shift, and go to state 95
    ';'     shift, and go to state 170
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '*'     shift, and go to state 99
    '/'     shift, and go to state 100
    '>'     shift, and go to state 101
    '<'     shift, and go to state 102


State 160

   58 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT . ELSE STASTMENT
   59             | IF '(' EXPRASION ')' STASTMENT .

    ELSE  shift, and go to state 171

    $default  reduce using rule 59 (IF_STASTMENT)


State 161

   28 EXPRASION: EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE
   65 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION . ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 90
    GE_OP   shift, and go to state 91
    SE_OP   shift, and go to state 92
    NE_OP   shift, and go to state 93
    OR_OP   shift, and go to state 94
    EQL_OP  shift, and go to state 95
    ';'     shift, and go to state 172
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '*'     shift, and go to state 99
    '/'     shift, and go to state 100
    '>'     shift, and go to state 101
    '<'     shift, and go to state 102


State 162

   64 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT .

    $default  reduce using rule 64 (LOOP_STATMENT)


State 163

   78 VFDEC: INNER_ARGS ':' TYPE ';' .
   79      | INNER_ARGS ':' TYPE ';' . VFDEC

    ID  shift, and go to state 18

    ID        [reduce using rule 78 (VFDEC)]
    $default  reduce using rule 78 (VFDEC)

    INNER_ARGS  go to state 79
    VFDEC       go to state 173


State 164

   53 FUNC_ACTIVE_INNER_ARGES: ID ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 53 (FUNC_ACTIVE_INNER_ARGES)


State 165

   55 FUNC_ACTIVE_INNER_ARGES: FUNC_ACTIVE ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 55 (FUNC_ACTIVE_INNER_ARGES)


State 166

   54 FUNC_ACTIVE_INNER_ARGES: CONST ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 54 (FUNC_ACTIVE_INNER_ARGES)


State 167

   26 EXPRASION: ID '[' EXPRASION ']' '=' . VALUE

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 126
    FALSE    shift, and go to state 127
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 128
    '('      shift, and go to state 129

    VALUE        go to state 174
    FUNC_ACTIVE  go to state 131
    CONST        go to state 132


State 168

   43 VALUE: '(' EXPRASION ')' .

    $default  reduce using rule 43 (VALUE)


State 169

   15 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}' .

    $default  reduce using rule 15 (FUNC_BLOCK)


State 170

   16 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 175


State 171

   58 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE . STASTMENT

    NULLA    shift, and go to state 38
    IF       shift, and go to state 39
    FOR      shift, and go to state 40
    WHILE    shift, and go to state 41
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '{'      shift, and go to state 23
    '|'      shift, and go to state 55

    EXPRASION              go to state 57
    FUNC_ACTIVE            go to state 58
    IF_STASTMENT           go to state 60
    STASTMENT              go to state 176
    LOOP_STATMENT          go to state 62
    COMPUND_STATMENT_PROC  go to state 63
    CONST                  go to state 69


State 172

   65 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' . EXPRASION ')' STASTMENT

    NULLA    shift, and go to state 38
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '|'      shift, and go to state 55

    EXPRASION    go to state 177
    FUNC_ACTIVE  go to state 58
    CONST        go to state 69


State 173

   79 VFDEC: INNER_ARGS ':' TYPE ';' VFDEC .

    $default  reduce using rule 79 (VFDEC)


State 174

   26 EXPRASION: ID '[' EXPRASION ']' '=' VALUE .

    $default  reduce using rule 26 (EXPRASION)


State 175

   16 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}' .

    $default  reduce using rule 16 (FUNC_BLOCK)


State 176

   58 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT .

    $default  reduce using rule 58 (IF_STASTMENT)


State 177

   28 EXPRASION: EXPRASION . NE_OP VALUE
   29          | EXPRASION . AND_OP VALUE
   30          | EXPRASION . OR_OP VALUE
   31          | EXPRASION . '+' VALUE
   32          | EXPRASION . '-' VALUE
   33          | EXPRASION . '/' VALUE
   34          | EXPRASION . '*' VALUE
   35          | EXPRASION . EQL_OP VALUE
   36          | EXPRASION . GE_OP VALUE
   37          | EXPRASION . SE_OP VALUE
   38          | EXPRASION . '>' VALUE
   39          | EXPRASION . '<' VALUE
   65 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 90
    GE_OP   shift, and go to state 91
    SE_OP   shift, and go to state 92
    NE_OP   shift, and go to state 93
    OR_OP   shift, and go to state 94
    EQL_OP  shift, and go to state 95
    '+'     shift, and go to state 97
    '-'     shift, and go to state 98
    '*'     shift, and go to state 99
    '/'     shift, and go to state 100
    '>'     shift, and go to state 101
    '<'     shift, and go to state 102
    ')'     shift, and go to state 178


State 178

   65 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' . STASTMENT

    NULLA    shift, and go to state 38
    IF       shift, and go to state 39
    FOR      shift, and go to state 40
    WHILE    shift, and go to state 41
    TRUE     shift, and go to state 42
    FALSE    shift, and go to state 43
    INT_NUM  shift, and go to state 45
    R_NUM    shift, and go to state 46
    HEX_NUM  shift, and go to state 47
    ID       shift, and go to state 48
    '-'      shift, and go to state 49
    '!'      shift, and go to state 50
    '^'      shift, and go to state 51
    '&'      shift, and go to state 52
    '('      shift, and go to state 53
    '{'      shift, and go to state 23
    '|'      shift, and go to state 55

    EXPRASION              go to state 57
    FUNC_ACTIVE            go to state 58
    IF_STASTMENT           go to state 60
    STASTMENT              go to state 179
    LOOP_STATMENT          go to state 62
    COMPUND_STATMENT_PROC  go to state 63
    CONST                  go to state 69


State 179

   65 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT .

    $default  reduce using rule 65 (LOOP_STATMENT)
