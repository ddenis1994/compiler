Nonterminals useless in grammar

   RETURN_STATMENT
   COMPUND_STATMENT


Terminals unused in grammar

   FLOAT_POINER
   CHAR_POINTER
   REAL_POINTER
   INT_POINTER
   NULL_VALUE
   BOOL_VALUE
   test
   UFUNC


Rules useless in grammar

   95 RETURN_STATMENT: RETURN EXPRASION ';'

   96 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT RETURN_STATMENT '}'
   97                 | '{' RETURN_STATMENT '}'


State 133 conflicts: 12 shift/reduce


Grammar

    0 $accept: S $end

    1 S: MAINBLOCK

    2 MAIN_END: PROC MAIN '(' ')' COMPUND_STATMENT_PROC

    3 MAINBLOCK: FUNC_PROC_DEC MAIN_END
    4          | MAIN_END

    5 FUNC_PROC_DEC: DEF_A
    6              | FUNC_PROC_DEC DEF_A

    7 DEF_A: FUNC_DEF
    8      | PROC_DEF

    9 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC

   10 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK

   11 ARGES: '(' ')'
   12      | '(' OUT_ARGES ')'

   13 OUT_ARGES: INNER_ARGS ':' TYPE
   14          | INNER_ARGS ':' TYPE ';' OUT_ARGES

   15 INNER_ARGS: ID
   16           | ID ',' INNER_ARGS

   17 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}'
   18           | '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

   19 EXPRASION: CONST
   20          | '(' EXPRASION ')'
   21          | ID
   22          | '^' VALUE
   23          | '&' VALUE
   24          | '-' VALUE
   25          | '!' VALUE
   26          | ID '[' EXPRASION ']' '=' VALUE
   27          | ID '[' EXPRASION ']'
   28          | ID '=' EXPRASION
   29          | EXPRASION NE_OP VALUE
   30          | EXPRASION AND_OP VALUE
   31          | EXPRASION OR_OP VALUE
   32          | EXPRASION '+' VALUE
   33          | EXPRASION '-' VALUE
   34          | EXPRASION '/' VALUE
   35          | EXPRASION '*' VALUE
   36          | EXPRASION EQL_OP VALUE
   37          | EXPRASION GE_OP VALUE
   38          | EXPRASION SE_OP VALUE
   39          | EXPRASION '>' VALUE
   40          | EXPRASION '<' VALUE
   41          | FUNC_ACTIVE
   42          | '|' EXPRASION '|'

   43 VALUE: ID '[' EXPRASION ']'
   44      | CONST
   45      | '(' EXPRASION ')'
   46      | TRUE
   47      | FALSE
   48      | ID
   49      | FUNC_ACTIVE
   50      | '|' VALUE '|'
   51      | '^' VALUE
   52      | '&' VALUE
   53      | '-' VALUE
   54      | '!' VALUE

   55 FUNC_ACTIVE: ID '(' ')'
   56            | ID '(' FUNC_ACTIVE_INNER_ARGES ')'

   57 FUNC_ACTIVE_INNER_ARGES: EXPRASION
   58                        | EXPRASION ',' FUNC_ACTIVE_INNER_ARGES

   59 STASTMENT_LIST: STASTMENT_LIST STASTMENT
   60               | STASTMENT

   61 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   62             | IF '(' EXPRASION ')' STASTMENT

   63 STASTMENT: COMPUND_STATMENT_PROC
   64          | EXPRASION ';'
   65          | IF_STASTMENT
   66          | LOOP_STATMENT

   67 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT
   68              | FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

   69 COMPUND_STATMENT_PROC: '{' '}'
   70                      | '{' INNER_COMPUND_STATMENT '}'

   71 INNER_COMPUND_STATMENT: STASTMENT_LIST
   72                       | DEC_INNER_BLOCK
   73                       | DEC_INNER_BLOCK STASTMENT_LIST

   74 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK
   75                | NEW_DECLARE

   76 NEW_DECLARE: VF
   77            | DEF_A

   78 VF: VAR VFDEC

   79 VFDEC: INNER_ARGS ':' TYPE ';'

   80 CONST: INT_NUM
   81      | R_NUM
   82      | HEX_NUM
   83      | NULLA
   84      | CHAR_VALUE
   85      | STRING_VALUE
   86      | BOOL_VAL

   87 TYPE: STRING '[' INT_NUM ']'
   88     | BOOL
   89     | INT
   90     | REAL
   91     | CHAR
   92     | CHAR_POINER
   93     | REAL_POINER
   94     | INT_POINER


Terminals, with rules where they appear

$end (0) 0
'!' (33) 25 54
'&' (38) 23 52
'(' (40) 2 11 12 20 45 55 56 61 62 67 68
')' (41) 2 11 12 20 45 55 56 61 62 67 68
'*' (42) 35
'+' (43) 32
',' (44) 16 58
'-' (45) 24 33 53
'/' (47) 34
':' (58) 13 14 79
';' (59) 14 17 18 64 68 79
'<' (60) 40
'=' (61) 26 28
'>' (62) 39
'[' (91) 26 27 43 87
']' (93) 26 27 43 87
'^' (94) 22 51
'{' (123) 17 18 69 70
'|' (124) 42 50
'}' (125) 17 18 69 70
error (256)
CHAR <String> (258) 91
REAL <String> (259) 90
INT <String> (260) 89
BOOL <String> (261) 88
STRING <String> (262) 87
CHAR_POINER <String> (263) 92
REAL_POINER <String> (264) 93
FLOAT_POINER <String> (265)
INT_POINER <String> (266) 94
CHAR_POINTER <String> (267)
REAL_POINTER <String> (268)
INT_POINTER <String> (269)
NULLA <String> (270) 83
ELSE (271) 61
IF (272) 61 62
FOR (273) 68
WHILE (274) 67
TRUE (275) 46
FALSE (276) 47
RETURN (277) 10 17 18
MAIN (278) 2
VAR <String> (279) 78
FUNC <String> (280) 10
PROC <String> (281) 2 9
NULL_VALUE (282)
AND_OP (283) 30
GE_OP (284) 37
SE_OP (285) 38
NE_OP (286) 29
OR_OP (287) 31
EQL_OP (288) 36
BOOL_VALUE <String> (289)
CHAR_VALUE <String> (290) 84
STRING_VALUE <String> (291) 85
INT_NUM <String> (292) 80 87
R_NUM <String> (293) 81
HEX_NUM <String> (294) 82
ID <String> (295) 9 10 15 16 21 26 27 28 43 48 55 56
BOOL_VAL <String> (296) 86
IFX (297)
test (298)
UMINUS (299)
UFUNC (300)


Nonterminals, with rules where they appear

$accept (66)
    on left: 0
S <Node> (67)
    on left: 1, on right: 0
MAIN_END <Node> (68)
    on left: 2, on right: 3 4
MAINBLOCK <Node> (69)
    on left: 3 4, on right: 1
FUNC_PROC_DEC <Node> (70)
    on left: 5 6, on right: 3 6
DEF_A <Node> (71)
    on left: 7 8, on right: 5 6 77
PROC_DEF <Node> (72)
    on left: 9, on right: 8
FUNC_DEF <Node> (73)
    on left: 10, on right: 7
ARGES <Node> (74)
    on left: 11 12, on right: 9 10
OUT_ARGES <Node> (75)
    on left: 13 14, on right: 12 14
INNER_ARGS <Node> (76)
    on left: 15 16, on right: 13 14 16 79
FUNC_BLOCK <Node> (77)
    on left: 17 18, on right: 10
EXPRASION <Node> (78)
    on left: 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36
    37 38 39 40 41 42, on right: 17 18 20 26 27 28 29 30 31 32 33 34
    35 36 37 38 39 40 42 43 45 57 58 61 62 64 67 68
VALUE <Node> (79)
    on left: 43 44 45 46 47 48 49 50 51 52 53 54, on right: 22 23 24
    25 26 29 30 31 32 33 34 35 36 37 38 39 40 50 51 52 53 54
FUNC_ACTIVE <Node> (80)
    on left: 55 56, on right: 41 49
FUNC_ACTIVE_INNER_ARGES <Node> (81)
    on left: 57 58, on right: 56 58
STASTMENT_LIST <Node> (82)
    on left: 59 60, on right: 59 71 73
IF_STASTMENT <Node> (83)
    on left: 61 62, on right: 65
STASTMENT <Node> (84)
    on left: 63 64 65 66, on right: 59 60 61 62 67 68
LOOP_STATMENT <Node> (85)
    on left: 67 68, on right: 66
COMPUND_STATMENT_PROC <Node> (86)
    on left: 69 70, on right: 2 9 63
INNER_COMPUND_STATMENT <Node> (87)
    on left: 71 72 73, on right: 18 70
DEC_INNER_BLOCK <Node> (88)
    on left: 74 75, on right: 72 73 74
NEW_DECLARE <Node> (89)
    on left: 76 77, on right: 74 75
VF <Node> (90)
    on left: 78, on right: 76
VFDEC <Node> (91)
    on left: 79, on right: 78
CONST <Node> (92)
    on left: 80 81 82 83 84 85 86, on right: 19 44
TYPE <String> (93)
    on left: 87 88 89 90 91 92 93 94, on right: 10 13 14 79


State 0

    0 $accept: . S $end

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    S              go to state 3
    MAIN_END       go to state 4
    MAINBLOCK      go to state 5
    FUNC_PROC_DEC  go to state 6
    DEF_A          go to state 7
    PROC_DEF       go to state 8
    FUNC_DEF       go to state 9


State 1

   10 FUNC_DEF: FUNC . ID ARGES RETURN TYPE FUNC_BLOCK

    ID  shift, and go to state 10


State 2

    2 MAIN_END: PROC . MAIN '(' ')' COMPUND_STATMENT_PROC
    9 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT_PROC

    MAIN  shift, and go to state 11
    ID    shift, and go to state 12


State 3

    0 $accept: S . $end

    $end  shift, and go to state 13


State 4

    4 MAINBLOCK: MAIN_END .

    $default  reduce using rule 4 (MAINBLOCK)


State 5

    1 S: MAINBLOCK .

    $default  reduce using rule 1 (S)


State 6

    3 MAINBLOCK: FUNC_PROC_DEC . MAIN_END
    6 FUNC_PROC_DEC: FUNC_PROC_DEC . DEF_A

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    MAIN_END  go to state 14
    DEF_A     go to state 15
    PROC_DEF  go to state 8
    FUNC_DEF  go to state 9


State 7

    5 FUNC_PROC_DEC: DEF_A .

    $default  reduce using rule 5 (FUNC_PROC_DEC)


State 8

    8 DEF_A: PROC_DEF .

    $default  reduce using rule 8 (DEF_A)


State 9

    7 DEF_A: FUNC_DEF .

    $default  reduce using rule 7 (DEF_A)


State 10

   10 FUNC_DEF: FUNC ID . ARGES RETURN TYPE FUNC_BLOCK

    '('  shift, and go to state 16

    ARGES  go to state 17


State 11

    2 MAIN_END: PROC MAIN . '(' ')' COMPUND_STATMENT_PROC

    '('  shift, and go to state 18


State 12

    9 PROC_DEF: PROC ID . ARGES COMPUND_STATMENT_PROC

    '('  shift, and go to state 16

    ARGES  go to state 19


State 13

    0 $accept: S $end .

    $default  accept


State 14

    3 MAINBLOCK: FUNC_PROC_DEC MAIN_END .

    $default  reduce using rule 3 (MAINBLOCK)


State 15

    6 FUNC_PROC_DEC: FUNC_PROC_DEC DEF_A .

    $default  reduce using rule 6 (FUNC_PROC_DEC)


State 16

   11 ARGES: '(' . ')'
   12      | '(' . OUT_ARGES ')'

    ID   shift, and go to state 20
    ')'  shift, and go to state 21

    OUT_ARGES   go to state 22
    INNER_ARGS  go to state 23


State 17

   10 FUNC_DEF: FUNC ID ARGES . RETURN TYPE FUNC_BLOCK

    RETURN  shift, and go to state 24


State 18

    2 MAIN_END: PROC MAIN '(' . ')' COMPUND_STATMENT_PROC

    ')'  shift, and go to state 25


State 19

    9 PROC_DEF: PROC ID ARGES . COMPUND_STATMENT_PROC

    '{'  shift, and go to state 26

    COMPUND_STATMENT_PROC  go to state 27


State 20

   15 INNER_ARGS: ID .
   16           | ID . ',' INNER_ARGS

    ','  shift, and go to state 28

    $default  reduce using rule 15 (INNER_ARGS)


State 21

   11 ARGES: '(' ')' .

    $default  reduce using rule 11 (ARGES)


State 22

   12 ARGES: '(' OUT_ARGES . ')'

    ')'  shift, and go to state 29


State 23

   13 OUT_ARGES: INNER_ARGS . ':' TYPE
   14          | INNER_ARGS . ':' TYPE ';' OUT_ARGES

    ':'  shift, and go to state 30


State 24

   10 FUNC_DEF: FUNC ID ARGES RETURN . TYPE FUNC_BLOCK

    CHAR         shift, and go to state 31
    REAL         shift, and go to state 32
    INT          shift, and go to state 33
    BOOL         shift, and go to state 34
    STRING       shift, and go to state 35
    CHAR_POINER  shift, and go to state 36
    REAL_POINER  shift, and go to state 37
    INT_POINER   shift, and go to state 38

    TYPE  go to state 39


State 25

    2 MAIN_END: PROC MAIN '(' ')' . COMPUND_STATMENT_PROC

    '{'  shift, and go to state 26

    COMPUND_STATMENT_PROC  go to state 40


State 26

   69 COMPUND_STATMENT_PROC: '{' . '}'
   70                      | '{' . INNER_COMPUND_STATMENT '}'

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    VAR           shift, and go to state 45
    FUNC          shift, and go to state 1
    PROC          shift, and go to state 46
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '{'           shift, and go to state 26
    '}'           shift, and go to state 59
    '|'           shift, and go to state 60

    DEF_A                   go to state 61
    PROC_DEF                go to state 8
    FUNC_DEF                go to state 9
    EXPRASION               go to state 62
    FUNC_ACTIVE             go to state 63
    STASTMENT_LIST          go to state 64
    IF_STASTMENT            go to state 65
    STASTMENT               go to state 66
    LOOP_STATMENT           go to state 67
    COMPUND_STATMENT_PROC   go to state 68
    INNER_COMPUND_STATMENT  go to state 69
    DEC_INNER_BLOCK         go to state 70
    NEW_DECLARE             go to state 71
    VF                      go to state 72
    CONST                   go to state 73


State 27

    9 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC .

    $default  reduce using rule 9 (PROC_DEF)


State 28

   16 INNER_ARGS: ID ',' . INNER_ARGS

    ID  shift, and go to state 20

    INNER_ARGS  go to state 74


State 29

   12 ARGES: '(' OUT_ARGES ')' .

    $default  reduce using rule 12 (ARGES)


State 30

   13 OUT_ARGES: INNER_ARGS ':' . TYPE
   14          | INNER_ARGS ':' . TYPE ';' OUT_ARGES

    CHAR         shift, and go to state 31
    REAL         shift, and go to state 32
    INT          shift, and go to state 33
    BOOL         shift, and go to state 34
    STRING       shift, and go to state 35
    CHAR_POINER  shift, and go to state 36
    REAL_POINER  shift, and go to state 37
    INT_POINER   shift, and go to state 38

    TYPE  go to state 75


State 31

   91 TYPE: CHAR .

    $default  reduce using rule 91 (TYPE)


State 32

   90 TYPE: REAL .

    $default  reduce using rule 90 (TYPE)


State 33

   89 TYPE: INT .

    $default  reduce using rule 89 (TYPE)


State 34

   88 TYPE: BOOL .

    $default  reduce using rule 88 (TYPE)


State 35

   87 TYPE: STRING . '[' INT_NUM ']'

    '['  shift, and go to state 76


State 36

   92 TYPE: CHAR_POINER .

    $default  reduce using rule 92 (TYPE)


State 37

   93 TYPE: REAL_POINER .

    $default  reduce using rule 93 (TYPE)


State 38

   94 TYPE: INT_POINER .

    $default  reduce using rule 94 (TYPE)


State 39

   10 FUNC_DEF: FUNC ID ARGES RETURN TYPE . FUNC_BLOCK

    '{'  shift, and go to state 77

    FUNC_BLOCK  go to state 78


State 40

    2 MAIN_END: PROC MAIN '(' ')' COMPUND_STATMENT_PROC .

    $default  reduce using rule 2 (MAIN_END)


State 41

   83 CONST: NULLA .

    $default  reduce using rule 83 (CONST)


State 42

   61 IF_STASTMENT: IF . '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   62             | IF . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 79


State 43

   68 LOOP_STATMENT: FOR . '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    '('  shift, and go to state 80


State 44

   67 LOOP_STATMENT: WHILE . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 81


State 45

   78 VF: VAR . VFDEC

    ID  shift, and go to state 20

    INNER_ARGS  go to state 82
    VFDEC       go to state 83


State 46

    9 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT_PROC

    ID  shift, and go to state 12


State 47

   84 CONST: CHAR_VALUE .

    $default  reduce using rule 84 (CONST)


State 48

   85 CONST: STRING_VALUE .

    $default  reduce using rule 85 (CONST)


State 49

   80 CONST: INT_NUM .

    $default  reduce using rule 80 (CONST)


State 50

   81 CONST: R_NUM .

    $default  reduce using rule 81 (CONST)


State 51

   82 CONST: HEX_NUM .

    $default  reduce using rule 82 (CONST)


State 52

   21 EXPRASION: ID .
   26          | ID . '[' EXPRASION ']' '=' VALUE
   27          | ID . '[' EXPRASION ']'
   28          | ID . '=' EXPRASION
   55 FUNC_ACTIVE: ID . '(' ')'
   56            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 84
    '['  shift, and go to state 85
    '='  shift, and go to state 86

    $default  reduce using rule 21 (EXPRASION)


State 53

   86 CONST: BOOL_VAL .

    $default  reduce using rule 86 (CONST)


State 54

   24 EXPRASION: '-' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 96
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 55

   25 EXPRASION: '!' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 99
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 56

   22 EXPRASION: '^' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 100
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 57

   23 EXPRASION: '&' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 101
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 58

   20 EXPRASION: '(' . EXPRASION ')'

    NULLA         shift, and go to state 41
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '|'           shift, and go to state 60

    EXPRASION    go to state 102
    FUNC_ACTIVE  go to state 63
    CONST        go to state 73


State 59

   69 COMPUND_STATMENT_PROC: '{' '}' .

    $default  reduce using rule 69 (COMPUND_STATMENT_PROC)


State 60

   42 EXPRASION: '|' . EXPRASION '|'

    NULLA         shift, and go to state 41
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '|'           shift, and go to state 60

    EXPRASION    go to state 103
    FUNC_ACTIVE  go to state 63
    CONST        go to state 73


State 61

   77 NEW_DECLARE: DEF_A .

    $default  reduce using rule 77 (NEW_DECLARE)


State 62

   29 EXPRASION: EXPRASION . NE_OP VALUE
   30          | EXPRASION . AND_OP VALUE
   31          | EXPRASION . OR_OP VALUE
   32          | EXPRASION . '+' VALUE
   33          | EXPRASION . '-' VALUE
   34          | EXPRASION . '/' VALUE
   35          | EXPRASION . '*' VALUE
   36          | EXPRASION . EQL_OP VALUE
   37          | EXPRASION . GE_OP VALUE
   38          | EXPRASION . SE_OP VALUE
   39          | EXPRASION . '>' VALUE
   40          | EXPRASION . '<' VALUE
   64 STASTMENT: EXPRASION . ';'

    AND_OP  shift, and go to state 104
    GE_OP   shift, and go to state 105
    SE_OP   shift, and go to state 106
    NE_OP   shift, and go to state 107
    OR_OP   shift, and go to state 108
    EQL_OP  shift, and go to state 109
    ';'     shift, and go to state 110
    '+'     shift, and go to state 111
    '-'     shift, and go to state 112
    '*'     shift, and go to state 113
    '/'     shift, and go to state 114
    '>'     shift, and go to state 115
    '<'     shift, and go to state 116


State 63

   41 EXPRASION: FUNC_ACTIVE .

    $default  reduce using rule 41 (EXPRASION)


State 64

   59 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   71 INNER_COMPUND_STATMENT: STASTMENT_LIST .

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '{'           shift, and go to state 26
    '|'           shift, and go to state 60

    $default  reduce using rule 71 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 62
    FUNC_ACTIVE            go to state 63
    IF_STASTMENT           go to state 65
    STASTMENT              go to state 117
    LOOP_STATMENT          go to state 67
    COMPUND_STATMENT_PROC  go to state 68
    CONST                  go to state 73


State 65

   65 STASTMENT: IF_STASTMENT .

    $default  reduce using rule 65 (STASTMENT)


State 66

   60 STASTMENT_LIST: STASTMENT .

    $default  reduce using rule 60 (STASTMENT_LIST)


State 67

   66 STASTMENT: LOOP_STATMENT .

    $default  reduce using rule 66 (STASTMENT)


State 68

   63 STASTMENT: COMPUND_STATMENT_PROC .

    $default  reduce using rule 63 (STASTMENT)


State 69

   70 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT . '}'

    '}'  shift, and go to state 118


State 70

   72 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK .
   73                       | DEC_INNER_BLOCK . STASTMENT_LIST

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '{'           shift, and go to state 26
    '|'           shift, and go to state 60

    $default  reduce using rule 72 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 62
    FUNC_ACTIVE            go to state 63
    STASTMENT_LIST         go to state 119
    IF_STASTMENT           go to state 65
    STASTMENT              go to state 66
    LOOP_STATMENT          go to state 67
    COMPUND_STATMENT_PROC  go to state 68
    CONST                  go to state 73


State 71

   74 DEC_INNER_BLOCK: NEW_DECLARE . DEC_INNER_BLOCK
   75                | NEW_DECLARE .

    VAR   shift, and go to state 45
    FUNC  shift, and go to state 1
    PROC  shift, and go to state 46

    $default  reduce using rule 75 (DEC_INNER_BLOCK)

    DEF_A            go to state 61
    PROC_DEF         go to state 8
    FUNC_DEF         go to state 9
    DEC_INNER_BLOCK  go to state 120
    NEW_DECLARE      go to state 71
    VF               go to state 72


State 72

   76 NEW_DECLARE: VF .

    $default  reduce using rule 76 (NEW_DECLARE)


State 73

   19 EXPRASION: CONST .

    $default  reduce using rule 19 (EXPRASION)


State 74

   16 INNER_ARGS: ID ',' INNER_ARGS .

    $default  reduce using rule 16 (INNER_ARGS)


State 75

   13 OUT_ARGES: INNER_ARGS ':' TYPE .
   14          | INNER_ARGS ':' TYPE . ';' OUT_ARGES

    ';'  shift, and go to state 121

    $default  reduce using rule 13 (OUT_ARGES)


State 76

   87 TYPE: STRING '[' . INT_NUM ']'

    INT_NUM  shift, and go to state 122


State 77

   17 FUNC_BLOCK: '{' . RETURN EXPRASION ';' '}'
   18           | '{' . INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    RETURN        shift, and go to state 123
    VAR           shift, and go to state 45
    FUNC          shift, and go to state 1
    PROC          shift, and go to state 46
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '{'           shift, and go to state 26
    '|'           shift, and go to state 60

    DEF_A                   go to state 61
    PROC_DEF                go to state 8
    FUNC_DEF                go to state 9
    EXPRASION               go to state 62
    FUNC_ACTIVE             go to state 63
    STASTMENT_LIST          go to state 64
    IF_STASTMENT            go to state 65
    STASTMENT               go to state 66
    LOOP_STATMENT           go to state 67
    COMPUND_STATMENT_PROC   go to state 68
    INNER_COMPUND_STATMENT  go to state 124
    DEC_INNER_BLOCK         go to state 70
    NEW_DECLARE             go to state 71
    VF                      go to state 72
    CONST                   go to state 73


State 78

   10 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK .

    $default  reduce using rule 10 (FUNC_DEF)


State 79

   61 IF_STASTMENT: IF '(' . EXPRASION ')' STASTMENT ELSE STASTMENT
   62             | IF '(' . EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 41
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '|'           shift, and go to state 60

    EXPRASION    go to state 125
    FUNC_ACTIVE  go to state 63
    CONST        go to state 73


State 80

   68 LOOP_STATMENT: FOR '(' . EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 41
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '|'           shift, and go to state 60

    EXPRASION    go to state 126
    FUNC_ACTIVE  go to state 63
    CONST        go to state 73


State 81

   67 LOOP_STATMENT: WHILE '(' . EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 41
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '|'           shift, and go to state 60

    EXPRASION    go to state 127
    FUNC_ACTIVE  go to state 63
    CONST        go to state 73


State 82

   79 VFDEC: INNER_ARGS . ':' TYPE ';'

    ':'  shift, and go to state 128


State 83

   78 VF: VAR VFDEC .

    $default  reduce using rule 78 (VF)


State 84

   55 FUNC_ACTIVE: ID '(' . ')'
   56            | ID '(' . FUNC_ACTIVE_INNER_ARGES ')'

    NULLA         shift, and go to state 41
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    ')'           shift, and go to state 129
    '|'           shift, and go to state 60

    EXPRASION                go to state 130
    FUNC_ACTIVE              go to state 63
    FUNC_ACTIVE_INNER_ARGES  go to state 131
    CONST                    go to state 73


State 85

   26 EXPRASION: ID '[' . EXPRASION ']' '=' VALUE
   27          | ID '[' . EXPRASION ']'

    NULLA         shift, and go to state 41
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '|'           shift, and go to state 60

    EXPRASION    go to state 132
    FUNC_ACTIVE  go to state 63
    CONST        go to state 73


State 86

   28 EXPRASION: ID '=' . EXPRASION

    NULLA         shift, and go to state 41
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '|'           shift, and go to state 60

    EXPRASION    go to state 133
    FUNC_ACTIVE  go to state 63
    CONST        go to state 73


State 87

   46 VALUE: TRUE .

    $default  reduce using rule 46 (VALUE)


State 88

   47 VALUE: FALSE .

    $default  reduce using rule 47 (VALUE)


State 89

   43 VALUE: ID . '[' EXPRASION ']'
   48      | ID .
   55 FUNC_ACTIVE: ID . '(' ')'
   56            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 84
    '['  shift, and go to state 134

    $default  reduce using rule 48 (VALUE)


State 90

   53 VALUE: '-' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 135
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 91

   54 VALUE: '!' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 136
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 92

   51 VALUE: '^' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 137
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 93

   52 VALUE: '&' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 138
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 94

   45 VALUE: '(' . EXPRASION ')'

    NULLA         shift, and go to state 41
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '|'           shift, and go to state 60

    EXPRASION    go to state 139
    FUNC_ACTIVE  go to state 63
    CONST        go to state 73


State 95

   50 VALUE: '|' . VALUE '|'

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 140
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 96

   24 EXPRASION: '-' VALUE .

    $default  reduce using rule 24 (EXPRASION)


State 97

   49 VALUE: FUNC_ACTIVE .

    $default  reduce using rule 49 (VALUE)


State 98

   44 VALUE: CONST .

    $default  reduce using rule 44 (VALUE)


State 99

   25 EXPRASION: '!' VALUE .

    $default  reduce using rule 25 (EXPRASION)


State 100

   22 EXPRASION: '^' VALUE .

    $default  reduce using rule 22 (EXPRASION)


State 101

   23 EXPRASION: '&' VALUE .

    $default  reduce using rule 23 (EXPRASION)


State 102

   20 EXPRASION: '(' EXPRASION . ')'
   29          | EXPRASION . NE_OP VALUE
   30          | EXPRASION . AND_OP VALUE
   31          | EXPRASION . OR_OP VALUE
   32          | EXPRASION . '+' VALUE
   33          | EXPRASION . '-' VALUE
   34          | EXPRASION . '/' VALUE
   35          | EXPRASION . '*' VALUE
   36          | EXPRASION . EQL_OP VALUE
   37          | EXPRASION . GE_OP VALUE
   38          | EXPRASION . SE_OP VALUE
   39          | EXPRASION . '>' VALUE
   40          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 104
    GE_OP   shift, and go to state 105
    SE_OP   shift, and go to state 106
    NE_OP   shift, and go to state 107
    OR_OP   shift, and go to state 108
    EQL_OP  shift, and go to state 109
    '+'     shift, and go to state 111
    '-'     shift, and go to state 112
    '*'     shift, and go to state 113
    '/'     shift, and go to state 114
    '>'     shift, and go to state 115
    '<'     shift, and go to state 116
    ')'     shift, and go to state 141


State 103

   29 EXPRASION: EXPRASION . NE_OP VALUE
   30          | EXPRASION . AND_OP VALUE
   31          | EXPRASION . OR_OP VALUE
   32          | EXPRASION . '+' VALUE
   33          | EXPRASION . '-' VALUE
   34          | EXPRASION . '/' VALUE
   35          | EXPRASION . '*' VALUE
   36          | EXPRASION . EQL_OP VALUE
   37          | EXPRASION . GE_OP VALUE
   38          | EXPRASION . SE_OP VALUE
   39          | EXPRASION . '>' VALUE
   40          | EXPRASION . '<' VALUE
   42          | '|' EXPRASION . '|'

    AND_OP  shift, and go to state 104
    GE_OP   shift, and go to state 105
    SE_OP   shift, and go to state 106
    NE_OP   shift, and go to state 107
    OR_OP   shift, and go to state 108
    EQL_OP  shift, and go to state 109
    '+'     shift, and go to state 111
    '-'     shift, and go to state 112
    '*'     shift, and go to state 113
    '/'     shift, and go to state 114
    '>'     shift, and go to state 115
    '<'     shift, and go to state 116
    '|'     shift, and go to state 142


State 104

   30 EXPRASION: EXPRASION AND_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 143
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 105

   37 EXPRASION: EXPRASION GE_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 144
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 106

   38 EXPRASION: EXPRASION SE_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 145
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 107

   29 EXPRASION: EXPRASION NE_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 146
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 108

   31 EXPRASION: EXPRASION OR_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 147
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 109

   36 EXPRASION: EXPRASION EQL_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 148
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 110

   64 STASTMENT: EXPRASION ';' .

    $default  reduce using rule 64 (STASTMENT)


State 111

   32 EXPRASION: EXPRASION '+' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 149
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 112

   33 EXPRASION: EXPRASION '-' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 150
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 113

   35 EXPRASION: EXPRASION '*' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 151
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 114

   34 EXPRASION: EXPRASION '/' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 152
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 115

   39 EXPRASION: EXPRASION '>' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 153
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 116

   40 EXPRASION: EXPRASION '<' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 154
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 117

   59 STASTMENT_LIST: STASTMENT_LIST STASTMENT .

    $default  reduce using rule 59 (STASTMENT_LIST)


State 118

   70 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT '}' .

    $default  reduce using rule 70 (COMPUND_STATMENT_PROC)


State 119

   59 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   73 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK STASTMENT_LIST .

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '{'           shift, and go to state 26
    '|'           shift, and go to state 60

    $default  reduce using rule 73 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 62
    FUNC_ACTIVE            go to state 63
    IF_STASTMENT           go to state 65
    STASTMENT              go to state 117
    LOOP_STATMENT          go to state 67
    COMPUND_STATMENT_PROC  go to state 68
    CONST                  go to state 73


State 120

   74 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK .

    $default  reduce using rule 74 (DEC_INNER_BLOCK)


State 121

   14 OUT_ARGES: INNER_ARGS ':' TYPE ';' . OUT_ARGES

    ID  shift, and go to state 20

    OUT_ARGES   go to state 155
    INNER_ARGS  go to state 23


State 122

   87 TYPE: STRING '[' INT_NUM . ']'

    ']'  shift, and go to state 156


State 123

   17 FUNC_BLOCK: '{' RETURN . EXPRASION ';' '}'

    NULLA         shift, and go to state 41
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '|'           shift, and go to state 60

    EXPRASION    go to state 157
    FUNC_ACTIVE  go to state 63
    CONST        go to state 73


State 124

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT . RETURN EXPRASION ';' '}'

    RETURN  shift, and go to state 158


State 125

   29 EXPRASION: EXPRASION . NE_OP VALUE
   30          | EXPRASION . AND_OP VALUE
   31          | EXPRASION . OR_OP VALUE
   32          | EXPRASION . '+' VALUE
   33          | EXPRASION . '-' VALUE
   34          | EXPRASION . '/' VALUE
   35          | EXPRASION . '*' VALUE
   36          | EXPRASION . EQL_OP VALUE
   37          | EXPRASION . GE_OP VALUE
   38          | EXPRASION . SE_OP VALUE
   39          | EXPRASION . '>' VALUE
   40          | EXPRASION . '<' VALUE
   61 IF_STASTMENT: IF '(' EXPRASION . ')' STASTMENT ELSE STASTMENT
   62             | IF '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 104
    GE_OP   shift, and go to state 105
    SE_OP   shift, and go to state 106
    NE_OP   shift, and go to state 107
    OR_OP   shift, and go to state 108
    EQL_OP  shift, and go to state 109
    '+'     shift, and go to state 111
    '-'     shift, and go to state 112
    '*'     shift, and go to state 113
    '/'     shift, and go to state 114
    '>'     shift, and go to state 115
    '<'     shift, and go to state 116
    ')'     shift, and go to state 159


State 126

   29 EXPRASION: EXPRASION . NE_OP VALUE
   30          | EXPRASION . AND_OP VALUE
   31          | EXPRASION . OR_OP VALUE
   32          | EXPRASION . '+' VALUE
   33          | EXPRASION . '-' VALUE
   34          | EXPRASION . '/' VALUE
   35          | EXPRASION . '*' VALUE
   36          | EXPRASION . EQL_OP VALUE
   37          | EXPRASION . GE_OP VALUE
   38          | EXPRASION . SE_OP VALUE
   39          | EXPRASION . '>' VALUE
   40          | EXPRASION . '<' VALUE
   68 LOOP_STATMENT: FOR '(' EXPRASION . ';' EXPRASION ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 104
    GE_OP   shift, and go to state 105
    SE_OP   shift, and go to state 106
    NE_OP   shift, and go to state 107
    OR_OP   shift, and go to state 108
    EQL_OP  shift, and go to state 109
    ';'     shift, and go to state 160
    '+'     shift, and go to state 111
    '-'     shift, and go to state 112
    '*'     shift, and go to state 113
    '/'     shift, and go to state 114
    '>'     shift, and go to state 115
    '<'     shift, and go to state 116


State 127

   29 EXPRASION: EXPRASION . NE_OP VALUE
   30          | EXPRASION . AND_OP VALUE
   31          | EXPRASION . OR_OP VALUE
   32          | EXPRASION . '+' VALUE
   33          | EXPRASION . '-' VALUE
   34          | EXPRASION . '/' VALUE
   35          | EXPRASION . '*' VALUE
   36          | EXPRASION . EQL_OP VALUE
   37          | EXPRASION . GE_OP VALUE
   38          | EXPRASION . SE_OP VALUE
   39          | EXPRASION . '>' VALUE
   40          | EXPRASION . '<' VALUE
   67 LOOP_STATMENT: WHILE '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 104
    GE_OP   shift, and go to state 105
    SE_OP   shift, and go to state 106
    NE_OP   shift, and go to state 107
    OR_OP   shift, and go to state 108
    EQL_OP  shift, and go to state 109
    '+'     shift, and go to state 111
    '-'     shift, and go to state 112
    '*'     shift, and go to state 113
    '/'     shift, and go to state 114
    '>'     shift, and go to state 115
    '<'     shift, and go to state 116
    ')'     shift, and go to state 161


State 128

   79 VFDEC: INNER_ARGS ':' . TYPE ';'

    CHAR         shift, and go to state 31
    REAL         shift, and go to state 32
    INT          shift, and go to state 33
    BOOL         shift, and go to state 34
    STRING       shift, and go to state 35
    CHAR_POINER  shift, and go to state 36
    REAL_POINER  shift, and go to state 37
    INT_POINER   shift, and go to state 38

    TYPE  go to state 162


State 129

   55 FUNC_ACTIVE: ID '(' ')' .

    $default  reduce using rule 55 (FUNC_ACTIVE)


State 130

   29 EXPRASION: EXPRASION . NE_OP VALUE
   30          | EXPRASION . AND_OP VALUE
   31          | EXPRASION . OR_OP VALUE
   32          | EXPRASION . '+' VALUE
   33          | EXPRASION . '-' VALUE
   34          | EXPRASION . '/' VALUE
   35          | EXPRASION . '*' VALUE
   36          | EXPRASION . EQL_OP VALUE
   37          | EXPRASION . GE_OP VALUE
   38          | EXPRASION . SE_OP VALUE
   39          | EXPRASION . '>' VALUE
   40          | EXPRASION . '<' VALUE
   57 FUNC_ACTIVE_INNER_ARGES: EXPRASION .
   58                        | EXPRASION . ',' FUNC_ACTIVE_INNER_ARGES

    AND_OP  shift, and go to state 104
    GE_OP   shift, and go to state 105
    SE_OP   shift, and go to state 106
    NE_OP   shift, and go to state 107
    OR_OP   shift, and go to state 108
    EQL_OP  shift, and go to state 109
    '+'     shift, and go to state 111
    '-'     shift, and go to state 112
    '*'     shift, and go to state 113
    '/'     shift, and go to state 114
    '>'     shift, and go to state 115
    '<'     shift, and go to state 116
    ','     shift, and go to state 163

    $default  reduce using rule 57 (FUNC_ACTIVE_INNER_ARGES)


State 131

   56 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES . ')'

    ')'  shift, and go to state 164


State 132

   26 EXPRASION: ID '[' EXPRASION . ']' '=' VALUE
   27          | ID '[' EXPRASION . ']'
   29          | EXPRASION . NE_OP VALUE
   30          | EXPRASION . AND_OP VALUE
   31          | EXPRASION . OR_OP VALUE
   32          | EXPRASION . '+' VALUE
   33          | EXPRASION . '-' VALUE
   34          | EXPRASION . '/' VALUE
   35          | EXPRASION . '*' VALUE
   36          | EXPRASION . EQL_OP VALUE
   37          | EXPRASION . GE_OP VALUE
   38          | EXPRASION . SE_OP VALUE
   39          | EXPRASION . '>' VALUE
   40          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 104
    GE_OP   shift, and go to state 105
    SE_OP   shift, and go to state 106
    NE_OP   shift, and go to state 107
    OR_OP   shift, and go to state 108
    EQL_OP  shift, and go to state 109
    '+'     shift, and go to state 111
    '-'     shift, and go to state 112
    '*'     shift, and go to state 113
    '/'     shift, and go to state 114
    '>'     shift, and go to state 115
    '<'     shift, and go to state 116
    ']'     shift, and go to state 165


State 133

   28 EXPRASION: ID '=' EXPRASION .
   29          | EXPRASION . NE_OP VALUE
   30          | EXPRASION . AND_OP VALUE
   31          | EXPRASION . OR_OP VALUE
   32          | EXPRASION . '+' VALUE
   33          | EXPRASION . '-' VALUE
   34          | EXPRASION . '/' VALUE
   35          | EXPRASION . '*' VALUE
   36          | EXPRASION . EQL_OP VALUE
   37          | EXPRASION . GE_OP VALUE
   38          | EXPRASION . SE_OP VALUE
   39          | EXPRASION . '>' VALUE
   40          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 104
    GE_OP   shift, and go to state 105
    SE_OP   shift, and go to state 106
    NE_OP   shift, and go to state 107
    OR_OP   shift, and go to state 108
    EQL_OP  shift, and go to state 109
    '+'     shift, and go to state 111
    '-'     shift, and go to state 112
    '*'     shift, and go to state 113
    '/'     shift, and go to state 114
    '>'     shift, and go to state 115
    '<'     shift, and go to state 116

    AND_OP    [reduce using rule 28 (EXPRASION)]
    GE_OP     [reduce using rule 28 (EXPRASION)]
    SE_OP     [reduce using rule 28 (EXPRASION)]
    NE_OP     [reduce using rule 28 (EXPRASION)]
    OR_OP     [reduce using rule 28 (EXPRASION)]
    EQL_OP    [reduce using rule 28 (EXPRASION)]
    '+'       [reduce using rule 28 (EXPRASION)]
    '-'       [reduce using rule 28 (EXPRASION)]
    '*'       [reduce using rule 28 (EXPRASION)]
    '/'       [reduce using rule 28 (EXPRASION)]
    '>'       [reduce using rule 28 (EXPRASION)]
    '<'       [reduce using rule 28 (EXPRASION)]
    $default  reduce using rule 28 (EXPRASION)


State 134

   43 VALUE: ID '[' . EXPRASION ']'

    NULLA         shift, and go to state 41
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '|'           shift, and go to state 60

    EXPRASION    go to state 166
    FUNC_ACTIVE  go to state 63
    CONST        go to state 73


State 135

   53 VALUE: '-' VALUE .

    $default  reduce using rule 53 (VALUE)


State 136

   54 VALUE: '!' VALUE .

    $default  reduce using rule 54 (VALUE)


State 137

   51 VALUE: '^' VALUE .

    $default  reduce using rule 51 (VALUE)


State 138

   52 VALUE: '&' VALUE .

    $default  reduce using rule 52 (VALUE)


State 139

   29 EXPRASION: EXPRASION . NE_OP VALUE
   30          | EXPRASION . AND_OP VALUE
   31          | EXPRASION . OR_OP VALUE
   32          | EXPRASION . '+' VALUE
   33          | EXPRASION . '-' VALUE
   34          | EXPRASION . '/' VALUE
   35          | EXPRASION . '*' VALUE
   36          | EXPRASION . EQL_OP VALUE
   37          | EXPRASION . GE_OP VALUE
   38          | EXPRASION . SE_OP VALUE
   39          | EXPRASION . '>' VALUE
   40          | EXPRASION . '<' VALUE
   45 VALUE: '(' EXPRASION . ')'

    AND_OP  shift, and go to state 104
    GE_OP   shift, and go to state 105
    SE_OP   shift, and go to state 106
    NE_OP   shift, and go to state 107
    OR_OP   shift, and go to state 108
    EQL_OP  shift, and go to state 109
    '+'     shift, and go to state 111
    '-'     shift, and go to state 112
    '*'     shift, and go to state 113
    '/'     shift, and go to state 114
    '>'     shift, and go to state 115
    '<'     shift, and go to state 116
    ')'     shift, and go to state 167


State 140

   50 VALUE: '|' VALUE . '|'

    '|'  shift, and go to state 168


State 141

   20 EXPRASION: '(' EXPRASION ')' .

    $default  reduce using rule 20 (EXPRASION)


State 142

   42 EXPRASION: '|' EXPRASION '|' .

    $default  reduce using rule 42 (EXPRASION)


State 143

   30 EXPRASION: EXPRASION AND_OP VALUE .

    $default  reduce using rule 30 (EXPRASION)


State 144

   37 EXPRASION: EXPRASION GE_OP VALUE .

    $default  reduce using rule 37 (EXPRASION)


State 145

   38 EXPRASION: EXPRASION SE_OP VALUE .

    $default  reduce using rule 38 (EXPRASION)


State 146

   29 EXPRASION: EXPRASION NE_OP VALUE .

    $default  reduce using rule 29 (EXPRASION)


State 147

   31 EXPRASION: EXPRASION OR_OP VALUE .

    $default  reduce using rule 31 (EXPRASION)


State 148

   36 EXPRASION: EXPRASION EQL_OP VALUE .

    $default  reduce using rule 36 (EXPRASION)


State 149

   32 EXPRASION: EXPRASION '+' VALUE .

    $default  reduce using rule 32 (EXPRASION)


State 150

   33 EXPRASION: EXPRASION '-' VALUE .

    $default  reduce using rule 33 (EXPRASION)


State 151

   35 EXPRASION: EXPRASION '*' VALUE .

    $default  reduce using rule 35 (EXPRASION)


State 152

   34 EXPRASION: EXPRASION '/' VALUE .

    $default  reduce using rule 34 (EXPRASION)


State 153

   39 EXPRASION: EXPRASION '>' VALUE .

    $default  reduce using rule 39 (EXPRASION)


State 154

   40 EXPRASION: EXPRASION '<' VALUE .

    $default  reduce using rule 40 (EXPRASION)


State 155

   14 OUT_ARGES: INNER_ARGS ':' TYPE ';' OUT_ARGES .

    $default  reduce using rule 14 (OUT_ARGES)


State 156

   87 TYPE: STRING '[' INT_NUM ']' .

    $default  reduce using rule 87 (TYPE)


State 157

   17 FUNC_BLOCK: '{' RETURN EXPRASION . ';' '}'
   29 EXPRASION: EXPRASION . NE_OP VALUE
   30          | EXPRASION . AND_OP VALUE
   31          | EXPRASION . OR_OP VALUE
   32          | EXPRASION . '+' VALUE
   33          | EXPRASION . '-' VALUE
   34          | EXPRASION . '/' VALUE
   35          | EXPRASION . '*' VALUE
   36          | EXPRASION . EQL_OP VALUE
   37          | EXPRASION . GE_OP VALUE
   38          | EXPRASION . SE_OP VALUE
   39          | EXPRASION . '>' VALUE
   40          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 104
    GE_OP   shift, and go to state 105
    SE_OP   shift, and go to state 106
    NE_OP   shift, and go to state 107
    OR_OP   shift, and go to state 108
    EQL_OP  shift, and go to state 109
    ';'     shift, and go to state 169
    '+'     shift, and go to state 111
    '-'     shift, and go to state 112
    '*'     shift, and go to state 113
    '/'     shift, and go to state 114
    '>'     shift, and go to state 115
    '<'     shift, and go to state 116


State 158

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN . EXPRASION ';' '}'

    NULLA         shift, and go to state 41
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '|'           shift, and go to state 60

    EXPRASION    go to state 170
    FUNC_ACTIVE  go to state 63
    CONST        go to state 73


State 159

   61 IF_STASTMENT: IF '(' EXPRASION ')' . STASTMENT ELSE STASTMENT
   62             | IF '(' EXPRASION ')' . STASTMENT

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '{'           shift, and go to state 26
    '|'           shift, and go to state 60

    EXPRASION              go to state 62
    FUNC_ACTIVE            go to state 63
    IF_STASTMENT           go to state 65
    STASTMENT              go to state 171
    LOOP_STATMENT          go to state 67
    COMPUND_STATMENT_PROC  go to state 68
    CONST                  go to state 73


State 160

   68 LOOP_STATMENT: FOR '(' EXPRASION ';' . EXPRASION ';' EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 41
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '|'           shift, and go to state 60

    EXPRASION    go to state 172
    FUNC_ACTIVE  go to state 63
    CONST        go to state 73


State 161

   67 LOOP_STATMENT: WHILE '(' EXPRASION ')' . STASTMENT

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '{'           shift, and go to state 26
    '|'           shift, and go to state 60

    EXPRASION              go to state 62
    FUNC_ACTIVE            go to state 63
    IF_STASTMENT           go to state 65
    STASTMENT              go to state 173
    LOOP_STATMENT          go to state 67
    COMPUND_STATMENT_PROC  go to state 68
    CONST                  go to state 73


State 162

   79 VFDEC: INNER_ARGS ':' TYPE . ';'

    ';'  shift, and go to state 174


State 163

   58 FUNC_ACTIVE_INNER_ARGES: EXPRASION ',' . FUNC_ACTIVE_INNER_ARGES

    NULLA         shift, and go to state 41
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '|'           shift, and go to state 60

    EXPRASION                go to state 130
    FUNC_ACTIVE              go to state 63
    FUNC_ACTIVE_INNER_ARGES  go to state 175
    CONST                    go to state 73


State 164

   56 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES ')' .

    $default  reduce using rule 56 (FUNC_ACTIVE)


State 165

   26 EXPRASION: ID '[' EXPRASION ']' . '=' VALUE
   27          | ID '[' EXPRASION ']' .

    '='  shift, and go to state 176

    $default  reduce using rule 27 (EXPRASION)


State 166

   29 EXPRASION: EXPRASION . NE_OP VALUE
   30          | EXPRASION . AND_OP VALUE
   31          | EXPRASION . OR_OP VALUE
   32          | EXPRASION . '+' VALUE
   33          | EXPRASION . '-' VALUE
   34          | EXPRASION . '/' VALUE
   35          | EXPRASION . '*' VALUE
   36          | EXPRASION . EQL_OP VALUE
   37          | EXPRASION . GE_OP VALUE
   38          | EXPRASION . SE_OP VALUE
   39          | EXPRASION . '>' VALUE
   40          | EXPRASION . '<' VALUE
   43 VALUE: ID '[' EXPRASION . ']'

    AND_OP  shift, and go to state 104
    GE_OP   shift, and go to state 105
    SE_OP   shift, and go to state 106
    NE_OP   shift, and go to state 107
    OR_OP   shift, and go to state 108
    EQL_OP  shift, and go to state 109
    '+'     shift, and go to state 111
    '-'     shift, and go to state 112
    '*'     shift, and go to state 113
    '/'     shift, and go to state 114
    '>'     shift, and go to state 115
    '<'     shift, and go to state 116
    ']'     shift, and go to state 177


State 167

   45 VALUE: '(' EXPRASION ')' .

    $default  reduce using rule 45 (VALUE)


State 168

   50 VALUE: '|' VALUE '|' .

    $default  reduce using rule 50 (VALUE)


State 169

   17 FUNC_BLOCK: '{' RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 178


State 170

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION . ';' '}'
   29 EXPRASION: EXPRASION . NE_OP VALUE
   30          | EXPRASION . AND_OP VALUE
   31          | EXPRASION . OR_OP VALUE
   32          | EXPRASION . '+' VALUE
   33          | EXPRASION . '-' VALUE
   34          | EXPRASION . '/' VALUE
   35          | EXPRASION . '*' VALUE
   36          | EXPRASION . EQL_OP VALUE
   37          | EXPRASION . GE_OP VALUE
   38          | EXPRASION . SE_OP VALUE
   39          | EXPRASION . '>' VALUE
   40          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 104
    GE_OP   shift, and go to state 105
    SE_OP   shift, and go to state 106
    NE_OP   shift, and go to state 107
    OR_OP   shift, and go to state 108
    EQL_OP  shift, and go to state 109
    ';'     shift, and go to state 179
    '+'     shift, and go to state 111
    '-'     shift, and go to state 112
    '*'     shift, and go to state 113
    '/'     shift, and go to state 114
    '>'     shift, and go to state 115
    '<'     shift, and go to state 116


State 171

   61 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT . ELSE STASTMENT
   62             | IF '(' EXPRASION ')' STASTMENT .

    ELSE  shift, and go to state 180

    $default  reduce using rule 62 (IF_STASTMENT)


State 172

   29 EXPRASION: EXPRASION . NE_OP VALUE
   30          | EXPRASION . AND_OP VALUE
   31          | EXPRASION . OR_OP VALUE
   32          | EXPRASION . '+' VALUE
   33          | EXPRASION . '-' VALUE
   34          | EXPRASION . '/' VALUE
   35          | EXPRASION . '*' VALUE
   36          | EXPRASION . EQL_OP VALUE
   37          | EXPRASION . GE_OP VALUE
   38          | EXPRASION . SE_OP VALUE
   39          | EXPRASION . '>' VALUE
   40          | EXPRASION . '<' VALUE
   68 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION . ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 104
    GE_OP   shift, and go to state 105
    SE_OP   shift, and go to state 106
    NE_OP   shift, and go to state 107
    OR_OP   shift, and go to state 108
    EQL_OP  shift, and go to state 109
    ';'     shift, and go to state 181
    '+'     shift, and go to state 111
    '-'     shift, and go to state 112
    '*'     shift, and go to state 113
    '/'     shift, and go to state 114
    '>'     shift, and go to state 115
    '<'     shift, and go to state 116


State 173

   67 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT .

    $default  reduce using rule 67 (LOOP_STATMENT)


State 174

   79 VFDEC: INNER_ARGS ':' TYPE ';' .

    $default  reduce using rule 79 (VFDEC)


State 175

   58 FUNC_ACTIVE_INNER_ARGES: EXPRASION ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 58 (FUNC_ACTIVE_INNER_ARGES)


State 176

   26 EXPRASION: ID '[' EXPRASION ']' '=' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 87
    FALSE         shift, and go to state 88
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 89
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 90
    '!'           shift, and go to state 91
    '^'           shift, and go to state 92
    '&'           shift, and go to state 93
    '('           shift, and go to state 94
    '|'           shift, and go to state 95

    VALUE        go to state 182
    FUNC_ACTIVE  go to state 97
    CONST        go to state 98


State 177

   43 VALUE: ID '[' EXPRASION ']' .

    $default  reduce using rule 43 (VALUE)


State 178

   17 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}' .

    $default  reduce using rule 17 (FUNC_BLOCK)


State 179

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 183


State 180

   61 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE . STASTMENT

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '{'           shift, and go to state 26
    '|'           shift, and go to state 60

    EXPRASION              go to state 62
    FUNC_ACTIVE            go to state 63
    IF_STASTMENT           go to state 65
    STASTMENT              go to state 184
    LOOP_STATMENT          go to state 67
    COMPUND_STATMENT_PROC  go to state 68
    CONST                  go to state 73


State 181

   68 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' . EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 41
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '|'           shift, and go to state 60

    EXPRASION    go to state 185
    FUNC_ACTIVE  go to state 63
    CONST        go to state 73


State 182

   26 EXPRASION: ID '[' EXPRASION ']' '=' VALUE .

    $default  reduce using rule 26 (EXPRASION)


State 183

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}' .

    $default  reduce using rule 18 (FUNC_BLOCK)


State 184

   61 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT .

    $default  reduce using rule 61 (IF_STASTMENT)


State 185

   29 EXPRASION: EXPRASION . NE_OP VALUE
   30          | EXPRASION . AND_OP VALUE
   31          | EXPRASION . OR_OP VALUE
   32          | EXPRASION . '+' VALUE
   33          | EXPRASION . '-' VALUE
   34          | EXPRASION . '/' VALUE
   35          | EXPRASION . '*' VALUE
   36          | EXPRASION . EQL_OP VALUE
   37          | EXPRASION . GE_OP VALUE
   38          | EXPRASION . SE_OP VALUE
   39          | EXPRASION . '>' VALUE
   40          | EXPRASION . '<' VALUE
   68 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 104
    GE_OP   shift, and go to state 105
    SE_OP   shift, and go to state 106
    NE_OP   shift, and go to state 107
    OR_OP   shift, and go to state 108
    EQL_OP  shift, and go to state 109
    '+'     shift, and go to state 111
    '-'     shift, and go to state 112
    '*'     shift, and go to state 113
    '/'     shift, and go to state 114
    '>'     shift, and go to state 115
    '<'     shift, and go to state 116
    ')'     shift, and go to state 186


State 186

   68 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' . STASTMENT

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    CHAR_VALUE    shift, and go to state 47
    STRING_VALUE  shift, and go to state 48
    INT_NUM       shift, and go to state 49
    R_NUM         shift, and go to state 50
    HEX_NUM       shift, and go to state 51
    ID            shift, and go to state 52
    BOOL_VAL      shift, and go to state 53
    '-'           shift, and go to state 54
    '!'           shift, and go to state 55
    '^'           shift, and go to state 56
    '&'           shift, and go to state 57
    '('           shift, and go to state 58
    '{'           shift, and go to state 26
    '|'           shift, and go to state 60

    EXPRASION              go to state 62
    FUNC_ACTIVE            go to state 63
    IF_STASTMENT           go to state 65
    STASTMENT              go to state 187
    LOOP_STATMENT          go to state 67
    COMPUND_STATMENT_PROC  go to state 68
    CONST                  go to state 73


State 187

   68 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT .

    $default  reduce using rule 68 (LOOP_STATMENT)
