Nonterminals useless in grammar

   RETURN_STATMENT
   COMPUND_STATMENT


Terminals unused in grammar

   FLOAT_POINER
   CHAR_POINTER
   REAL_POINTER
   INT_POINTER
   MAIN
   NULL_VALUE
   BOOL_VALUE
   CHAR_VALUE
   STRING_VALUE
   test
   UFUNC


Rules useless in grammar

   89 RETURN_STATMENT: RETURN EXPRASION ';'

   90 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT RETURN_STATMENT '}'
   91                 | '{' RETURN_STATMENT '}'


State 50 conflicts: 2 shift/reduce
State 61 conflicts: 1 shift/reduce
State 77 conflicts: 1 shift/reduce
State 78 conflicts: 1 shift/reduce
State 79 conflicts: 1 shift/reduce
State 80 conflicts: 1 shift/reduce
State 114 conflicts: 12 shift/reduce
State 153 conflicts: 1 shift/reduce


Grammar

    0 $accept: S $end

    1 S: FUNC_PROC_DEC

    2 FUNC_PROC_DEC: DEF_A
    3              | FUNC_PROC_DEC DEF_A

    4 DEF_A: FUNC_DEF
    5      | PROC_DEF

    6 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC

    7 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK

    8 ARGES: '(' ')'
    9      | '(' OUT_ARGES ')'

   10 OUT_ARGES: INNER_ARGS ':' TYPE
   11          | INNER_ARGS ':' TYPE ';' OUT_ARGES

   12 INNER_ARGS: ID
   13           | ID ',' INNER_ARGS

   14 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}'
   15           | '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

   16 EXPRASION: CONST
   17          | '(' EXPRASION ')'
   18          | TRUE
   19          | FALSE
   20          | ID
   21          | '^' EXPRASION
   22          | '&' EXPRASION
   23          | '-' EXPRASION
   24          | '!' EXPRASION
   25          | ID '[' EXPRASION ']' '=' VALUE
   26          | ID '=' EXPRASION
   27          | EXPRASION NE_OP VALUE
   28          | EXPRASION AND_OP VALUE
   29          | EXPRASION OR_OP VALUE
   30          | EXPRASION '+' VALUE
   31          | EXPRASION '-' VALUE
   32          | EXPRASION '/' VALUE
   33          | EXPRASION '*' VALUE
   34          | EXPRASION EQL_OP VALUE
   35          | EXPRASION GE_OP VALUE
   36          | EXPRASION SE_OP VALUE
   37          | EXPRASION '>' VALUE
   38          | EXPRASION '<' VALUE
   39          | FUNC_ACTIVE

   40 VALUE: CONST
   41      | '(' EXPRASION ')'
   42      | TRUE
   43      | FALSE
   44      | ID
   45      | FUNC_ACTIVE

   46 FUNC_ACTIVE: ID '(' ')'
   47            | ID '(' FUNC_ACTIVE_INNER_ARGES ')'

   48 FUNC_ACTIVE_INNER_ARGES: ID
   49                        | FUNC_ACTIVE
   50                        | CONST
   51                        | ID ',' FUNC_ACTIVE_INNER_ARGES
   52                        | CONST ',' FUNC_ACTIVE_INNER_ARGES
   53                        | FUNC_ACTIVE ',' FUNC_ACTIVE_INNER_ARGES

   54 STASTMENT_LIST: STASTMENT_LIST STASTMENT
   55               | STASTMENT

   56 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   57             | IF '(' EXPRASION ')' STASTMENT

   58 STASTMENT: COMPUND_STATMENT_PROC
   59          | EXPRASION ';'
   60          | IF_STASTMENT
   61          | LOOP_STATMENT

   62 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT
   63              | FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

   64 COMPUND_STATMENT_PROC: '{' '}'
   65                      | '{' INNER_COMPUND_STATMENT '}'

   66 INNER_COMPUND_STATMENT: STASTMENT_LIST
   67                       | DEC_INNER_BLOCK
   68                       | DEC_INNER_BLOCK STASTMENT_LIST

   69 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK
   70                | NEW_DECLARE

   71 NEW_DECLARE: VAR_DECLARE
   72            | FUNC_PROC_DEC

   73 VAR_DECLARE: VF
   74            | VAR_DECLARE VF

   75 VF: VAR VFDEC

   76 VFDEC: INNER_ARGS ':' TYPE ';'
   77      | INNER_ARGS ':' TYPE ';' VFDEC

   78 CONST: INT_NUM
   79      | R_NUM
   80      | HEX_NUM

   81 TYPE: STRING '[' INT_NUM ']'
   82     | BOOL
   83     | INT
   84     | REAL
   85     | CHAR
   86     | CHAR_POINER
   87     | REAL_POINER
   88     | INT_POINER


Terminals, with rules where they appear

$end (0) 0
'!' (33) 24
'&' (38) 22
'(' (40) 8 9 17 41 46 47 56 57 62 63
')' (41) 8 9 17 41 46 47 56 57 62 63
'*' (42) 33
'+' (43) 30
',' (44) 13 51 52 53
'-' (45) 23 31
'/' (47) 32
':' (58) 10 11 76 77
';' (59) 11 14 15 59 63 76 77
'<' (60) 38
'=' (61) 25 26
'>' (62) 37
'[' (91) 25 81
']' (93) 25 81
'^' (94) 21
'{' (123) 14 15 64 65
'}' (125) 14 15 64 65
error (256)
CHAR <String> (258) 85
REAL <String> (259) 84
INT <String> (260) 83
BOOL <String> (261) 82
STRING <String> (262) 81
CHAR_POINER <String> (263) 86
REAL_POINER <String> (264) 87
FLOAT_POINER <String> (265)
INT_POINER <String> (266) 88
CHAR_POINTER <String> (267)
REAL_POINTER <String> (268)
INT_POINTER <String> (269)
ELSE (270) 56
IF (271) 56 57
FOR (272) 63
WHILE (273) 62
TRUE (274) 18 42
FALSE (275) 19 43
RETURN (276) 7 14 15
MAIN <Node> (277)
VAR <String> (278) 75
FUNC <String> (279) 7
PROC <String> (280) 6
NULL_VALUE (281)
AND_OP (282) 28
GE_OP (283) 35
SE_OP (284) 36
NE_OP (285) 27
OR_OP (286) 29
EQL_OP (287) 34
BOOL_VALUE <String> (288)
CHAR_VALUE <String> (289)
STRING_VALUE <String> (290)
INT_NUM <String> (291) 78 81
R_NUM <String> (292) 79
HEX_NUM <String> (293) 80
ID <String> (294) 6 7 12 13 20 25 26 44 46 47 48 51
IFX (295)
test (296)
UMINUS (297)
UFUNC (298)


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
S <Node> (64)
    on left: 1, on right: 0
FUNC_PROC_DEC <Node> (65)
    on left: 2 3, on right: 1 3 72
DEF_A <Node> (66)
    on left: 4 5, on right: 2 3
PROC_DEF <Node> (67)
    on left: 6, on right: 5
FUNC_DEF <Node> (68)
    on left: 7, on right: 4
ARGES <Node> (69)
    on left: 8 9, on right: 6 7
OUT_ARGES <Node> (70)
    on left: 10 11, on right: 9 11
INNER_ARGS <Node> (71)
    on left: 12 13, on right: 10 11 13 76 77
FUNC_BLOCK <Node> (72)
    on left: 14 15, on right: 7
EXPRASION <Node> (73)
    on left: 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
    34 35 36 37 38 39, on right: 14 15 17 21 22 23 24 25 26 27 28 29
    30 31 32 33 34 35 36 37 38 41 56 57 59 62 63
VALUE <Node> (74)
    on left: 40 41 42 43 44 45, on right: 25 27 28 29 30 31 32 33 34
    35 36 37 38
FUNC_ACTIVE <Node> (75)
    on left: 46 47, on right: 39 45 49 53
FUNC_ACTIVE_INNER_ARGES <Node> (76)
    on left: 48 49 50 51 52 53, on right: 47 51 52 53
STASTMENT_LIST <Node> (77)
    on left: 54 55, on right: 54 66 68
IF_STASTMENT <Node> (78)
    on left: 56 57, on right: 60
STASTMENT <Node> (79)
    on left: 58 59 60 61, on right: 54 55 56 57 62 63
LOOP_STATMENT <Node> (80)
    on left: 62 63, on right: 61
COMPUND_STATMENT_PROC <Node> (81)
    on left: 64 65, on right: 6 58
INNER_COMPUND_STATMENT <Node> (82)
    on left: 66 67 68, on right: 15 65
DEC_INNER_BLOCK <Node> (83)
    on left: 69 70, on right: 67 68 69
NEW_DECLARE <Node> (84)
    on left: 71 72, on right: 69 70
VAR_DECLARE <Node> (85)
    on left: 73 74, on right: 71 74
VF <Node> (86)
    on left: 75, on right: 73 74
VFDEC <Node> (87)
    on left: 76 77, on right: 75 77
CONST <Node> (88)
    on left: 78 79 80, on right: 16 40 50 52
TYPE <String> (89)
    on left: 81 82 83 84 85 86 87 88, on right: 7 10 11 76 77


State 0

    0 $accept: . S $end

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    S              go to state 3
    FUNC_PROC_DEC  go to state 4
    DEF_A          go to state 5
    PROC_DEF       go to state 6
    FUNC_DEF       go to state 7


State 1

    7 FUNC_DEF: FUNC . ID ARGES RETURN TYPE FUNC_BLOCK

    ID  shift, and go to state 8


State 2

    6 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT_PROC

    ID  shift, and go to state 9


State 3

    0 $accept: S . $end

    $end  shift, and go to state 10


State 4

    1 S: FUNC_PROC_DEC .
    3 FUNC_PROC_DEC: FUNC_PROC_DEC . DEF_A

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    $default  reduce using rule 1 (S)

    DEF_A     go to state 11
    PROC_DEF  go to state 6
    FUNC_DEF  go to state 7


State 5

    2 FUNC_PROC_DEC: DEF_A .

    $default  reduce using rule 2 (FUNC_PROC_DEC)


State 6

    5 DEF_A: PROC_DEF .

    $default  reduce using rule 5 (DEF_A)


State 7

    4 DEF_A: FUNC_DEF .

    $default  reduce using rule 4 (DEF_A)


State 8

    7 FUNC_DEF: FUNC ID . ARGES RETURN TYPE FUNC_BLOCK

    '('  shift, and go to state 12

    ARGES  go to state 13


State 9

    6 PROC_DEF: PROC ID . ARGES COMPUND_STATMENT_PROC

    '('  shift, and go to state 12

    ARGES  go to state 14


State 10

    0 $accept: S $end .

    $default  accept


State 11

    3 FUNC_PROC_DEC: FUNC_PROC_DEC DEF_A .

    $default  reduce using rule 3 (FUNC_PROC_DEC)


State 12

    8 ARGES: '(' . ')'
    9      | '(' . OUT_ARGES ')'

    ID   shift, and go to state 15
    ')'  shift, and go to state 16

    OUT_ARGES   go to state 17
    INNER_ARGS  go to state 18


State 13

    7 FUNC_DEF: FUNC ID ARGES . RETURN TYPE FUNC_BLOCK

    RETURN  shift, and go to state 19


State 14

    6 PROC_DEF: PROC ID ARGES . COMPUND_STATMENT_PROC

    '{'  shift, and go to state 20

    COMPUND_STATMENT_PROC  go to state 21


State 15

   12 INNER_ARGS: ID .
   13           | ID . ',' INNER_ARGS

    ','  shift, and go to state 22

    $default  reduce using rule 12 (INNER_ARGS)


State 16

    8 ARGES: '(' ')' .

    $default  reduce using rule 8 (ARGES)


State 17

    9 ARGES: '(' OUT_ARGES . ')'

    ')'  shift, and go to state 23


State 18

   10 OUT_ARGES: INNER_ARGS . ':' TYPE
   11          | INNER_ARGS . ':' TYPE ';' OUT_ARGES

    ':'  shift, and go to state 24


State 19

    7 FUNC_DEF: FUNC ID ARGES RETURN . TYPE FUNC_BLOCK

    CHAR         shift, and go to state 25
    REAL         shift, and go to state 26
    INT          shift, and go to state 27
    BOOL         shift, and go to state 28
    STRING       shift, and go to state 29
    CHAR_POINER  shift, and go to state 30
    REAL_POINER  shift, and go to state 31
    INT_POINER   shift, and go to state 32

    TYPE  go to state 33


State 20

   64 COMPUND_STATMENT_PROC: '{' . '}'
   65                      | '{' . INNER_COMPUND_STATMENT '}'

    IF       shift, and go to state 34
    FOR      shift, and go to state 35
    WHILE    shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    VAR      shift, and go to state 39
    FUNC     shift, and go to state 1
    PROC     shift, and go to state 2
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48
    '{'      shift, and go to state 20
    '}'      shift, and go to state 49

    FUNC_PROC_DEC           go to state 50
    DEF_A                   go to state 5
    PROC_DEF                go to state 6
    FUNC_DEF                go to state 7
    EXPRASION               go to state 51
    FUNC_ACTIVE             go to state 52
    STASTMENT_LIST          go to state 53
    IF_STASTMENT            go to state 54
    STASTMENT               go to state 55
    LOOP_STATMENT           go to state 56
    COMPUND_STATMENT_PROC   go to state 57
    INNER_COMPUND_STATMENT  go to state 58
    DEC_INNER_BLOCK         go to state 59
    NEW_DECLARE             go to state 60
    VAR_DECLARE             go to state 61
    VF                      go to state 62
    CONST                   go to state 63


State 21

    6 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC .

    $default  reduce using rule 6 (PROC_DEF)


State 22

   13 INNER_ARGS: ID ',' . INNER_ARGS

    ID  shift, and go to state 15

    INNER_ARGS  go to state 64


State 23

    9 ARGES: '(' OUT_ARGES ')' .

    $default  reduce using rule 9 (ARGES)


State 24

   10 OUT_ARGES: INNER_ARGS ':' . TYPE
   11          | INNER_ARGS ':' . TYPE ';' OUT_ARGES

    CHAR         shift, and go to state 25
    REAL         shift, and go to state 26
    INT          shift, and go to state 27
    BOOL         shift, and go to state 28
    STRING       shift, and go to state 29
    CHAR_POINER  shift, and go to state 30
    REAL_POINER  shift, and go to state 31
    INT_POINER   shift, and go to state 32

    TYPE  go to state 65


State 25

   85 TYPE: CHAR .

    $default  reduce using rule 85 (TYPE)


State 26

   84 TYPE: REAL .

    $default  reduce using rule 84 (TYPE)


State 27

   83 TYPE: INT .

    $default  reduce using rule 83 (TYPE)


State 28

   82 TYPE: BOOL .

    $default  reduce using rule 82 (TYPE)


State 29

   81 TYPE: STRING . '[' INT_NUM ']'

    '['  shift, and go to state 66


State 30

   86 TYPE: CHAR_POINER .

    $default  reduce using rule 86 (TYPE)


State 31

   87 TYPE: REAL_POINER .

    $default  reduce using rule 87 (TYPE)


State 32

   88 TYPE: INT_POINER .

    $default  reduce using rule 88 (TYPE)


State 33

    7 FUNC_DEF: FUNC ID ARGES RETURN TYPE . FUNC_BLOCK

    '{'  shift, and go to state 67

    FUNC_BLOCK  go to state 68


State 34

   56 IF_STASTMENT: IF . '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   57             | IF . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 69


State 35

   63 LOOP_STATMENT: FOR . '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    '('  shift, and go to state 70


State 36

   62 LOOP_STATMENT: WHILE . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 71


State 37

   18 EXPRASION: TRUE .

    $default  reduce using rule 18 (EXPRASION)


State 38

   19 EXPRASION: FALSE .

    $default  reduce using rule 19 (EXPRASION)


State 39

   75 VF: VAR . VFDEC

    ID  shift, and go to state 15

    INNER_ARGS  go to state 72
    VFDEC       go to state 73


State 40

   78 CONST: INT_NUM .

    $default  reduce using rule 78 (CONST)


State 41

   79 CONST: R_NUM .

    $default  reduce using rule 79 (CONST)


State 42

   80 CONST: HEX_NUM .

    $default  reduce using rule 80 (CONST)


State 43

   20 EXPRASION: ID .
   25          | ID . '[' EXPRASION ']' '=' VALUE
   26          | ID . '=' EXPRASION
   46 FUNC_ACTIVE: ID . '(' ')'
   47            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 74
    '['  shift, and go to state 75
    '='  shift, and go to state 76

    $default  reduce using rule 20 (EXPRASION)


State 44

   23 EXPRASION: '-' . EXPRASION

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48

    EXPRASION    go to state 77
    FUNC_ACTIVE  go to state 52
    CONST        go to state 63


State 45

   24 EXPRASION: '!' . EXPRASION

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48

    EXPRASION    go to state 78
    FUNC_ACTIVE  go to state 52
    CONST        go to state 63


State 46

   21 EXPRASION: '^' . EXPRASION

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48

    EXPRASION    go to state 79
    FUNC_ACTIVE  go to state 52
    CONST        go to state 63


State 47

   22 EXPRASION: '&' . EXPRASION

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48

    EXPRASION    go to state 80
    FUNC_ACTIVE  go to state 52
    CONST        go to state 63


State 48

   17 EXPRASION: '(' . EXPRASION ')'

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48

    EXPRASION    go to state 81
    FUNC_ACTIVE  go to state 52
    CONST        go to state 63


State 49

   64 COMPUND_STATMENT_PROC: '{' '}' .

    $default  reduce using rule 64 (COMPUND_STATMENT_PROC)


State 50

    3 FUNC_PROC_DEC: FUNC_PROC_DEC . DEF_A
   72 NEW_DECLARE: FUNC_PROC_DEC .

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    FUNC      [reduce using rule 72 (NEW_DECLARE)]
    PROC      [reduce using rule 72 (NEW_DECLARE)]
    $default  reduce using rule 72 (NEW_DECLARE)

    DEF_A     go to state 11
    PROC_DEF  go to state 6
    FUNC_DEF  go to state 7


State 51

   27 EXPRASION: EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE
   59 STASTMENT: EXPRASION . ';'

    AND_OP  shift, and go to state 82
    GE_OP   shift, and go to state 83
    SE_OP   shift, and go to state 84
    NE_OP   shift, and go to state 85
    OR_OP   shift, and go to state 86
    EQL_OP  shift, and go to state 87
    ';'     shift, and go to state 88
    '+'     shift, and go to state 89
    '-'     shift, and go to state 90
    '*'     shift, and go to state 91
    '/'     shift, and go to state 92
    '>'     shift, and go to state 93
    '<'     shift, and go to state 94


State 52

   39 EXPRASION: FUNC_ACTIVE .

    $default  reduce using rule 39 (EXPRASION)


State 53

   54 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   66 INNER_COMPUND_STATMENT: STASTMENT_LIST .

    IF       shift, and go to state 34
    FOR      shift, and go to state 35
    WHILE    shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48
    '{'      shift, and go to state 20

    $default  reduce using rule 66 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 51
    FUNC_ACTIVE            go to state 52
    IF_STASTMENT           go to state 54
    STASTMENT              go to state 95
    LOOP_STATMENT          go to state 56
    COMPUND_STATMENT_PROC  go to state 57
    CONST                  go to state 63


State 54

   60 STASTMENT: IF_STASTMENT .

    $default  reduce using rule 60 (STASTMENT)


State 55

   55 STASTMENT_LIST: STASTMENT .

    $default  reduce using rule 55 (STASTMENT_LIST)


State 56

   61 STASTMENT: LOOP_STATMENT .

    $default  reduce using rule 61 (STASTMENT)


State 57

   58 STASTMENT: COMPUND_STATMENT_PROC .

    $default  reduce using rule 58 (STASTMENT)


State 58

   65 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT . '}'

    '}'  shift, and go to state 96


State 59

   67 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK .
   68                       | DEC_INNER_BLOCK . STASTMENT_LIST

    IF       shift, and go to state 34
    FOR      shift, and go to state 35
    WHILE    shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48
    '{'      shift, and go to state 20

    $default  reduce using rule 67 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 51
    FUNC_ACTIVE            go to state 52
    STASTMENT_LIST         go to state 97
    IF_STASTMENT           go to state 54
    STASTMENT              go to state 55
    LOOP_STATMENT          go to state 56
    COMPUND_STATMENT_PROC  go to state 57
    CONST                  go to state 63


State 60

   69 DEC_INNER_BLOCK: NEW_DECLARE . DEC_INNER_BLOCK
   70                | NEW_DECLARE .

    VAR   shift, and go to state 39
    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    $default  reduce using rule 70 (DEC_INNER_BLOCK)

    FUNC_PROC_DEC    go to state 50
    DEF_A            go to state 5
    PROC_DEF         go to state 6
    FUNC_DEF         go to state 7
    DEC_INNER_BLOCK  go to state 98
    NEW_DECLARE      go to state 60
    VAR_DECLARE      go to state 61
    VF               go to state 62


State 61

   71 NEW_DECLARE: VAR_DECLARE .
   74 VAR_DECLARE: VAR_DECLARE . VF

    VAR  shift, and go to state 39

    VAR       [reduce using rule 71 (NEW_DECLARE)]
    $default  reduce using rule 71 (NEW_DECLARE)

    VF  go to state 99


State 62

   73 VAR_DECLARE: VF .

    $default  reduce using rule 73 (VAR_DECLARE)


State 63

   16 EXPRASION: CONST .

    $default  reduce using rule 16 (EXPRASION)


State 64

   13 INNER_ARGS: ID ',' INNER_ARGS .

    $default  reduce using rule 13 (INNER_ARGS)


State 65

   10 OUT_ARGES: INNER_ARGS ':' TYPE .
   11          | INNER_ARGS ':' TYPE . ';' OUT_ARGES

    ';'  shift, and go to state 100

    $default  reduce using rule 10 (OUT_ARGES)


State 66

   81 TYPE: STRING '[' . INT_NUM ']'

    INT_NUM  shift, and go to state 101


State 67

   14 FUNC_BLOCK: '{' . RETURN EXPRASION ';' '}'
   15           | '{' . INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

    IF       shift, and go to state 34
    FOR      shift, and go to state 35
    WHILE    shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    RETURN   shift, and go to state 102
    VAR      shift, and go to state 39
    FUNC     shift, and go to state 1
    PROC     shift, and go to state 2
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48
    '{'      shift, and go to state 20

    FUNC_PROC_DEC           go to state 50
    DEF_A                   go to state 5
    PROC_DEF                go to state 6
    FUNC_DEF                go to state 7
    EXPRASION               go to state 51
    FUNC_ACTIVE             go to state 52
    STASTMENT_LIST          go to state 53
    IF_STASTMENT            go to state 54
    STASTMENT               go to state 55
    LOOP_STATMENT           go to state 56
    COMPUND_STATMENT_PROC   go to state 57
    INNER_COMPUND_STATMENT  go to state 103
    DEC_INNER_BLOCK         go to state 59
    NEW_DECLARE             go to state 60
    VAR_DECLARE             go to state 61
    VF                      go to state 62
    CONST                   go to state 63


State 68

    7 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK .

    $default  reduce using rule 7 (FUNC_DEF)


State 69

   56 IF_STASTMENT: IF '(' . EXPRASION ')' STASTMENT ELSE STASTMENT
   57             | IF '(' . EXPRASION ')' STASTMENT

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48

    EXPRASION    go to state 104
    FUNC_ACTIVE  go to state 52
    CONST        go to state 63


State 70

   63 LOOP_STATMENT: FOR '(' . EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48

    EXPRASION    go to state 105
    FUNC_ACTIVE  go to state 52
    CONST        go to state 63


State 71

   62 LOOP_STATMENT: WHILE '(' . EXPRASION ')' STASTMENT

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48

    EXPRASION    go to state 106
    FUNC_ACTIVE  go to state 52
    CONST        go to state 63


State 72

   76 VFDEC: INNER_ARGS . ':' TYPE ';'
   77      | INNER_ARGS . ':' TYPE ';' VFDEC

    ':'  shift, and go to state 107


State 73

   75 VF: VAR VFDEC .

    $default  reduce using rule 75 (VF)


State 74

   46 FUNC_ACTIVE: ID '(' . ')'
   47            | ID '(' . FUNC_ACTIVE_INNER_ARGES ')'

    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 108
    ')'      shift, and go to state 109

    FUNC_ACTIVE              go to state 110
    FUNC_ACTIVE_INNER_ARGES  go to state 111
    CONST                    go to state 112


State 75

   25 EXPRASION: ID '[' . EXPRASION ']' '=' VALUE

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48

    EXPRASION    go to state 113
    FUNC_ACTIVE  go to state 52
    CONST        go to state 63


State 76

   26 EXPRASION: ID '=' . EXPRASION

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48

    EXPRASION    go to state 114
    FUNC_ACTIVE  go to state 52
    CONST        go to state 63


State 77

   23 EXPRASION: '-' EXPRASION .
   27          | EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 85

    NE_OP     [reduce using rule 23 (EXPRASION)]
    $default  reduce using rule 23 (EXPRASION)


State 78

   24 EXPRASION: '!' EXPRASION .
   27          | EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 85

    NE_OP     [reduce using rule 24 (EXPRASION)]
    $default  reduce using rule 24 (EXPRASION)


State 79

   21 EXPRASION: '^' EXPRASION .
   27          | EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 85

    NE_OP     [reduce using rule 21 (EXPRASION)]
    $default  reduce using rule 21 (EXPRASION)


State 80

   22 EXPRASION: '&' EXPRASION .
   27          | EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 85

    NE_OP     [reduce using rule 22 (EXPRASION)]
    $default  reduce using rule 22 (EXPRASION)


State 81

   17 EXPRASION: '(' EXPRASION . ')'
   27          | EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 82
    GE_OP   shift, and go to state 83
    SE_OP   shift, and go to state 84
    NE_OP   shift, and go to state 85
    OR_OP   shift, and go to state 86
    EQL_OP  shift, and go to state 87
    '+'     shift, and go to state 89
    '-'     shift, and go to state 90
    '*'     shift, and go to state 91
    '/'     shift, and go to state 92
    '>'     shift, and go to state 93
    '<'     shift, and go to state 94
    ')'     shift, and go to state 115


State 82

   28 EXPRASION: EXPRASION AND_OP . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE        go to state 120
    FUNC_ACTIVE  go to state 121
    CONST        go to state 122


State 83

   35 EXPRASION: EXPRASION GE_OP . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE        go to state 123
    FUNC_ACTIVE  go to state 121
    CONST        go to state 122


State 84

   36 EXPRASION: EXPRASION SE_OP . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE        go to state 124
    FUNC_ACTIVE  go to state 121
    CONST        go to state 122


State 85

   27 EXPRASION: EXPRASION NE_OP . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE        go to state 125
    FUNC_ACTIVE  go to state 121
    CONST        go to state 122


State 86

   29 EXPRASION: EXPRASION OR_OP . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE        go to state 126
    FUNC_ACTIVE  go to state 121
    CONST        go to state 122


State 87

   34 EXPRASION: EXPRASION EQL_OP . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE        go to state 127
    FUNC_ACTIVE  go to state 121
    CONST        go to state 122


State 88

   59 STASTMENT: EXPRASION ';' .

    $default  reduce using rule 59 (STASTMENT)


State 89

   30 EXPRASION: EXPRASION '+' . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE        go to state 128
    FUNC_ACTIVE  go to state 121
    CONST        go to state 122


State 90

   31 EXPRASION: EXPRASION '-' . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE        go to state 129
    FUNC_ACTIVE  go to state 121
    CONST        go to state 122


State 91

   33 EXPRASION: EXPRASION '*' . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE        go to state 130
    FUNC_ACTIVE  go to state 121
    CONST        go to state 122


State 92

   32 EXPRASION: EXPRASION '/' . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE        go to state 131
    FUNC_ACTIVE  go to state 121
    CONST        go to state 122


State 93

   37 EXPRASION: EXPRASION '>' . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE        go to state 132
    FUNC_ACTIVE  go to state 121
    CONST        go to state 122


State 94

   38 EXPRASION: EXPRASION '<' . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE        go to state 133
    FUNC_ACTIVE  go to state 121
    CONST        go to state 122


State 95

   54 STASTMENT_LIST: STASTMENT_LIST STASTMENT .

    $default  reduce using rule 54 (STASTMENT_LIST)


State 96

   65 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT '}' .

    $default  reduce using rule 65 (COMPUND_STATMENT_PROC)


State 97

   54 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   68 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK STASTMENT_LIST .

    IF       shift, and go to state 34
    FOR      shift, and go to state 35
    WHILE    shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48
    '{'      shift, and go to state 20

    $default  reduce using rule 68 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 51
    FUNC_ACTIVE            go to state 52
    IF_STASTMENT           go to state 54
    STASTMENT              go to state 95
    LOOP_STATMENT          go to state 56
    COMPUND_STATMENT_PROC  go to state 57
    CONST                  go to state 63


State 98

   69 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK .

    $default  reduce using rule 69 (DEC_INNER_BLOCK)


State 99

   74 VAR_DECLARE: VAR_DECLARE VF .

    $default  reduce using rule 74 (VAR_DECLARE)


State 100

   11 OUT_ARGES: INNER_ARGS ':' TYPE ';' . OUT_ARGES

    ID  shift, and go to state 15

    OUT_ARGES   go to state 134
    INNER_ARGS  go to state 18


State 101

   81 TYPE: STRING '[' INT_NUM . ']'

    ']'  shift, and go to state 135


State 102

   14 FUNC_BLOCK: '{' RETURN . EXPRASION ';' '}'

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48

    EXPRASION    go to state 136
    FUNC_ACTIVE  go to state 52
    CONST        go to state 63


State 103

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT . RETURN EXPRASION ';' '}'

    RETURN  shift, and go to state 137


State 104

   27 EXPRASION: EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE
   56 IF_STASTMENT: IF '(' EXPRASION . ')' STASTMENT ELSE STASTMENT
   57             | IF '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 82
    GE_OP   shift, and go to state 83
    SE_OP   shift, and go to state 84
    NE_OP   shift, and go to state 85
    OR_OP   shift, and go to state 86
    EQL_OP  shift, and go to state 87
    '+'     shift, and go to state 89
    '-'     shift, and go to state 90
    '*'     shift, and go to state 91
    '/'     shift, and go to state 92
    '>'     shift, and go to state 93
    '<'     shift, and go to state 94
    ')'     shift, and go to state 138


State 105

   27 EXPRASION: EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE
   63 LOOP_STATMENT: FOR '(' EXPRASION . ';' EXPRASION ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 82
    GE_OP   shift, and go to state 83
    SE_OP   shift, and go to state 84
    NE_OP   shift, and go to state 85
    OR_OP   shift, and go to state 86
    EQL_OP  shift, and go to state 87
    ';'     shift, and go to state 139
    '+'     shift, and go to state 89
    '-'     shift, and go to state 90
    '*'     shift, and go to state 91
    '/'     shift, and go to state 92
    '>'     shift, and go to state 93
    '<'     shift, and go to state 94


State 106

   27 EXPRASION: EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE
   62 LOOP_STATMENT: WHILE '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 82
    GE_OP   shift, and go to state 83
    SE_OP   shift, and go to state 84
    NE_OP   shift, and go to state 85
    OR_OP   shift, and go to state 86
    EQL_OP  shift, and go to state 87
    '+'     shift, and go to state 89
    '-'     shift, and go to state 90
    '*'     shift, and go to state 91
    '/'     shift, and go to state 92
    '>'     shift, and go to state 93
    '<'     shift, and go to state 94
    ')'     shift, and go to state 140


State 107

   76 VFDEC: INNER_ARGS ':' . TYPE ';'
   77      | INNER_ARGS ':' . TYPE ';' VFDEC

    CHAR         shift, and go to state 25
    REAL         shift, and go to state 26
    INT          shift, and go to state 27
    BOOL         shift, and go to state 28
    STRING       shift, and go to state 29
    CHAR_POINER  shift, and go to state 30
    REAL_POINER  shift, and go to state 31
    INT_POINER   shift, and go to state 32

    TYPE  go to state 141


State 108

   46 FUNC_ACTIVE: ID . '(' ')'
   47            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'
   48 FUNC_ACTIVE_INNER_ARGES: ID .
   51                        | ID . ',' FUNC_ACTIVE_INNER_ARGES

    '('  shift, and go to state 74
    ','  shift, and go to state 142

    $default  reduce using rule 48 (FUNC_ACTIVE_INNER_ARGES)


State 109

   46 FUNC_ACTIVE: ID '(' ')' .

    $default  reduce using rule 46 (FUNC_ACTIVE)


State 110

   49 FUNC_ACTIVE_INNER_ARGES: FUNC_ACTIVE .
   53                        | FUNC_ACTIVE . ',' FUNC_ACTIVE_INNER_ARGES

    ','  shift, and go to state 143

    $default  reduce using rule 49 (FUNC_ACTIVE_INNER_ARGES)


State 111

   47 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES . ')'

    ')'  shift, and go to state 144


State 112

   50 FUNC_ACTIVE_INNER_ARGES: CONST .
   52                        | CONST . ',' FUNC_ACTIVE_INNER_ARGES

    ','  shift, and go to state 145

    $default  reduce using rule 50 (FUNC_ACTIVE_INNER_ARGES)


State 113

   25 EXPRASION: ID '[' EXPRASION . ']' '=' VALUE
   27          | EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 82
    GE_OP   shift, and go to state 83
    SE_OP   shift, and go to state 84
    NE_OP   shift, and go to state 85
    OR_OP   shift, and go to state 86
    EQL_OP  shift, and go to state 87
    '+'     shift, and go to state 89
    '-'     shift, and go to state 90
    '*'     shift, and go to state 91
    '/'     shift, and go to state 92
    '>'     shift, and go to state 93
    '<'     shift, and go to state 94
    ']'     shift, and go to state 146


State 114

   26 EXPRASION: ID '=' EXPRASION .
   27          | EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 82
    GE_OP   shift, and go to state 83
    SE_OP   shift, and go to state 84
    NE_OP   shift, and go to state 85
    OR_OP   shift, and go to state 86
    EQL_OP  shift, and go to state 87
    '+'     shift, and go to state 89
    '-'     shift, and go to state 90
    '*'     shift, and go to state 91
    '/'     shift, and go to state 92
    '>'     shift, and go to state 93
    '<'     shift, and go to state 94

    AND_OP    [reduce using rule 26 (EXPRASION)]
    GE_OP     [reduce using rule 26 (EXPRASION)]
    SE_OP     [reduce using rule 26 (EXPRASION)]
    NE_OP     [reduce using rule 26 (EXPRASION)]
    OR_OP     [reduce using rule 26 (EXPRASION)]
    EQL_OP    [reduce using rule 26 (EXPRASION)]
    '+'       [reduce using rule 26 (EXPRASION)]
    '-'       [reduce using rule 26 (EXPRASION)]
    '*'       [reduce using rule 26 (EXPRASION)]
    '/'       [reduce using rule 26 (EXPRASION)]
    '>'       [reduce using rule 26 (EXPRASION)]
    '<'       [reduce using rule 26 (EXPRASION)]
    $default  reduce using rule 26 (EXPRASION)


State 115

   17 EXPRASION: '(' EXPRASION ')' .

    $default  reduce using rule 17 (EXPRASION)


State 116

   42 VALUE: TRUE .

    $default  reduce using rule 42 (VALUE)


State 117

   43 VALUE: FALSE .

    $default  reduce using rule 43 (VALUE)


State 118

   44 VALUE: ID .
   46 FUNC_ACTIVE: ID . '(' ')'
   47            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 74

    $default  reduce using rule 44 (VALUE)


State 119

   41 VALUE: '(' . EXPRASION ')'

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48

    EXPRASION    go to state 147
    FUNC_ACTIVE  go to state 52
    CONST        go to state 63


State 120

   28 EXPRASION: EXPRASION AND_OP VALUE .

    $default  reduce using rule 28 (EXPRASION)


State 121

   45 VALUE: FUNC_ACTIVE .

    $default  reduce using rule 45 (VALUE)


State 122

   40 VALUE: CONST .

    $default  reduce using rule 40 (VALUE)


State 123

   35 EXPRASION: EXPRASION GE_OP VALUE .

    $default  reduce using rule 35 (EXPRASION)


State 124

   36 EXPRASION: EXPRASION SE_OP VALUE .

    $default  reduce using rule 36 (EXPRASION)


State 125

   27 EXPRASION: EXPRASION NE_OP VALUE .

    $default  reduce using rule 27 (EXPRASION)


State 126

   29 EXPRASION: EXPRASION OR_OP VALUE .

    $default  reduce using rule 29 (EXPRASION)


State 127

   34 EXPRASION: EXPRASION EQL_OP VALUE .

    $default  reduce using rule 34 (EXPRASION)


State 128

   30 EXPRASION: EXPRASION '+' VALUE .

    $default  reduce using rule 30 (EXPRASION)


State 129

   31 EXPRASION: EXPRASION '-' VALUE .

    $default  reduce using rule 31 (EXPRASION)


State 130

   33 EXPRASION: EXPRASION '*' VALUE .

    $default  reduce using rule 33 (EXPRASION)


State 131

   32 EXPRASION: EXPRASION '/' VALUE .

    $default  reduce using rule 32 (EXPRASION)


State 132

   37 EXPRASION: EXPRASION '>' VALUE .

    $default  reduce using rule 37 (EXPRASION)


State 133

   38 EXPRASION: EXPRASION '<' VALUE .

    $default  reduce using rule 38 (EXPRASION)


State 134

   11 OUT_ARGES: INNER_ARGS ':' TYPE ';' OUT_ARGES .

    $default  reduce using rule 11 (OUT_ARGES)


State 135

   81 TYPE: STRING '[' INT_NUM ']' .

    $default  reduce using rule 81 (TYPE)


State 136

   14 FUNC_BLOCK: '{' RETURN EXPRASION . ';' '}'
   27 EXPRASION: EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 82
    GE_OP   shift, and go to state 83
    SE_OP   shift, and go to state 84
    NE_OP   shift, and go to state 85
    OR_OP   shift, and go to state 86
    EQL_OP  shift, and go to state 87
    ';'     shift, and go to state 148
    '+'     shift, and go to state 89
    '-'     shift, and go to state 90
    '*'     shift, and go to state 91
    '/'     shift, and go to state 92
    '>'     shift, and go to state 93
    '<'     shift, and go to state 94


State 137

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN . EXPRASION ';' '}'

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48

    EXPRASION    go to state 149
    FUNC_ACTIVE  go to state 52
    CONST        go to state 63


State 138

   56 IF_STASTMENT: IF '(' EXPRASION ')' . STASTMENT ELSE STASTMENT
   57             | IF '(' EXPRASION ')' . STASTMENT

    IF       shift, and go to state 34
    FOR      shift, and go to state 35
    WHILE    shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48
    '{'      shift, and go to state 20

    EXPRASION              go to state 51
    FUNC_ACTIVE            go to state 52
    IF_STASTMENT           go to state 54
    STASTMENT              go to state 150
    LOOP_STATMENT          go to state 56
    COMPUND_STATMENT_PROC  go to state 57
    CONST                  go to state 63


State 139

   63 LOOP_STATMENT: FOR '(' EXPRASION ';' . EXPRASION ';' EXPRASION ')' STASTMENT

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48

    EXPRASION    go to state 151
    FUNC_ACTIVE  go to state 52
    CONST        go to state 63


State 140

   62 LOOP_STATMENT: WHILE '(' EXPRASION ')' . STASTMENT

    IF       shift, and go to state 34
    FOR      shift, and go to state 35
    WHILE    shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48
    '{'      shift, and go to state 20

    EXPRASION              go to state 51
    FUNC_ACTIVE            go to state 52
    IF_STASTMENT           go to state 54
    STASTMENT              go to state 152
    LOOP_STATMENT          go to state 56
    COMPUND_STATMENT_PROC  go to state 57
    CONST                  go to state 63


State 141

   76 VFDEC: INNER_ARGS ':' TYPE . ';'
   77      | INNER_ARGS ':' TYPE . ';' VFDEC

    ';'  shift, and go to state 153


State 142

   51 FUNC_ACTIVE_INNER_ARGES: ID ',' . FUNC_ACTIVE_INNER_ARGES

    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 108

    FUNC_ACTIVE              go to state 110
    FUNC_ACTIVE_INNER_ARGES  go to state 154
    CONST                    go to state 112


State 143

   53 FUNC_ACTIVE_INNER_ARGES: FUNC_ACTIVE ',' . FUNC_ACTIVE_INNER_ARGES

    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 108

    FUNC_ACTIVE              go to state 110
    FUNC_ACTIVE_INNER_ARGES  go to state 155
    CONST                    go to state 112


State 144

   47 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES ')' .

    $default  reduce using rule 47 (FUNC_ACTIVE)


State 145

   52 FUNC_ACTIVE_INNER_ARGES: CONST ',' . FUNC_ACTIVE_INNER_ARGES

    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 108

    FUNC_ACTIVE              go to state 110
    FUNC_ACTIVE_INNER_ARGES  go to state 156
    CONST                    go to state 112


State 146

   25 EXPRASION: ID '[' EXPRASION ']' . '=' VALUE

    '='  shift, and go to state 157


State 147

   27 EXPRASION: EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE
   41 VALUE: '(' EXPRASION . ')'

    AND_OP  shift, and go to state 82
    GE_OP   shift, and go to state 83
    SE_OP   shift, and go to state 84
    NE_OP   shift, and go to state 85
    OR_OP   shift, and go to state 86
    EQL_OP  shift, and go to state 87
    '+'     shift, and go to state 89
    '-'     shift, and go to state 90
    '*'     shift, and go to state 91
    '/'     shift, and go to state 92
    '>'     shift, and go to state 93
    '<'     shift, and go to state 94
    ')'     shift, and go to state 158


State 148

   14 FUNC_BLOCK: '{' RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 159


State 149

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION . ';' '}'
   27 EXPRASION: EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 82
    GE_OP   shift, and go to state 83
    SE_OP   shift, and go to state 84
    NE_OP   shift, and go to state 85
    OR_OP   shift, and go to state 86
    EQL_OP  shift, and go to state 87
    ';'     shift, and go to state 160
    '+'     shift, and go to state 89
    '-'     shift, and go to state 90
    '*'     shift, and go to state 91
    '/'     shift, and go to state 92
    '>'     shift, and go to state 93
    '<'     shift, and go to state 94


State 150

   56 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT . ELSE STASTMENT
   57             | IF '(' EXPRASION ')' STASTMENT .

    ELSE  shift, and go to state 161

    $default  reduce using rule 57 (IF_STASTMENT)


State 151

   27 EXPRASION: EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE
   63 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION . ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 82
    GE_OP   shift, and go to state 83
    SE_OP   shift, and go to state 84
    NE_OP   shift, and go to state 85
    OR_OP   shift, and go to state 86
    EQL_OP  shift, and go to state 87
    ';'     shift, and go to state 162
    '+'     shift, and go to state 89
    '-'     shift, and go to state 90
    '*'     shift, and go to state 91
    '/'     shift, and go to state 92
    '>'     shift, and go to state 93
    '<'     shift, and go to state 94


State 152

   62 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT .

    $default  reduce using rule 62 (LOOP_STATMENT)


State 153

   76 VFDEC: INNER_ARGS ':' TYPE ';' .
   77      | INNER_ARGS ':' TYPE ';' . VFDEC

    ID  shift, and go to state 15

    ID        [reduce using rule 76 (VFDEC)]
    $default  reduce using rule 76 (VFDEC)

    INNER_ARGS  go to state 72
    VFDEC       go to state 163


State 154

   51 FUNC_ACTIVE_INNER_ARGES: ID ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 51 (FUNC_ACTIVE_INNER_ARGES)


State 155

   53 FUNC_ACTIVE_INNER_ARGES: FUNC_ACTIVE ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 53 (FUNC_ACTIVE_INNER_ARGES)


State 156

   52 FUNC_ACTIVE_INNER_ARGES: CONST ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 52 (FUNC_ACTIVE_INNER_ARGES)


State 157

   25 EXPRASION: ID '[' EXPRASION ']' '=' . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE        go to state 164
    FUNC_ACTIVE  go to state 121
    CONST        go to state 122


State 158

   41 VALUE: '(' EXPRASION ')' .

    $default  reduce using rule 41 (VALUE)


State 159

   14 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}' .

    $default  reduce using rule 14 (FUNC_BLOCK)


State 160

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 165


State 161

   56 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE . STASTMENT

    IF       shift, and go to state 34
    FOR      shift, and go to state 35
    WHILE    shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48
    '{'      shift, and go to state 20

    EXPRASION              go to state 51
    FUNC_ACTIVE            go to state 52
    IF_STASTMENT           go to state 54
    STASTMENT              go to state 166
    LOOP_STATMENT          go to state 56
    COMPUND_STATMENT_PROC  go to state 57
    CONST                  go to state 63


State 162

   63 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' . EXPRASION ')' STASTMENT

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48

    EXPRASION    go to state 167
    FUNC_ACTIVE  go to state 52
    CONST        go to state 63


State 163

   77 VFDEC: INNER_ARGS ':' TYPE ';' VFDEC .

    $default  reduce using rule 77 (VFDEC)


State 164

   25 EXPRASION: ID '[' EXPRASION ']' '=' VALUE .

    $default  reduce using rule 25 (EXPRASION)


State 165

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}' .

    $default  reduce using rule 15 (FUNC_BLOCK)


State 166

   56 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT .

    $default  reduce using rule 56 (IF_STASTMENT)


State 167

   27 EXPRASION: EXPRASION . NE_OP VALUE
   28          | EXPRASION . AND_OP VALUE
   29          | EXPRASION . OR_OP VALUE
   30          | EXPRASION . '+' VALUE
   31          | EXPRASION . '-' VALUE
   32          | EXPRASION . '/' VALUE
   33          | EXPRASION . '*' VALUE
   34          | EXPRASION . EQL_OP VALUE
   35          | EXPRASION . GE_OP VALUE
   36          | EXPRASION . SE_OP VALUE
   37          | EXPRASION . '>' VALUE
   38          | EXPRASION . '<' VALUE
   63 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 82
    GE_OP   shift, and go to state 83
    SE_OP   shift, and go to state 84
    NE_OP   shift, and go to state 85
    OR_OP   shift, and go to state 86
    EQL_OP  shift, and go to state 87
    '+'     shift, and go to state 89
    '-'     shift, and go to state 90
    '*'     shift, and go to state 91
    '/'     shift, and go to state 92
    '>'     shift, and go to state 93
    '<'     shift, and go to state 94
    ')'     shift, and go to state 168


State 168

   63 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' . STASTMENT

    IF       shift, and go to state 34
    FOR      shift, and go to state 35
    WHILE    shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    INT_NUM  shift, and go to state 40
    R_NUM    shift, and go to state 41
    HEX_NUM  shift, and go to state 42
    ID       shift, and go to state 43
    '-'      shift, and go to state 44
    '!'      shift, and go to state 45
    '^'      shift, and go to state 46
    '&'      shift, and go to state 47
    '('      shift, and go to state 48
    '{'      shift, and go to state 20

    EXPRASION              go to state 51
    FUNC_ACTIVE            go to state 52
    IF_STASTMENT           go to state 54
    STASTMENT              go to state 169
    LOOP_STATMENT          go to state 56
    COMPUND_STATMENT_PROC  go to state 57
    CONST                  go to state 63


State 169

   63 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT .

    $default  reduce using rule 63 (LOOP_STATMENT)
