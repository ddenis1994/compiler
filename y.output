Nonterminals useless in grammar

   RETURN_STATMENT
   COMPUND_STATMENT


Terminals unused in grammar

   FLOAT_POINER
   CHAR_POINTER
   REAL_POINTER
   INT_POINTER
   NULL_VALUE
   BOOL_VALUE
   test
   UFUNC


Rules useless in grammar

   96 RETURN_STATMENT: RETURN EXPRASION ';'

   97 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT RETURN_STATMENT '}'
   98                 | '{' RETURN_STATMENT '}'


State 89 conflicts: 1 shift/reduce
State 90 conflicts: 1 shift/reduce
State 91 conflicts: 1 shift/reduce
State 92 conflicts: 1 shift/reduce
State 135 conflicts: 12 shift/reduce


Grammar

    0 $accept: S $end

    1 S: MAINBLOCK

    2 MAIN_END: PROC MAIN '(' ')' COMPUND_STATMENT_PROC

    3 MAINBLOCK: FUNC_PROC_DEC MAIN_END
    4          | MAIN_END

    5 FUNC_PROC_DEC: DEF_A
    6              | FUNC_PROC_DEC DEF_A

    7 DEF_A: FUNC_DEF
    8      | PROC_DEF

    9 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC

   10 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK

   11 ARGES: '(' ')'
   12      | '(' OUT_ARGES ')'

   13 OUT_ARGES: INNER_ARGS ':' TYPE
   14          | INNER_ARGS ':' TYPE ';' OUT_ARGES

   15 INNER_ARGS: ID
   16           | ID ',' INNER_ARGS

   17 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}'
   18           | '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

   19 EXPRASION: CONST
   20          | '(' EXPRASION ')'
   21          | ID
   22          | '^' EXPRASION
   23          | '&' EXPRASION
   24          | '-' EXPRASION
   25          | '!' EXPRASION
   26          | ADDR_ID '=' VALUE
   27          | ID '[' EXPRASION ']' '=' VALUE
   28          | ID '[' EXPRASION ']'
   29          | ID '=' EXPRASION
   30          | EXPRASION NE_OP VALUE
   31          | EXPRASION AND_OP VALUE
   32          | EXPRASION OR_OP VALUE
   33          | EXPRASION '+' VALUE
   34          | EXPRASION '-' VALUE
   35          | EXPRASION '/' VALUE
   36          | EXPRASION '*' VALUE
   37          | EXPRASION EQL_OP VALUE
   38          | EXPRASION GE_OP VALUE
   39          | EXPRASION SE_OP VALUE
   40          | EXPRASION '>' VALUE
   41          | EXPRASION '<' VALUE
   42          | FUNC_ACTIVE
   43          | '|' EXPRASION '|'

   44 VALUE: ID '[' EXPRASION ']'
   45      | CONST
   46      | '(' EXPRASION ')'
   47      | TRUE
   48      | FALSE
   49      | ID
   50      | FUNC_ACTIVE
   51      | '|' VALUE '|'
   52      | '^' VALUE
   53      | '&' VALUE
   54      | '-' VALUE
   55      | '!' VALUE

   56 FUNC_ACTIVE: ID '(' ')'
   57            | ID '(' FUNC_ACTIVE_INNER_ARGES ')'

   58 FUNC_ACTIVE_INNER_ARGES: EXPRASION
   59                        | EXPRASION ',' FUNC_ACTIVE_INNER_ARGES

   60 STASTMENT_LIST: STASTMENT_LIST STASTMENT
   61               | STASTMENT

   62 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   63             | IF '(' EXPRASION ')' STASTMENT

   64 STASTMENT: COMPUND_STATMENT_PROC
   65          | EXPRASION ';'
   66          | IF_STASTMENT
   67          | LOOP_STATMENT

   68 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT
   69              | FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

   70 COMPUND_STATMENT_PROC: '{' '}'
   71                      | '{' INNER_COMPUND_STATMENT '}'

   72 INNER_COMPUND_STATMENT: STASTMENT_LIST
   73                       | DEC_INNER_BLOCK
   74                       | DEC_INNER_BLOCK STASTMENT_LIST

   75 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK
   76                | NEW_DECLARE

   77 NEW_DECLARE: VF
   78            | DEF_A

   79 VF: VAR VFDEC

   80 VFDEC: INNER_ARGS ':' TYPE ';'

   81 CONST: INT_NUM
   82      | R_NUM
   83      | HEX_NUM
   84      | NULLA
   85      | CHAR_VALUE
   86      | STRING_VALUE
   87      | BOOL_VAL

   88 TYPE: STRING '[' INT_NUM ']'
   89     | BOOL
   90     | INT
   91     | REAL
   92     | CHAR
   93     | CHAR_POINER
   94     | REAL_POINER
   95     | INT_POINER


Terminals, with rules where they appear

$end (0) 0
'!' (33) 25 55
'&' (38) 23 53
'(' (40) 2 11 12 20 46 56 57 62 63 68 69
')' (41) 2 11 12 20 46 56 57 62 63 68 69
'*' (42) 36
'+' (43) 33
',' (44) 16 59
'-' (45) 24 34 54
'/' (47) 35
':' (58) 13 14 80
';' (59) 14 17 18 65 69 80
'<' (60) 41
'=' (61) 26 27 29
'>' (62) 40
'[' (91) 27 28 44 88
']' (93) 27 28 44 88
'^' (94) 22 52
'{' (123) 17 18 70 71
'|' (124) 43 51
'}' (125) 17 18 70 71
error (256)
CHAR <String> (258) 92
REAL <String> (259) 91
INT <String> (260) 90
BOOL <String> (261) 89
STRING <String> (262) 88
CHAR_POINER <String> (263) 93
REAL_POINER <String> (264) 94
FLOAT_POINER <String> (265)
INT_POINER <String> (266) 95
CHAR_POINTER <String> (267)
REAL_POINTER <String> (268)
INT_POINTER <String> (269)
NULLA <String> (270) 84
ELSE (271) 62
IF (272) 62 63
FOR (273) 69
WHILE (274) 68
TRUE (275) 47
FALSE (276) 48
RETURN (277) 10 17 18
MAIN (278) 2
VAR <String> (279) 79
FUNC <String> (280) 10
PROC <String> (281) 2 9
ADDR_ID <String> (282) 26
NULL_VALUE (283)
AND_OP (284) 31
GE_OP (285) 38
SE_OP (286) 39
NE_OP (287) 30
OR_OP (288) 32
EQL_OP (289) 37
BOOL_VALUE <String> (290)
CHAR_VALUE <String> (291) 85
STRING_VALUE <String> (292) 86
INT_NUM <String> (293) 81 88
R_NUM <String> (294) 82
HEX_NUM <String> (295) 83
ID <String> (296) 9 10 15 16 21 27 28 29 44 49 56 57
BOOL_VAL <String> (297) 87
IFX (298)
test (299)
UMINUS (300)
UFUNC (301)


Nonterminals, with rules where they appear

$accept (67)
    on left: 0
S <Node> (68)
    on left: 1, on right: 0
MAIN_END <Node> (69)
    on left: 2, on right: 3 4
MAINBLOCK <Node> (70)
    on left: 3 4, on right: 1
FUNC_PROC_DEC <Node> (71)
    on left: 5 6, on right: 3 6
DEF_A <Node> (72)
    on left: 7 8, on right: 5 6 78
PROC_DEF <Node> (73)
    on left: 9, on right: 8
FUNC_DEF <Node> (74)
    on left: 10, on right: 7
ARGES <Node> (75)
    on left: 11 12, on right: 9 10
OUT_ARGES <Node> (76)
    on left: 13 14, on right: 12 14
INNER_ARGS <Node> (77)
    on left: 15 16, on right: 13 14 16 80
FUNC_BLOCK <Node> (78)
    on left: 17 18, on right: 10
EXPRASION <Node> (79)
    on left: 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36
    37 38 39 40 41 42 43, on right: 17 18 20 22 23 24 25 27 28 29 30
    31 32 33 34 35 36 37 38 39 40 41 43 44 46 58 59 62 63 65 68 69
VALUE <Node> (80)
    on left: 44 45 46 47 48 49 50 51 52 53 54 55, on right: 26 27 30
    31 32 33 34 35 36 37 38 39 40 41 51 52 53 54 55
FUNC_ACTIVE <Node> (81)
    on left: 56 57, on right: 42 50
FUNC_ACTIVE_INNER_ARGES <Node> (82)
    on left: 58 59, on right: 57 59
STASTMENT_LIST <Node> (83)
    on left: 60 61, on right: 60 72 74
IF_STASTMENT <Node> (84)
    on left: 62 63, on right: 66
STASTMENT <Node> (85)
    on left: 64 65 66 67, on right: 60 61 62 63 68 69
LOOP_STATMENT <Node> (86)
    on left: 68 69, on right: 67
COMPUND_STATMENT_PROC <Node> (87)
    on left: 70 71, on right: 2 9 64
INNER_COMPUND_STATMENT <Node> (88)
    on left: 72 73 74, on right: 18 71
DEC_INNER_BLOCK <Node> (89)
    on left: 75 76, on right: 73 74 75
NEW_DECLARE <Node> (90)
    on left: 77 78, on right: 75 76
VF <Node> (91)
    on left: 79, on right: 77
VFDEC <Node> (92)
    on left: 80, on right: 79
CONST <Node> (93)
    on left: 81 82 83 84 85 86 87, on right: 19 45
TYPE <String> (94)
    on left: 88 89 90 91 92 93 94 95, on right: 10 13 14 80


State 0

    0 $accept: . S $end

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    S              go to state 3
    MAIN_END       go to state 4
    MAINBLOCK      go to state 5
    FUNC_PROC_DEC  go to state 6
    DEF_A          go to state 7
    PROC_DEF       go to state 8
    FUNC_DEF       go to state 9


State 1

   10 FUNC_DEF: FUNC . ID ARGES RETURN TYPE FUNC_BLOCK

    ID  shift, and go to state 10


State 2

    2 MAIN_END: PROC . MAIN '(' ')' COMPUND_STATMENT_PROC
    9 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT_PROC

    MAIN  shift, and go to state 11
    ID    shift, and go to state 12


State 3

    0 $accept: S . $end

    $end  shift, and go to state 13


State 4

    4 MAINBLOCK: MAIN_END .

    $default  reduce using rule 4 (MAINBLOCK)


State 5

    1 S: MAINBLOCK .

    $default  reduce using rule 1 (S)


State 6

    3 MAINBLOCK: FUNC_PROC_DEC . MAIN_END
    6 FUNC_PROC_DEC: FUNC_PROC_DEC . DEF_A

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    MAIN_END  go to state 14
    DEF_A     go to state 15
    PROC_DEF  go to state 8
    FUNC_DEF  go to state 9


State 7

    5 FUNC_PROC_DEC: DEF_A .

    $default  reduce using rule 5 (FUNC_PROC_DEC)


State 8

    8 DEF_A: PROC_DEF .

    $default  reduce using rule 8 (DEF_A)


State 9

    7 DEF_A: FUNC_DEF .

    $default  reduce using rule 7 (DEF_A)


State 10

   10 FUNC_DEF: FUNC ID . ARGES RETURN TYPE FUNC_BLOCK

    '('  shift, and go to state 16

    ARGES  go to state 17


State 11

    2 MAIN_END: PROC MAIN . '(' ')' COMPUND_STATMENT_PROC

    '('  shift, and go to state 18


State 12

    9 PROC_DEF: PROC ID . ARGES COMPUND_STATMENT_PROC

    '('  shift, and go to state 16

    ARGES  go to state 19


State 13

    0 $accept: S $end .

    $default  accept


State 14

    3 MAINBLOCK: FUNC_PROC_DEC MAIN_END .

    $default  reduce using rule 3 (MAINBLOCK)


State 15

    6 FUNC_PROC_DEC: FUNC_PROC_DEC DEF_A .

    $default  reduce using rule 6 (FUNC_PROC_DEC)


State 16

   11 ARGES: '(' . ')'
   12      | '(' . OUT_ARGES ')'

    ID   shift, and go to state 20
    ')'  shift, and go to state 21

    OUT_ARGES   go to state 22
    INNER_ARGS  go to state 23


State 17

   10 FUNC_DEF: FUNC ID ARGES . RETURN TYPE FUNC_BLOCK

    RETURN  shift, and go to state 24


State 18

    2 MAIN_END: PROC MAIN '(' . ')' COMPUND_STATMENT_PROC

    ')'  shift, and go to state 25


State 19

    9 PROC_DEF: PROC ID ARGES . COMPUND_STATMENT_PROC

    '{'  shift, and go to state 26

    COMPUND_STATMENT_PROC  go to state 27


State 20

   15 INNER_ARGS: ID .
   16           | ID . ',' INNER_ARGS

    ','  shift, and go to state 28

    $default  reduce using rule 15 (INNER_ARGS)


State 21

   11 ARGES: '(' ')' .

    $default  reduce using rule 11 (ARGES)


State 22

   12 ARGES: '(' OUT_ARGES . ')'

    ')'  shift, and go to state 29


State 23

   13 OUT_ARGES: INNER_ARGS . ':' TYPE
   14          | INNER_ARGS . ':' TYPE ';' OUT_ARGES

    ':'  shift, and go to state 30


State 24

   10 FUNC_DEF: FUNC ID ARGES RETURN . TYPE FUNC_BLOCK

    CHAR         shift, and go to state 31
    REAL         shift, and go to state 32
    INT          shift, and go to state 33
    BOOL         shift, and go to state 34
    STRING       shift, and go to state 35
    CHAR_POINER  shift, and go to state 36
    REAL_POINER  shift, and go to state 37
    INT_POINER   shift, and go to state 38

    TYPE  go to state 39


State 25

    2 MAIN_END: PROC MAIN '(' ')' . COMPUND_STATMENT_PROC

    '{'  shift, and go to state 26

    COMPUND_STATMENT_PROC  go to state 40


State 26

   70 COMPUND_STATMENT_PROC: '{' . '}'
   71                      | '{' . INNER_COMPUND_STATMENT '}'

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    VAR           shift, and go to state 45
    FUNC          shift, and go to state 1
    PROC          shift, and go to state 46
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '{'           shift, and go to state 26
    '}'           shift, and go to state 60
    '|'           shift, and go to state 61

    DEF_A                   go to state 62
    PROC_DEF                go to state 8
    FUNC_DEF                go to state 9
    EXPRASION               go to state 63
    FUNC_ACTIVE             go to state 64
    STASTMENT_LIST          go to state 65
    IF_STASTMENT            go to state 66
    STASTMENT               go to state 67
    LOOP_STATMENT           go to state 68
    COMPUND_STATMENT_PROC   go to state 69
    INNER_COMPUND_STATMENT  go to state 70
    DEC_INNER_BLOCK         go to state 71
    NEW_DECLARE             go to state 72
    VF                      go to state 73
    CONST                   go to state 74


State 27

    9 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC .

    $default  reduce using rule 9 (PROC_DEF)


State 28

   16 INNER_ARGS: ID ',' . INNER_ARGS

    ID  shift, and go to state 20

    INNER_ARGS  go to state 75


State 29

   12 ARGES: '(' OUT_ARGES ')' .

    $default  reduce using rule 12 (ARGES)


State 30

   13 OUT_ARGES: INNER_ARGS ':' . TYPE
   14          | INNER_ARGS ':' . TYPE ';' OUT_ARGES

    CHAR         shift, and go to state 31
    REAL         shift, and go to state 32
    INT          shift, and go to state 33
    BOOL         shift, and go to state 34
    STRING       shift, and go to state 35
    CHAR_POINER  shift, and go to state 36
    REAL_POINER  shift, and go to state 37
    INT_POINER   shift, and go to state 38

    TYPE  go to state 76


State 31

   92 TYPE: CHAR .

    $default  reduce using rule 92 (TYPE)


State 32

   91 TYPE: REAL .

    $default  reduce using rule 91 (TYPE)


State 33

   90 TYPE: INT .

    $default  reduce using rule 90 (TYPE)


State 34

   89 TYPE: BOOL .

    $default  reduce using rule 89 (TYPE)


State 35

   88 TYPE: STRING . '[' INT_NUM ']'

    '['  shift, and go to state 77


State 36

   93 TYPE: CHAR_POINER .

    $default  reduce using rule 93 (TYPE)


State 37

   94 TYPE: REAL_POINER .

    $default  reduce using rule 94 (TYPE)


State 38

   95 TYPE: INT_POINER .

    $default  reduce using rule 95 (TYPE)


State 39

   10 FUNC_DEF: FUNC ID ARGES RETURN TYPE . FUNC_BLOCK

    '{'  shift, and go to state 78

    FUNC_BLOCK  go to state 79


State 40

    2 MAIN_END: PROC MAIN '(' ')' COMPUND_STATMENT_PROC .

    $default  reduce using rule 2 (MAIN_END)


State 41

   84 CONST: NULLA .

    $default  reduce using rule 84 (CONST)


State 42

   62 IF_STASTMENT: IF . '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   63             | IF . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 80


State 43

   69 LOOP_STATMENT: FOR . '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    '('  shift, and go to state 81


State 44

   68 LOOP_STATMENT: WHILE . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 82


State 45

   79 VF: VAR . VFDEC

    ID  shift, and go to state 20

    INNER_ARGS  go to state 83
    VFDEC       go to state 84


State 46

    9 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT_PROC

    ID  shift, and go to state 12


State 47

   26 EXPRASION: ADDR_ID . '=' VALUE

    '='  shift, and go to state 85


State 48

   85 CONST: CHAR_VALUE .

    $default  reduce using rule 85 (CONST)


State 49

   86 CONST: STRING_VALUE .

    $default  reduce using rule 86 (CONST)


State 50

   81 CONST: INT_NUM .

    $default  reduce using rule 81 (CONST)


State 51

   82 CONST: R_NUM .

    $default  reduce using rule 82 (CONST)


State 52

   83 CONST: HEX_NUM .

    $default  reduce using rule 83 (CONST)


State 53

   21 EXPRASION: ID .
   27          | ID . '[' EXPRASION ']' '=' VALUE
   28          | ID . '[' EXPRASION ']'
   29          | ID . '=' EXPRASION
   56 FUNC_ACTIVE: ID . '(' ')'
   57            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 86
    '='  shift, and go to state 87
    '['  shift, and go to state 88

    $default  reduce using rule 21 (EXPRASION)


State 54

   87 CONST: BOOL_VAL .

    $default  reduce using rule 87 (CONST)


State 55

   24 EXPRASION: '-' . EXPRASION

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 89
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 56

   25 EXPRASION: '!' . EXPRASION

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 90
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 57

   22 EXPRASION: '^' . EXPRASION

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 91
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 58

   23 EXPRASION: '&' . EXPRASION

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 92
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 59

   20 EXPRASION: '(' . EXPRASION ')'

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 93
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 60

   70 COMPUND_STATMENT_PROC: '{' '}' .

    $default  reduce using rule 70 (COMPUND_STATMENT_PROC)


State 61

   43 EXPRASION: '|' . EXPRASION '|'

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 94
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 62

   78 NEW_DECLARE: DEF_A .

    $default  reduce using rule 78 (NEW_DECLARE)


State 63

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   65 STASTMENT: EXPRASION . ';'

    AND_OP  shift, and go to state 95
    GE_OP   shift, and go to state 96
    SE_OP   shift, and go to state 97
    NE_OP   shift, and go to state 98
    OR_OP   shift, and go to state 99
    EQL_OP  shift, and go to state 100
    ';'     shift, and go to state 101
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107


State 64

   42 EXPRASION: FUNC_ACTIVE .

    $default  reduce using rule 42 (EXPRASION)


State 65

   60 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   72 INNER_COMPUND_STATMENT: STASTMENT_LIST .

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '{'           shift, and go to state 26
    '|'           shift, and go to state 61

    $default  reduce using rule 72 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 63
    FUNC_ACTIVE            go to state 64
    IF_STASTMENT           go to state 66
    STASTMENT              go to state 108
    LOOP_STATMENT          go to state 68
    COMPUND_STATMENT_PROC  go to state 69
    CONST                  go to state 74


State 66

   66 STASTMENT: IF_STASTMENT .

    $default  reduce using rule 66 (STASTMENT)


State 67

   61 STASTMENT_LIST: STASTMENT .

    $default  reduce using rule 61 (STASTMENT_LIST)


State 68

   67 STASTMENT: LOOP_STATMENT .

    $default  reduce using rule 67 (STASTMENT)


State 69

   64 STASTMENT: COMPUND_STATMENT_PROC .

    $default  reduce using rule 64 (STASTMENT)


State 70

   71 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT . '}'

    '}'  shift, and go to state 109


State 71

   73 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK .
   74                       | DEC_INNER_BLOCK . STASTMENT_LIST

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '{'           shift, and go to state 26
    '|'           shift, and go to state 61

    $default  reduce using rule 73 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 63
    FUNC_ACTIVE            go to state 64
    STASTMENT_LIST         go to state 110
    IF_STASTMENT           go to state 66
    STASTMENT              go to state 67
    LOOP_STATMENT          go to state 68
    COMPUND_STATMENT_PROC  go to state 69
    CONST                  go to state 74


State 72

   75 DEC_INNER_BLOCK: NEW_DECLARE . DEC_INNER_BLOCK
   76                | NEW_DECLARE .

    VAR   shift, and go to state 45
    FUNC  shift, and go to state 1
    PROC  shift, and go to state 46

    $default  reduce using rule 76 (DEC_INNER_BLOCK)

    DEF_A            go to state 62
    PROC_DEF         go to state 8
    FUNC_DEF         go to state 9
    DEC_INNER_BLOCK  go to state 111
    NEW_DECLARE      go to state 72
    VF               go to state 73


State 73

   77 NEW_DECLARE: VF .

    $default  reduce using rule 77 (NEW_DECLARE)


State 74

   19 EXPRASION: CONST .

    $default  reduce using rule 19 (EXPRASION)


State 75

   16 INNER_ARGS: ID ',' INNER_ARGS .

    $default  reduce using rule 16 (INNER_ARGS)


State 76

   13 OUT_ARGES: INNER_ARGS ':' TYPE .
   14          | INNER_ARGS ':' TYPE . ';' OUT_ARGES

    ';'  shift, and go to state 112

    $default  reduce using rule 13 (OUT_ARGES)


State 77

   88 TYPE: STRING '[' . INT_NUM ']'

    INT_NUM  shift, and go to state 113


State 78

   17 FUNC_BLOCK: '{' . RETURN EXPRASION ';' '}'
   18           | '{' . INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    RETURN        shift, and go to state 114
    VAR           shift, and go to state 45
    FUNC          shift, and go to state 1
    PROC          shift, and go to state 46
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '{'           shift, and go to state 26
    '|'           shift, and go to state 61

    DEF_A                   go to state 62
    PROC_DEF                go to state 8
    FUNC_DEF                go to state 9
    EXPRASION               go to state 63
    FUNC_ACTIVE             go to state 64
    STASTMENT_LIST          go to state 65
    IF_STASTMENT            go to state 66
    STASTMENT               go to state 67
    LOOP_STATMENT           go to state 68
    COMPUND_STATMENT_PROC   go to state 69
    INNER_COMPUND_STATMENT  go to state 115
    DEC_INNER_BLOCK         go to state 71
    NEW_DECLARE             go to state 72
    VF                      go to state 73
    CONST                   go to state 74


State 79

   10 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK .

    $default  reduce using rule 10 (FUNC_DEF)


State 80

   62 IF_STASTMENT: IF '(' . EXPRASION ')' STASTMENT ELSE STASTMENT
   63             | IF '(' . EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 116
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 81

   69 LOOP_STATMENT: FOR '(' . EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 117
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 82

   68 LOOP_STATMENT: WHILE '(' . EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 118
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 83

   80 VFDEC: INNER_ARGS . ':' TYPE ';'

    ':'  shift, and go to state 119


State 84

   79 VF: VAR VFDEC .

    $default  reduce using rule 79 (VF)


State 85

   26 EXPRASION: ADDR_ID '=' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 129
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 86

   56 FUNC_ACTIVE: ID '(' . ')'
   57            | ID '(' . FUNC_ACTIVE_INNER_ARGES ')'

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    ')'           shift, and go to state 132
    '|'           shift, and go to state 61

    EXPRASION                go to state 133
    FUNC_ACTIVE              go to state 64
    FUNC_ACTIVE_INNER_ARGES  go to state 134
    CONST                    go to state 74


State 87

   29 EXPRASION: ID '=' . EXPRASION

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 135
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 88

   27 EXPRASION: ID '[' . EXPRASION ']' '=' VALUE
   28          | ID '[' . EXPRASION ']'

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 136
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 89

   24 EXPRASION: '-' EXPRASION .
   30          | EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 98

    NE_OP     [reduce using rule 24 (EXPRASION)]
    $default  reduce using rule 24 (EXPRASION)


State 90

   25 EXPRASION: '!' EXPRASION .
   30          | EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 98

    NE_OP     [reduce using rule 25 (EXPRASION)]
    $default  reduce using rule 25 (EXPRASION)


State 91

   22 EXPRASION: '^' EXPRASION .
   30          | EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 98

    NE_OP     [reduce using rule 22 (EXPRASION)]
    $default  reduce using rule 22 (EXPRASION)


State 92

   23 EXPRASION: '&' EXPRASION .
   30          | EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 98

    NE_OP     [reduce using rule 23 (EXPRASION)]
    $default  reduce using rule 23 (EXPRASION)


State 93

   20 EXPRASION: '(' EXPRASION . ')'
   30          | EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 95
    GE_OP   shift, and go to state 96
    SE_OP   shift, and go to state 97
    NE_OP   shift, and go to state 98
    OR_OP   shift, and go to state 99
    EQL_OP  shift, and go to state 100
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107
    ')'     shift, and go to state 137


State 94

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   43          | '|' EXPRASION . '|'

    AND_OP  shift, and go to state 95
    GE_OP   shift, and go to state 96
    SE_OP   shift, and go to state 97
    NE_OP   shift, and go to state 98
    OR_OP   shift, and go to state 99
    EQL_OP  shift, and go to state 100
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107
    '|'     shift, and go to state 138


State 95

   31 EXPRASION: EXPRASION AND_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 139
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 96

   38 EXPRASION: EXPRASION GE_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 140
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 97

   39 EXPRASION: EXPRASION SE_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 141
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 98

   30 EXPRASION: EXPRASION NE_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 142
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 99

   32 EXPRASION: EXPRASION OR_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 143
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 100

   37 EXPRASION: EXPRASION EQL_OP . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 144
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 101

   65 STASTMENT: EXPRASION ';' .

    $default  reduce using rule 65 (STASTMENT)


State 102

   33 EXPRASION: EXPRASION '+' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 145
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 103

   34 EXPRASION: EXPRASION '-' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 146
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 104

   36 EXPRASION: EXPRASION '*' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 147
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 105

   35 EXPRASION: EXPRASION '/' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 148
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 106

   40 EXPRASION: EXPRASION '>' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 149
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 107

   41 EXPRASION: EXPRASION '<' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 150
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 108

   60 STASTMENT_LIST: STASTMENT_LIST STASTMENT .

    $default  reduce using rule 60 (STASTMENT_LIST)


State 109

   71 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT '}' .

    $default  reduce using rule 71 (COMPUND_STATMENT_PROC)


State 110

   60 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   74 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK STASTMENT_LIST .

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '{'           shift, and go to state 26
    '|'           shift, and go to state 61

    $default  reduce using rule 74 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 63
    FUNC_ACTIVE            go to state 64
    IF_STASTMENT           go to state 66
    STASTMENT              go to state 108
    LOOP_STATMENT          go to state 68
    COMPUND_STATMENT_PROC  go to state 69
    CONST                  go to state 74


State 111

   75 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK .

    $default  reduce using rule 75 (DEC_INNER_BLOCK)


State 112

   14 OUT_ARGES: INNER_ARGS ':' TYPE ';' . OUT_ARGES

    ID  shift, and go to state 20

    OUT_ARGES   go to state 151
    INNER_ARGS  go to state 23


State 113

   88 TYPE: STRING '[' INT_NUM . ']'

    ']'  shift, and go to state 152


State 114

   17 FUNC_BLOCK: '{' RETURN . EXPRASION ';' '}'

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 153
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 115

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT . RETURN EXPRASION ';' '}'

    RETURN  shift, and go to state 154


State 116

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   62 IF_STASTMENT: IF '(' EXPRASION . ')' STASTMENT ELSE STASTMENT
   63             | IF '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 95
    GE_OP   shift, and go to state 96
    SE_OP   shift, and go to state 97
    NE_OP   shift, and go to state 98
    OR_OP   shift, and go to state 99
    EQL_OP  shift, and go to state 100
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107
    ')'     shift, and go to state 155


State 117

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   69 LOOP_STATMENT: FOR '(' EXPRASION . ';' EXPRASION ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 95
    GE_OP   shift, and go to state 96
    SE_OP   shift, and go to state 97
    NE_OP   shift, and go to state 98
    OR_OP   shift, and go to state 99
    EQL_OP  shift, and go to state 100
    ';'     shift, and go to state 156
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107


State 118

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   68 LOOP_STATMENT: WHILE '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 95
    GE_OP   shift, and go to state 96
    SE_OP   shift, and go to state 97
    NE_OP   shift, and go to state 98
    OR_OP   shift, and go to state 99
    EQL_OP  shift, and go to state 100
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107
    ')'     shift, and go to state 157


State 119

   80 VFDEC: INNER_ARGS ':' . TYPE ';'

    CHAR         shift, and go to state 31
    REAL         shift, and go to state 32
    INT          shift, and go to state 33
    BOOL         shift, and go to state 34
    STRING       shift, and go to state 35
    CHAR_POINER  shift, and go to state 36
    REAL_POINER  shift, and go to state 37
    INT_POINER   shift, and go to state 38

    TYPE  go to state 158


State 120

   47 VALUE: TRUE .

    $default  reduce using rule 47 (VALUE)


State 121

   48 VALUE: FALSE .

    $default  reduce using rule 48 (VALUE)


State 122

   44 VALUE: ID . '[' EXPRASION ']'
   49      | ID .
   56 FUNC_ACTIVE: ID . '(' ')'
   57            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 86
    '['  shift, and go to state 159

    $default  reduce using rule 49 (VALUE)


State 123

   54 VALUE: '-' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 160
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 124

   55 VALUE: '!' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 161
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 125

   52 VALUE: '^' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 162
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 126

   53 VALUE: '&' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 163
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 127

   46 VALUE: '(' . EXPRASION ')'

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 164
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 128

   51 VALUE: '|' . VALUE '|'

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 165
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 129

   26 EXPRASION: ADDR_ID '=' VALUE .

    $default  reduce using rule 26 (EXPRASION)


State 130

   50 VALUE: FUNC_ACTIVE .

    $default  reduce using rule 50 (VALUE)


State 131

   45 VALUE: CONST .

    $default  reduce using rule 45 (VALUE)


State 132

   56 FUNC_ACTIVE: ID '(' ')' .

    $default  reduce using rule 56 (FUNC_ACTIVE)


State 133

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   58 FUNC_ACTIVE_INNER_ARGES: EXPRASION .
   59                        | EXPRASION . ',' FUNC_ACTIVE_INNER_ARGES

    AND_OP  shift, and go to state 95
    GE_OP   shift, and go to state 96
    SE_OP   shift, and go to state 97
    NE_OP   shift, and go to state 98
    OR_OP   shift, and go to state 99
    EQL_OP  shift, and go to state 100
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107
    ','     shift, and go to state 166

    $default  reduce using rule 58 (FUNC_ACTIVE_INNER_ARGES)


State 134

   57 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES . ')'

    ')'  shift, and go to state 167


State 135

   29 EXPRASION: ID '=' EXPRASION .
   30          | EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 95
    GE_OP   shift, and go to state 96
    SE_OP   shift, and go to state 97
    NE_OP   shift, and go to state 98
    OR_OP   shift, and go to state 99
    EQL_OP  shift, and go to state 100
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107

    AND_OP    [reduce using rule 29 (EXPRASION)]
    GE_OP     [reduce using rule 29 (EXPRASION)]
    SE_OP     [reduce using rule 29 (EXPRASION)]
    NE_OP     [reduce using rule 29 (EXPRASION)]
    OR_OP     [reduce using rule 29 (EXPRASION)]
    EQL_OP    [reduce using rule 29 (EXPRASION)]
    '+'       [reduce using rule 29 (EXPRASION)]
    '-'       [reduce using rule 29 (EXPRASION)]
    '*'       [reduce using rule 29 (EXPRASION)]
    '/'       [reduce using rule 29 (EXPRASION)]
    '>'       [reduce using rule 29 (EXPRASION)]
    '<'       [reduce using rule 29 (EXPRASION)]
    $default  reduce using rule 29 (EXPRASION)


State 136

   27 EXPRASION: ID '[' EXPRASION . ']' '=' VALUE
   28          | ID '[' EXPRASION . ']'
   30          | EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 95
    GE_OP   shift, and go to state 96
    SE_OP   shift, and go to state 97
    NE_OP   shift, and go to state 98
    OR_OP   shift, and go to state 99
    EQL_OP  shift, and go to state 100
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107
    ']'     shift, and go to state 168


State 137

   20 EXPRASION: '(' EXPRASION ')' .

    $default  reduce using rule 20 (EXPRASION)


State 138

   43 EXPRASION: '|' EXPRASION '|' .

    $default  reduce using rule 43 (EXPRASION)


State 139

   31 EXPRASION: EXPRASION AND_OP VALUE .

    $default  reduce using rule 31 (EXPRASION)


State 140

   38 EXPRASION: EXPRASION GE_OP VALUE .

    $default  reduce using rule 38 (EXPRASION)


State 141

   39 EXPRASION: EXPRASION SE_OP VALUE .

    $default  reduce using rule 39 (EXPRASION)


State 142

   30 EXPRASION: EXPRASION NE_OP VALUE .

    $default  reduce using rule 30 (EXPRASION)


State 143

   32 EXPRASION: EXPRASION OR_OP VALUE .

    $default  reduce using rule 32 (EXPRASION)


State 144

   37 EXPRASION: EXPRASION EQL_OP VALUE .

    $default  reduce using rule 37 (EXPRASION)


State 145

   33 EXPRASION: EXPRASION '+' VALUE .

    $default  reduce using rule 33 (EXPRASION)


State 146

   34 EXPRASION: EXPRASION '-' VALUE .

    $default  reduce using rule 34 (EXPRASION)


State 147

   36 EXPRASION: EXPRASION '*' VALUE .

    $default  reduce using rule 36 (EXPRASION)


State 148

   35 EXPRASION: EXPRASION '/' VALUE .

    $default  reduce using rule 35 (EXPRASION)


State 149

   40 EXPRASION: EXPRASION '>' VALUE .

    $default  reduce using rule 40 (EXPRASION)


State 150

   41 EXPRASION: EXPRASION '<' VALUE .

    $default  reduce using rule 41 (EXPRASION)


State 151

   14 OUT_ARGES: INNER_ARGS ':' TYPE ';' OUT_ARGES .

    $default  reduce using rule 14 (OUT_ARGES)


State 152

   88 TYPE: STRING '[' INT_NUM ']' .

    $default  reduce using rule 88 (TYPE)


State 153

   17 FUNC_BLOCK: '{' RETURN EXPRASION . ';' '}'
   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 95
    GE_OP   shift, and go to state 96
    SE_OP   shift, and go to state 97
    NE_OP   shift, and go to state 98
    OR_OP   shift, and go to state 99
    EQL_OP  shift, and go to state 100
    ';'     shift, and go to state 169
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107


State 154

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN . EXPRASION ';' '}'

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 170
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 155

   62 IF_STASTMENT: IF '(' EXPRASION ')' . STASTMENT ELSE STASTMENT
   63             | IF '(' EXPRASION ')' . STASTMENT

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '{'           shift, and go to state 26
    '|'           shift, and go to state 61

    EXPRASION              go to state 63
    FUNC_ACTIVE            go to state 64
    IF_STASTMENT           go to state 66
    STASTMENT              go to state 171
    LOOP_STATMENT          go to state 68
    COMPUND_STATMENT_PROC  go to state 69
    CONST                  go to state 74


State 156

   69 LOOP_STATMENT: FOR '(' EXPRASION ';' . EXPRASION ';' EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 172
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 157

   68 LOOP_STATMENT: WHILE '(' EXPRASION ')' . STASTMENT

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '{'           shift, and go to state 26
    '|'           shift, and go to state 61

    EXPRASION              go to state 63
    FUNC_ACTIVE            go to state 64
    IF_STASTMENT           go to state 66
    STASTMENT              go to state 173
    LOOP_STATMENT          go to state 68
    COMPUND_STATMENT_PROC  go to state 69
    CONST                  go to state 74


State 158

   80 VFDEC: INNER_ARGS ':' TYPE . ';'

    ';'  shift, and go to state 174


State 159

   44 VALUE: ID '[' . EXPRASION ']'

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 175
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 160

   54 VALUE: '-' VALUE .

    $default  reduce using rule 54 (VALUE)


State 161

   55 VALUE: '!' VALUE .

    $default  reduce using rule 55 (VALUE)


State 162

   52 VALUE: '^' VALUE .

    $default  reduce using rule 52 (VALUE)


State 163

   53 VALUE: '&' VALUE .

    $default  reduce using rule 53 (VALUE)


State 164

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   46 VALUE: '(' EXPRASION . ')'

    AND_OP  shift, and go to state 95
    GE_OP   shift, and go to state 96
    SE_OP   shift, and go to state 97
    NE_OP   shift, and go to state 98
    OR_OP   shift, and go to state 99
    EQL_OP  shift, and go to state 100
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107
    ')'     shift, and go to state 176


State 165

   51 VALUE: '|' VALUE . '|'

    '|'  shift, and go to state 177


State 166

   59 FUNC_ACTIVE_INNER_ARGES: EXPRASION ',' . FUNC_ACTIVE_INNER_ARGES

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION                go to state 133
    FUNC_ACTIVE              go to state 64
    FUNC_ACTIVE_INNER_ARGES  go to state 178
    CONST                    go to state 74


State 167

   57 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES ')' .

    $default  reduce using rule 57 (FUNC_ACTIVE)


State 168

   27 EXPRASION: ID '[' EXPRASION ']' . '=' VALUE
   28          | ID '[' EXPRASION ']' .

    '='  shift, and go to state 179

    $default  reduce using rule 28 (EXPRASION)


State 169

   17 FUNC_BLOCK: '{' RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 180


State 170

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION . ';' '}'
   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 95
    GE_OP   shift, and go to state 96
    SE_OP   shift, and go to state 97
    NE_OP   shift, and go to state 98
    OR_OP   shift, and go to state 99
    EQL_OP  shift, and go to state 100
    ';'     shift, and go to state 181
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107


State 171

   62 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT . ELSE STASTMENT
   63             | IF '(' EXPRASION ')' STASTMENT .

    ELSE  shift, and go to state 182

    $default  reduce using rule 63 (IF_STASTMENT)


State 172

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   69 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION . ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 95
    GE_OP   shift, and go to state 96
    SE_OP   shift, and go to state 97
    NE_OP   shift, and go to state 98
    OR_OP   shift, and go to state 99
    EQL_OP  shift, and go to state 100
    ';'     shift, and go to state 183
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107


State 173

   68 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT .

    $default  reduce using rule 68 (LOOP_STATMENT)


State 174

   80 VFDEC: INNER_ARGS ':' TYPE ';' .

    $default  reduce using rule 80 (VFDEC)


State 175

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   44 VALUE: ID '[' EXPRASION . ']'

    AND_OP  shift, and go to state 95
    GE_OP   shift, and go to state 96
    SE_OP   shift, and go to state 97
    NE_OP   shift, and go to state 98
    OR_OP   shift, and go to state 99
    EQL_OP  shift, and go to state 100
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107
    ']'     shift, and go to state 184


State 176

   46 VALUE: '(' EXPRASION ')' .

    $default  reduce using rule 46 (VALUE)


State 177

   51 VALUE: '|' VALUE '|' .

    $default  reduce using rule 51 (VALUE)


State 178

   59 FUNC_ACTIVE_INNER_ARGES: EXPRASION ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 59 (FUNC_ACTIVE_INNER_ARGES)


State 179

   27 EXPRASION: ID '[' EXPRASION ']' '=' . VALUE

    NULLA         shift, and go to state 41
    TRUE          shift, and go to state 120
    FALSE         shift, and go to state 121
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 122
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 123
    '!'           shift, and go to state 124
    '^'           shift, and go to state 125
    '&'           shift, and go to state 126
    '('           shift, and go to state 127
    '|'           shift, and go to state 128

    VALUE        go to state 185
    FUNC_ACTIVE  go to state 130
    CONST        go to state 131


State 180

   17 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}' .

    $default  reduce using rule 17 (FUNC_BLOCK)


State 181

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 186


State 182

   62 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE . STASTMENT

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '{'           shift, and go to state 26
    '|'           shift, and go to state 61

    EXPRASION              go to state 63
    FUNC_ACTIVE            go to state 64
    IF_STASTMENT           go to state 66
    STASTMENT              go to state 187
    LOOP_STATMENT          go to state 68
    COMPUND_STATMENT_PROC  go to state 69
    CONST                  go to state 74


State 183

   69 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' . EXPRASION ')' STASTMENT

    NULLA         shift, and go to state 41
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '|'           shift, and go to state 61

    EXPRASION    go to state 188
    FUNC_ACTIVE  go to state 64
    CONST        go to state 74


State 184

   44 VALUE: ID '[' EXPRASION ']' .

    $default  reduce using rule 44 (VALUE)


State 185

   27 EXPRASION: ID '[' EXPRASION ']' '=' VALUE .

    $default  reduce using rule 27 (EXPRASION)


State 186

   18 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}' .

    $default  reduce using rule 18 (FUNC_BLOCK)


State 187

   62 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT .

    $default  reduce using rule 62 (IF_STASTMENT)


State 188

   30 EXPRASION: EXPRASION . NE_OP VALUE
   31          | EXPRASION . AND_OP VALUE
   32          | EXPRASION . OR_OP VALUE
   33          | EXPRASION . '+' VALUE
   34          | EXPRASION . '-' VALUE
   35          | EXPRASION . '/' VALUE
   36          | EXPRASION . '*' VALUE
   37          | EXPRASION . EQL_OP VALUE
   38          | EXPRASION . GE_OP VALUE
   39          | EXPRASION . SE_OP VALUE
   40          | EXPRASION . '>' VALUE
   41          | EXPRASION . '<' VALUE
   69 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 95
    GE_OP   shift, and go to state 96
    SE_OP   shift, and go to state 97
    NE_OP   shift, and go to state 98
    OR_OP   shift, and go to state 99
    EQL_OP  shift, and go to state 100
    '+'     shift, and go to state 102
    '-'     shift, and go to state 103
    '*'     shift, and go to state 104
    '/'     shift, and go to state 105
    '>'     shift, and go to state 106
    '<'     shift, and go to state 107
    ')'     shift, and go to state 189


State 189

   69 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' . STASTMENT

    NULLA         shift, and go to state 41
    IF            shift, and go to state 42
    FOR           shift, and go to state 43
    WHILE         shift, and go to state 44
    ADDR_ID       shift, and go to state 47
    CHAR_VALUE    shift, and go to state 48
    STRING_VALUE  shift, and go to state 49
    INT_NUM       shift, and go to state 50
    R_NUM         shift, and go to state 51
    HEX_NUM       shift, and go to state 52
    ID            shift, and go to state 53
    BOOL_VAL      shift, and go to state 54
    '-'           shift, and go to state 55
    '!'           shift, and go to state 56
    '^'           shift, and go to state 57
    '&'           shift, and go to state 58
    '('           shift, and go to state 59
    '{'           shift, and go to state 26
    '|'           shift, and go to state 61

    EXPRASION              go to state 63
    FUNC_ACTIVE            go to state 64
    IF_STASTMENT           go to state 66
    STASTMENT              go to state 190
    LOOP_STATMENT          go to state 68
    COMPUND_STATMENT_PROC  go to state 69
    CONST                  go to state 74


State 190

   69 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT .

    $default  reduce using rule 69 (LOOP_STATMENT)
