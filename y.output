Nonterminals useless in grammar

   RETURN_STATMENT
   COMPUND_STATMENT


Terminals unused in grammar

   CHAR_POINTER
   REAL_POINTER
   FLOAT_POINTER
   INT_POINTER
   MAIN
   NULL_VALUE
   BOOL_VALUE
   CHAR_VALUE
   STRING_VALUE
   test
   UFUNC


Rules useless in grammar

   89 RETURN_STATMENT: RETURN EXPRASION ';'

   90 COMPUND_STATMENT: '{' INNER_COMPUND_STATMENT RETURN_STATMENT '}'
   91                 | '{' RETURN_STATMENT '}'


State 52 conflicts: 2 shift/reduce
State 63 conflicts: 1 shift/reduce
State 78 conflicts: 1 shift/reduce
State 79 conflicts: 1 shift/reduce
State 80 conflicts: 1 shift/reduce
State 81 conflicts: 1 shift/reduce
State 114 conflicts: 12 shift/reduce
State 151 conflicts: 1 shift/reduce


Grammar

    0 $accept: S $end

    1 S: FUNC_PROC_DEC

    2 FUNC_PROC_DEC: DEF_A
    3              | FUNC_PROC_DEC DEF_A

    4 DEF_A: FUNC_DEF
    5      | PROC_DEF

    6 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC

    7 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK

    8 ARGES: '(' ')'
    9      | '(' OUT_ARGES ')'

   10 OUT_ARGES: INNER_ARGS ':' TYPE
   11          | INNER_ARGS ':' TYPE ';' OUT_ARGES

   12 INNER_ARGS: ID
   13           | ID ',' INNER_ARGS

   14 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}'
   15           | '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

   16 EXPRASION: CONST
   17          | '(' EXPRASION ')'
   18          | TRUE
   19          | FALSE
   20          | ID
   21          | '^' EXPRASION
   22          | '&' EXPRASION
   23          | '-' EXPRASION
   24          | '!' EXPRASION
   25          | ID '=' EXPRASION
   26          | EXPRASION NE_OP VALUE
   27          | EXPRASION AND_OP VALUE
   28          | EXPRASION OR_OP VALUE
   29          | EXPRASION '+' VALUE
   30          | EXPRASION '-' VALUE
   31          | EXPRASION '/' VALUE
   32          | EXPRASION '*' VALUE
   33          | EXPRASION EQL_OP VALUE
   34          | EXPRASION GE_OP VALUE
   35          | EXPRASION SE_OP VALUE
   36          | EXPRASION '>' VALUE
   37          | EXPRASION '<' VALUE
   38          | FUNC_ACTIVE

   39 VALUE: CONST
   40      | '(' EXPRASION ')'
   41      | TRUE
   42      | FALSE
   43      | ID

   44 FUNC_ACTIVE: ID '(' ')'
   45            | ID '(' FUNC_ACTIVE_INNER_ARGES ')'

   46 FUNC_ACTIVE_INNER_ARGES: ID
   47                        | FUNC_ACTIVE
   48                        | CONST
   49                        | ID ',' FUNC_ACTIVE_INNER_ARGES
   50                        | CONST ',' FUNC_ACTIVE_INNER_ARGES
   51                        | FUNC_ACTIVE ',' FUNC_ACTIVE_INNER_ARGES

   52 STASTMENT_LIST: STASTMENT_LIST STASTMENT
   53               | STASTMENT

   54 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   55             | IF '(' EXPRASION ')' STASTMENT

   56 STASTMENT: COMPUND_STATMENT_PROC
   57          | EXPRASION ';'
   58          | IF_STASTMENT
   59          | LOOP_STATMENT

   60 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT
   61              | FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

   62 COMPUND_STATMENT_PROC: '{' '}'
   63                      | '{' INNER_COMPUND_STATMENT '}'

   64 INNER_COMPUND_STATMENT: STASTMENT_LIST
   65                       | DEC_INNER_BLOCK
   66                       | DEC_INNER_BLOCK STASTMENT_LIST

   67 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK
   68                | NEW_DECLARE

   69 NEW_DECLARE: VAR_DECLARE
   70            | FUNC_PROC_DEC

   71 VAR_DECLARE: VF
   72            | VAR_DECLARE VF

   73 VF: VAR VFDEC

   74 VFDEC: INNER_ARGS ':' TYPE ';'
   75      | INNER_ARGS ':' TYPE ';' VFDEC

   76 CONST: INT_NUM
   77      | F_NUM
   78      | HEX_NUM

   79 TYPE: STRING '[' INT_NUM ']'
   80     | BOOL
   81     | INT
   82     | FLOAT
   83     | REAL
   84     | CHAR
   85     | CHAR_POINER
   86     | REAL_POINER
   87     | FLOAT_POINER
   88     | INT_POINER


Terminals, with rules where they appear

$end (0) 0
'!' (33) 24
'&' (38) 22
'(' (40) 8 9 17 40 44 45 54 55 60 61
')' (41) 8 9 17 40 44 45 54 55 60 61
'*' (42) 32
'+' (43) 29
',' (44) 13 49 50 51
'-' (45) 23 30
'/' (47) 31
':' (58) 10 11 74 75
';' (59) 11 14 15 57 61 74 75
'<' (60) 37
'=' (61) 25
'>' (62) 36
'[' (91) 79
']' (93) 79
'^' (94) 21
'{' (123) 14 15 62 63
'}' (125) 14 15 62 63
error (256)
CHAR <String> (258) 84
REAL <String> (259) 83
FLOAT <String> (260) 82
INT <String> (261) 81
BOOL <String> (262) 80
STRING <String> (263) 79
CHAR_POINER <String> (264) 85
REAL_POINER <String> (265) 86
FLOAT_POINER <String> (266) 87
INT_POINER <String> (267) 88
CHAR_POINTER <String> (268)
REAL_POINTER <String> (269)
FLOAT_POINTER <String> (270)
INT_POINTER <String> (271)
ELSE (272) 54
IF (273) 54 55
FOR (274) 61
WHILE (275) 60
TRUE (276) 18 41
FALSE (277) 19 42
RETURN (278) 7 14 15
MAIN <Node> (279)
VAR <String> (280) 73
FUNC <String> (281) 7
PROC <String> (282) 6
NULL_VALUE (283)
AND_OP (284) 27
GE_OP (285) 34
SE_OP (286) 35
NE_OP (287) 26
OR_OP (288) 28
EQL_OP (289) 33
BOOL_VALUE <String> (290)
CHAR_VALUE <String> (291)
STRING_VALUE <String> (292)
INT_NUM <String> (293) 76 79
F_NUM <String> (294) 77
HEX_NUM <String> (295) 78
ID <String> (296) 6 7 12 13 20 25 43 44 45 46 49
IFX (297)
test (298)
UMINUS (299)
UFUNC (300)


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
S <Node> (66)
    on left: 1, on right: 0
FUNC_PROC_DEC <Node> (67)
    on left: 2 3, on right: 1 3 70
DEF_A <Node> (68)
    on left: 4 5, on right: 2 3
PROC_DEF <Node> (69)
    on left: 6, on right: 5
FUNC_DEF <Node> (70)
    on left: 7, on right: 4
ARGES <Node> (71)
    on left: 8 9, on right: 6 7
OUT_ARGES <Node> (72)
    on left: 10 11, on right: 9 11
INNER_ARGS <Node> (73)
    on left: 12 13, on right: 10 11 13 74 75
FUNC_BLOCK <Node> (74)
    on left: 14 15, on right: 7
EXPRASION <Node> (75)
    on left: 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
    34 35 36 37 38, on right: 14 15 17 21 22 23 24 25 26 27 28 29 30
    31 32 33 34 35 36 37 40 54 55 57 60 61
VALUE <Node> (76)
    on left: 39 40 41 42 43, on right: 26 27 28 29 30 31 32 33 34 35
    36 37
FUNC_ACTIVE <Node> (77)
    on left: 44 45, on right: 38 47 51
FUNC_ACTIVE_INNER_ARGES <Node> (78)
    on left: 46 47 48 49 50 51, on right: 45 49 50 51
STASTMENT_LIST <Node> (79)
    on left: 52 53, on right: 52 64 66
IF_STASTMENT <Node> (80)
    on left: 54 55, on right: 58
STASTMENT <Node> (81)
    on left: 56 57 58 59, on right: 52 53 54 55 60 61
LOOP_STATMENT <Node> (82)
    on left: 60 61, on right: 59
COMPUND_STATMENT_PROC <Node> (83)
    on left: 62 63, on right: 6 56
INNER_COMPUND_STATMENT <Node> (84)
    on left: 64 65 66, on right: 15 63
DEC_INNER_BLOCK <Node> (85)
    on left: 67 68, on right: 65 66 67
NEW_DECLARE <Node> (86)
    on left: 69 70, on right: 67 68
VAR_DECLARE <Node> (87)
    on left: 71 72, on right: 69 72
VF <Node> (88)
    on left: 73, on right: 71 72
VFDEC <Node> (89)
    on left: 74 75, on right: 73 75
CONST <Node> (90)
    on left: 76 77 78, on right: 16 39 48 50
TYPE <String> (91)
    on left: 79 80 81 82 83 84 85 86 87 88, on right: 7 10 11 74 75


State 0

    0 $accept: . S $end

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    S              go to state 3
    FUNC_PROC_DEC  go to state 4
    DEF_A          go to state 5
    PROC_DEF       go to state 6
    FUNC_DEF       go to state 7


State 1

    7 FUNC_DEF: FUNC . ID ARGES RETURN TYPE FUNC_BLOCK

    ID  shift, and go to state 8


State 2

    6 PROC_DEF: PROC . ID ARGES COMPUND_STATMENT_PROC

    ID  shift, and go to state 9


State 3

    0 $accept: S . $end

    $end  shift, and go to state 10


State 4

    1 S: FUNC_PROC_DEC .
    3 FUNC_PROC_DEC: FUNC_PROC_DEC . DEF_A

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    $default  reduce using rule 1 (S)

    DEF_A     go to state 11
    PROC_DEF  go to state 6
    FUNC_DEF  go to state 7


State 5

    2 FUNC_PROC_DEC: DEF_A .

    $default  reduce using rule 2 (FUNC_PROC_DEC)


State 6

    5 DEF_A: PROC_DEF .

    $default  reduce using rule 5 (DEF_A)


State 7

    4 DEF_A: FUNC_DEF .

    $default  reduce using rule 4 (DEF_A)


State 8

    7 FUNC_DEF: FUNC ID . ARGES RETURN TYPE FUNC_BLOCK

    '('  shift, and go to state 12

    ARGES  go to state 13


State 9

    6 PROC_DEF: PROC ID . ARGES COMPUND_STATMENT_PROC

    '('  shift, and go to state 12

    ARGES  go to state 14


State 10

    0 $accept: S $end .

    $default  accept


State 11

    3 FUNC_PROC_DEC: FUNC_PROC_DEC DEF_A .

    $default  reduce using rule 3 (FUNC_PROC_DEC)


State 12

    8 ARGES: '(' . ')'
    9      | '(' . OUT_ARGES ')'

    ID   shift, and go to state 15
    ')'  shift, and go to state 16

    OUT_ARGES   go to state 17
    INNER_ARGS  go to state 18


State 13

    7 FUNC_DEF: FUNC ID ARGES . RETURN TYPE FUNC_BLOCK

    RETURN  shift, and go to state 19


State 14

    6 PROC_DEF: PROC ID ARGES . COMPUND_STATMENT_PROC

    '{'  shift, and go to state 20

    COMPUND_STATMENT_PROC  go to state 21


State 15

   12 INNER_ARGS: ID .
   13           | ID . ',' INNER_ARGS

    ','  shift, and go to state 22

    $default  reduce using rule 12 (INNER_ARGS)


State 16

    8 ARGES: '(' ')' .

    $default  reduce using rule 8 (ARGES)


State 17

    9 ARGES: '(' OUT_ARGES . ')'

    ')'  shift, and go to state 23


State 18

   10 OUT_ARGES: INNER_ARGS . ':' TYPE
   11          | INNER_ARGS . ':' TYPE ';' OUT_ARGES

    ':'  shift, and go to state 24


State 19

    7 FUNC_DEF: FUNC ID ARGES RETURN . TYPE FUNC_BLOCK

    CHAR          shift, and go to state 25
    REAL          shift, and go to state 26
    FLOAT         shift, and go to state 27
    INT           shift, and go to state 28
    BOOL          shift, and go to state 29
    STRING        shift, and go to state 30
    CHAR_POINER   shift, and go to state 31
    REAL_POINER   shift, and go to state 32
    FLOAT_POINER  shift, and go to state 33
    INT_POINER    shift, and go to state 34

    TYPE  go to state 35


State 20

   62 COMPUND_STATMENT_PROC: '{' . '}'
   63                      | '{' . INNER_COMPUND_STATMENT '}'

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    VAR      shift, and go to state 41
    FUNC     shift, and go to state 1
    PROC     shift, and go to state 2
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 20
    '}'      shift, and go to state 51

    FUNC_PROC_DEC           go to state 52
    DEF_A                   go to state 5
    PROC_DEF                go to state 6
    FUNC_DEF                go to state 7
    EXPRASION               go to state 53
    FUNC_ACTIVE             go to state 54
    STASTMENT_LIST          go to state 55
    IF_STASTMENT            go to state 56
    STASTMENT               go to state 57
    LOOP_STATMENT           go to state 58
    COMPUND_STATMENT_PROC   go to state 59
    INNER_COMPUND_STATMENT  go to state 60
    DEC_INNER_BLOCK         go to state 61
    NEW_DECLARE             go to state 62
    VAR_DECLARE             go to state 63
    VF                      go to state 64
    CONST                   go to state 65


State 21

    6 PROC_DEF: PROC ID ARGES COMPUND_STATMENT_PROC .

    $default  reduce using rule 6 (PROC_DEF)


State 22

   13 INNER_ARGS: ID ',' . INNER_ARGS

    ID  shift, and go to state 15

    INNER_ARGS  go to state 66


State 23

    9 ARGES: '(' OUT_ARGES ')' .

    $default  reduce using rule 9 (ARGES)


State 24

   10 OUT_ARGES: INNER_ARGS ':' . TYPE
   11          | INNER_ARGS ':' . TYPE ';' OUT_ARGES

    CHAR          shift, and go to state 25
    REAL          shift, and go to state 26
    FLOAT         shift, and go to state 27
    INT           shift, and go to state 28
    BOOL          shift, and go to state 29
    STRING        shift, and go to state 30
    CHAR_POINER   shift, and go to state 31
    REAL_POINER   shift, and go to state 32
    FLOAT_POINER  shift, and go to state 33
    INT_POINER    shift, and go to state 34

    TYPE  go to state 67


State 25

   84 TYPE: CHAR .

    $default  reduce using rule 84 (TYPE)


State 26

   83 TYPE: REAL .

    $default  reduce using rule 83 (TYPE)


State 27

   82 TYPE: FLOAT .

    $default  reduce using rule 82 (TYPE)


State 28

   81 TYPE: INT .

    $default  reduce using rule 81 (TYPE)


State 29

   80 TYPE: BOOL .

    $default  reduce using rule 80 (TYPE)


State 30

   79 TYPE: STRING . '[' INT_NUM ']'

    '['  shift, and go to state 68


State 31

   85 TYPE: CHAR_POINER .

    $default  reduce using rule 85 (TYPE)


State 32

   86 TYPE: REAL_POINER .

    $default  reduce using rule 86 (TYPE)


State 33

   87 TYPE: FLOAT_POINER .

    $default  reduce using rule 87 (TYPE)


State 34

   88 TYPE: INT_POINER .

    $default  reduce using rule 88 (TYPE)


State 35

    7 FUNC_DEF: FUNC ID ARGES RETURN TYPE . FUNC_BLOCK

    '{'  shift, and go to state 69

    FUNC_BLOCK  go to state 70


State 36

   54 IF_STASTMENT: IF . '(' EXPRASION ')' STASTMENT ELSE STASTMENT
   55             | IF . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 71


State 37

   61 LOOP_STATMENT: FOR . '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    '('  shift, and go to state 72


State 38

   60 LOOP_STATMENT: WHILE . '(' EXPRASION ')' STASTMENT

    '('  shift, and go to state 73


State 39

   18 EXPRASION: TRUE .

    $default  reduce using rule 18 (EXPRASION)


State 40

   19 EXPRASION: FALSE .

    $default  reduce using rule 19 (EXPRASION)


State 41

   73 VF: VAR . VFDEC

    ID  shift, and go to state 15

    INNER_ARGS  go to state 74
    VFDEC       go to state 75


State 42

   76 CONST: INT_NUM .

    $default  reduce using rule 76 (CONST)


State 43

   77 CONST: F_NUM .

    $default  reduce using rule 77 (CONST)


State 44

   78 CONST: HEX_NUM .

    $default  reduce using rule 78 (CONST)


State 45

   20 EXPRASION: ID .
   25          | ID . '=' EXPRASION
   44 FUNC_ACTIVE: ID . '(' ')'
   45            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'

    '('  shift, and go to state 76
    '='  shift, and go to state 77

    $default  reduce using rule 20 (EXPRASION)


State 46

   23 EXPRASION: '-' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 78
    FUNC_ACTIVE  go to state 54
    CONST        go to state 65


State 47

   24 EXPRASION: '!' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 79
    FUNC_ACTIVE  go to state 54
    CONST        go to state 65


State 48

   21 EXPRASION: '^' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 80
    FUNC_ACTIVE  go to state 54
    CONST        go to state 65


State 49

   22 EXPRASION: '&' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 81
    FUNC_ACTIVE  go to state 54
    CONST        go to state 65


State 50

   17 EXPRASION: '(' . EXPRASION ')'

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 82
    FUNC_ACTIVE  go to state 54
    CONST        go to state 65


State 51

   62 COMPUND_STATMENT_PROC: '{' '}' .

    $default  reduce using rule 62 (COMPUND_STATMENT_PROC)


State 52

    3 FUNC_PROC_DEC: FUNC_PROC_DEC . DEF_A
   70 NEW_DECLARE: FUNC_PROC_DEC .

    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    FUNC      [reduce using rule 70 (NEW_DECLARE)]
    PROC      [reduce using rule 70 (NEW_DECLARE)]
    $default  reduce using rule 70 (NEW_DECLARE)

    DEF_A     go to state 11
    PROC_DEF  go to state 6
    FUNC_DEF  go to state 7


State 53

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   57 STASTMENT: EXPRASION . ';'

    AND_OP  shift, and go to state 83
    GE_OP   shift, and go to state 84
    SE_OP   shift, and go to state 85
    NE_OP   shift, and go to state 86
    OR_OP   shift, and go to state 87
    EQL_OP  shift, and go to state 88
    ';'     shift, and go to state 89
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '>'     shift, and go to state 94
    '<'     shift, and go to state 95


State 54

   38 EXPRASION: FUNC_ACTIVE .

    $default  reduce using rule 38 (EXPRASION)


State 55

   52 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   64 INNER_COMPUND_STATMENT: STASTMENT_LIST .

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 20

    $default  reduce using rule 64 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 53
    FUNC_ACTIVE            go to state 54
    IF_STASTMENT           go to state 56
    STASTMENT              go to state 96
    LOOP_STATMENT          go to state 58
    COMPUND_STATMENT_PROC  go to state 59
    CONST                  go to state 65


State 56

   58 STASTMENT: IF_STASTMENT .

    $default  reduce using rule 58 (STASTMENT)


State 57

   53 STASTMENT_LIST: STASTMENT .

    $default  reduce using rule 53 (STASTMENT_LIST)


State 58

   59 STASTMENT: LOOP_STATMENT .

    $default  reduce using rule 59 (STASTMENT)


State 59

   56 STASTMENT: COMPUND_STATMENT_PROC .

    $default  reduce using rule 56 (STASTMENT)


State 60

   63 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT . '}'

    '}'  shift, and go to state 97


State 61

   65 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK .
   66                       | DEC_INNER_BLOCK . STASTMENT_LIST

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 20

    $default  reduce using rule 65 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 53
    FUNC_ACTIVE            go to state 54
    STASTMENT_LIST         go to state 98
    IF_STASTMENT           go to state 56
    STASTMENT              go to state 57
    LOOP_STATMENT          go to state 58
    COMPUND_STATMENT_PROC  go to state 59
    CONST                  go to state 65


State 62

   67 DEC_INNER_BLOCK: NEW_DECLARE . DEC_INNER_BLOCK
   68                | NEW_DECLARE .

    VAR   shift, and go to state 41
    FUNC  shift, and go to state 1
    PROC  shift, and go to state 2

    $default  reduce using rule 68 (DEC_INNER_BLOCK)

    FUNC_PROC_DEC    go to state 52
    DEF_A            go to state 5
    PROC_DEF         go to state 6
    FUNC_DEF         go to state 7
    DEC_INNER_BLOCK  go to state 99
    NEW_DECLARE      go to state 62
    VAR_DECLARE      go to state 63
    VF               go to state 64


State 63

   69 NEW_DECLARE: VAR_DECLARE .
   72 VAR_DECLARE: VAR_DECLARE . VF

    VAR  shift, and go to state 41

    VAR       [reduce using rule 69 (NEW_DECLARE)]
    $default  reduce using rule 69 (NEW_DECLARE)

    VF  go to state 100


State 64

   71 VAR_DECLARE: VF .

    $default  reduce using rule 71 (VAR_DECLARE)


State 65

   16 EXPRASION: CONST .

    $default  reduce using rule 16 (EXPRASION)


State 66

   13 INNER_ARGS: ID ',' INNER_ARGS .

    $default  reduce using rule 13 (INNER_ARGS)


State 67

   10 OUT_ARGES: INNER_ARGS ':' TYPE .
   11          | INNER_ARGS ':' TYPE . ';' OUT_ARGES

    ';'  shift, and go to state 101

    $default  reduce using rule 10 (OUT_ARGES)


State 68

   79 TYPE: STRING '[' . INT_NUM ']'

    INT_NUM  shift, and go to state 102


State 69

   14 FUNC_BLOCK: '{' . RETURN EXPRASION ';' '}'
   15           | '{' . INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}'

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    RETURN   shift, and go to state 103
    VAR      shift, and go to state 41
    FUNC     shift, and go to state 1
    PROC     shift, and go to state 2
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 20

    FUNC_PROC_DEC           go to state 52
    DEF_A                   go to state 5
    PROC_DEF                go to state 6
    FUNC_DEF                go to state 7
    EXPRASION               go to state 53
    FUNC_ACTIVE             go to state 54
    STASTMENT_LIST          go to state 55
    IF_STASTMENT            go to state 56
    STASTMENT               go to state 57
    LOOP_STATMENT           go to state 58
    COMPUND_STATMENT_PROC   go to state 59
    INNER_COMPUND_STATMENT  go to state 104
    DEC_INNER_BLOCK         go to state 61
    NEW_DECLARE             go to state 62
    VAR_DECLARE             go to state 63
    VF                      go to state 64
    CONST                   go to state 65


State 70

    7 FUNC_DEF: FUNC ID ARGES RETURN TYPE FUNC_BLOCK .

    $default  reduce using rule 7 (FUNC_DEF)


State 71

   54 IF_STASTMENT: IF '(' . EXPRASION ')' STASTMENT ELSE STASTMENT
   55             | IF '(' . EXPRASION ')' STASTMENT

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 105
    FUNC_ACTIVE  go to state 54
    CONST        go to state 65


State 72

   61 LOOP_STATMENT: FOR '(' . EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 106
    FUNC_ACTIVE  go to state 54
    CONST        go to state 65


State 73

   60 LOOP_STATMENT: WHILE '(' . EXPRASION ')' STASTMENT

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 107
    FUNC_ACTIVE  go to state 54
    CONST        go to state 65


State 74

   74 VFDEC: INNER_ARGS . ':' TYPE ';'
   75      | INNER_ARGS . ':' TYPE ';' VFDEC

    ':'  shift, and go to state 108


State 75

   73 VF: VAR VFDEC .

    $default  reduce using rule 73 (VF)


State 76

   44 FUNC_ACTIVE: ID '(' . ')'
   45            | ID '(' . FUNC_ACTIVE_INNER_ARGES ')'

    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 109
    ')'      shift, and go to state 110

    FUNC_ACTIVE              go to state 111
    FUNC_ACTIVE_INNER_ARGES  go to state 112
    CONST                    go to state 113


State 77

   25 EXPRASION: ID '=' . EXPRASION

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 114
    FUNC_ACTIVE  go to state 54
    CONST        go to state 65


State 78

   23 EXPRASION: '-' EXPRASION .
   26          | EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 86

    NE_OP     [reduce using rule 23 (EXPRASION)]
    $default  reduce using rule 23 (EXPRASION)


State 79

   24 EXPRASION: '!' EXPRASION .
   26          | EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 86

    NE_OP     [reduce using rule 24 (EXPRASION)]
    $default  reduce using rule 24 (EXPRASION)


State 80

   21 EXPRASION: '^' EXPRASION .
   26          | EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 86

    NE_OP     [reduce using rule 21 (EXPRASION)]
    $default  reduce using rule 21 (EXPRASION)


State 81

   22 EXPRASION: '&' EXPRASION .
   26          | EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE

    NE_OP  shift, and go to state 86

    NE_OP     [reduce using rule 22 (EXPRASION)]
    $default  reduce using rule 22 (EXPRASION)


State 82

   17 EXPRASION: '(' EXPRASION . ')'
   26          | EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 83
    GE_OP   shift, and go to state 84
    SE_OP   shift, and go to state 85
    NE_OP   shift, and go to state 86
    OR_OP   shift, and go to state 87
    EQL_OP  shift, and go to state 88
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '>'     shift, and go to state 94
    '<'     shift, and go to state 95
    ')'     shift, and go to state 115


State 83

   27 EXPRASION: EXPRASION AND_OP . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE  go to state 120
    CONST  go to state 121


State 84

   34 EXPRASION: EXPRASION GE_OP . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE  go to state 122
    CONST  go to state 121


State 85

   35 EXPRASION: EXPRASION SE_OP . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE  go to state 123
    CONST  go to state 121


State 86

   26 EXPRASION: EXPRASION NE_OP . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE  go to state 124
    CONST  go to state 121


State 87

   28 EXPRASION: EXPRASION OR_OP . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE  go to state 125
    CONST  go to state 121


State 88

   33 EXPRASION: EXPRASION EQL_OP . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE  go to state 126
    CONST  go to state 121


State 89

   57 STASTMENT: EXPRASION ';' .

    $default  reduce using rule 57 (STASTMENT)


State 90

   29 EXPRASION: EXPRASION '+' . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE  go to state 127
    CONST  go to state 121


State 91

   30 EXPRASION: EXPRASION '-' . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE  go to state 128
    CONST  go to state 121


State 92

   32 EXPRASION: EXPRASION '*' . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE  go to state 129
    CONST  go to state 121


State 93

   31 EXPRASION: EXPRASION '/' . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE  go to state 130
    CONST  go to state 121


State 94

   36 EXPRASION: EXPRASION '>' . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE  go to state 131
    CONST  go to state 121


State 95

   37 EXPRASION: EXPRASION '<' . VALUE

    TRUE     shift, and go to state 116
    FALSE    shift, and go to state 117
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 118
    '('      shift, and go to state 119

    VALUE  go to state 132
    CONST  go to state 121


State 96

   52 STASTMENT_LIST: STASTMENT_LIST STASTMENT .

    $default  reduce using rule 52 (STASTMENT_LIST)


State 97

   63 COMPUND_STATMENT_PROC: '{' INNER_COMPUND_STATMENT '}' .

    $default  reduce using rule 63 (COMPUND_STATMENT_PROC)


State 98

   52 STASTMENT_LIST: STASTMENT_LIST . STASTMENT
   66 INNER_COMPUND_STATMENT: DEC_INNER_BLOCK STASTMENT_LIST .

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 20

    $default  reduce using rule 66 (INNER_COMPUND_STATMENT)

    EXPRASION              go to state 53
    FUNC_ACTIVE            go to state 54
    IF_STASTMENT           go to state 56
    STASTMENT              go to state 96
    LOOP_STATMENT          go to state 58
    COMPUND_STATMENT_PROC  go to state 59
    CONST                  go to state 65


State 99

   67 DEC_INNER_BLOCK: NEW_DECLARE DEC_INNER_BLOCK .

    $default  reduce using rule 67 (DEC_INNER_BLOCK)


State 100

   72 VAR_DECLARE: VAR_DECLARE VF .

    $default  reduce using rule 72 (VAR_DECLARE)


State 101

   11 OUT_ARGES: INNER_ARGS ':' TYPE ';' . OUT_ARGES

    ID  shift, and go to state 15

    OUT_ARGES   go to state 133
    INNER_ARGS  go to state 18


State 102

   79 TYPE: STRING '[' INT_NUM . ']'

    ']'  shift, and go to state 134


State 103

   14 FUNC_BLOCK: '{' RETURN . EXPRASION ';' '}'

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 135
    FUNC_ACTIVE  go to state 54
    CONST        go to state 65


State 104

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT . RETURN EXPRASION ';' '}'

    RETURN  shift, and go to state 136


State 105

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   54 IF_STASTMENT: IF '(' EXPRASION . ')' STASTMENT ELSE STASTMENT
   55             | IF '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 83
    GE_OP   shift, and go to state 84
    SE_OP   shift, and go to state 85
    NE_OP   shift, and go to state 86
    OR_OP   shift, and go to state 87
    EQL_OP  shift, and go to state 88
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '>'     shift, and go to state 94
    '<'     shift, and go to state 95
    ')'     shift, and go to state 137


State 106

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   61 LOOP_STATMENT: FOR '(' EXPRASION . ';' EXPRASION ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 83
    GE_OP   shift, and go to state 84
    SE_OP   shift, and go to state 85
    NE_OP   shift, and go to state 86
    OR_OP   shift, and go to state 87
    EQL_OP  shift, and go to state 88
    ';'     shift, and go to state 138
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '>'     shift, and go to state 94
    '<'     shift, and go to state 95


State 107

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   60 LOOP_STATMENT: WHILE '(' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 83
    GE_OP   shift, and go to state 84
    SE_OP   shift, and go to state 85
    NE_OP   shift, and go to state 86
    OR_OP   shift, and go to state 87
    EQL_OP  shift, and go to state 88
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '>'     shift, and go to state 94
    '<'     shift, and go to state 95
    ')'     shift, and go to state 139


State 108

   74 VFDEC: INNER_ARGS ':' . TYPE ';'
   75      | INNER_ARGS ':' . TYPE ';' VFDEC

    CHAR          shift, and go to state 25
    REAL          shift, and go to state 26
    FLOAT         shift, and go to state 27
    INT           shift, and go to state 28
    BOOL          shift, and go to state 29
    STRING        shift, and go to state 30
    CHAR_POINER   shift, and go to state 31
    REAL_POINER   shift, and go to state 32
    FLOAT_POINER  shift, and go to state 33
    INT_POINER    shift, and go to state 34

    TYPE  go to state 140


State 109

   44 FUNC_ACTIVE: ID . '(' ')'
   45            | ID . '(' FUNC_ACTIVE_INNER_ARGES ')'
   46 FUNC_ACTIVE_INNER_ARGES: ID .
   49                        | ID . ',' FUNC_ACTIVE_INNER_ARGES

    '('  shift, and go to state 76
    ','  shift, and go to state 141

    $default  reduce using rule 46 (FUNC_ACTIVE_INNER_ARGES)


State 110

   44 FUNC_ACTIVE: ID '(' ')' .

    $default  reduce using rule 44 (FUNC_ACTIVE)


State 111

   47 FUNC_ACTIVE_INNER_ARGES: FUNC_ACTIVE .
   51                        | FUNC_ACTIVE . ',' FUNC_ACTIVE_INNER_ARGES

    ','  shift, and go to state 142

    $default  reduce using rule 47 (FUNC_ACTIVE_INNER_ARGES)


State 112

   45 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES . ')'

    ')'  shift, and go to state 143


State 113

   48 FUNC_ACTIVE_INNER_ARGES: CONST .
   50                        | CONST . ',' FUNC_ACTIVE_INNER_ARGES

    ','  shift, and go to state 144

    $default  reduce using rule 48 (FUNC_ACTIVE_INNER_ARGES)


State 114

   25 EXPRASION: ID '=' EXPRASION .
   26          | EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 83
    GE_OP   shift, and go to state 84
    SE_OP   shift, and go to state 85
    NE_OP   shift, and go to state 86
    OR_OP   shift, and go to state 87
    EQL_OP  shift, and go to state 88
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '>'     shift, and go to state 94
    '<'     shift, and go to state 95

    AND_OP    [reduce using rule 25 (EXPRASION)]
    GE_OP     [reduce using rule 25 (EXPRASION)]
    SE_OP     [reduce using rule 25 (EXPRASION)]
    NE_OP     [reduce using rule 25 (EXPRASION)]
    OR_OP     [reduce using rule 25 (EXPRASION)]
    EQL_OP    [reduce using rule 25 (EXPRASION)]
    '+'       [reduce using rule 25 (EXPRASION)]
    '-'       [reduce using rule 25 (EXPRASION)]
    '*'       [reduce using rule 25 (EXPRASION)]
    '/'       [reduce using rule 25 (EXPRASION)]
    '>'       [reduce using rule 25 (EXPRASION)]
    '<'       [reduce using rule 25 (EXPRASION)]
    $default  reduce using rule 25 (EXPRASION)


State 115

   17 EXPRASION: '(' EXPRASION ')' .

    $default  reduce using rule 17 (EXPRASION)


State 116

   41 VALUE: TRUE .

    $default  reduce using rule 41 (VALUE)


State 117

   42 VALUE: FALSE .

    $default  reduce using rule 42 (VALUE)


State 118

   43 VALUE: ID .

    $default  reduce using rule 43 (VALUE)


State 119

   40 VALUE: '(' . EXPRASION ')'

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 145
    FUNC_ACTIVE  go to state 54
    CONST        go to state 65


State 120

   27 EXPRASION: EXPRASION AND_OP VALUE .

    $default  reduce using rule 27 (EXPRASION)


State 121

   39 VALUE: CONST .

    $default  reduce using rule 39 (VALUE)


State 122

   34 EXPRASION: EXPRASION GE_OP VALUE .

    $default  reduce using rule 34 (EXPRASION)


State 123

   35 EXPRASION: EXPRASION SE_OP VALUE .

    $default  reduce using rule 35 (EXPRASION)


State 124

   26 EXPRASION: EXPRASION NE_OP VALUE .

    $default  reduce using rule 26 (EXPRASION)


State 125

   28 EXPRASION: EXPRASION OR_OP VALUE .

    $default  reduce using rule 28 (EXPRASION)


State 126

   33 EXPRASION: EXPRASION EQL_OP VALUE .

    $default  reduce using rule 33 (EXPRASION)


State 127

   29 EXPRASION: EXPRASION '+' VALUE .

    $default  reduce using rule 29 (EXPRASION)


State 128

   30 EXPRASION: EXPRASION '-' VALUE .

    $default  reduce using rule 30 (EXPRASION)


State 129

   32 EXPRASION: EXPRASION '*' VALUE .

    $default  reduce using rule 32 (EXPRASION)


State 130

   31 EXPRASION: EXPRASION '/' VALUE .

    $default  reduce using rule 31 (EXPRASION)


State 131

   36 EXPRASION: EXPRASION '>' VALUE .

    $default  reduce using rule 36 (EXPRASION)


State 132

   37 EXPRASION: EXPRASION '<' VALUE .

    $default  reduce using rule 37 (EXPRASION)


State 133

   11 OUT_ARGES: INNER_ARGS ':' TYPE ';' OUT_ARGES .

    $default  reduce using rule 11 (OUT_ARGES)


State 134

   79 TYPE: STRING '[' INT_NUM ']' .

    $default  reduce using rule 79 (TYPE)


State 135

   14 FUNC_BLOCK: '{' RETURN EXPRASION . ';' '}'
   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 83
    GE_OP   shift, and go to state 84
    SE_OP   shift, and go to state 85
    NE_OP   shift, and go to state 86
    OR_OP   shift, and go to state 87
    EQL_OP  shift, and go to state 88
    ';'     shift, and go to state 146
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '>'     shift, and go to state 94
    '<'     shift, and go to state 95


State 136

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN . EXPRASION ';' '}'

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 147
    FUNC_ACTIVE  go to state 54
    CONST        go to state 65


State 137

   54 IF_STASTMENT: IF '(' EXPRASION ')' . STASTMENT ELSE STASTMENT
   55             | IF '(' EXPRASION ')' . STASTMENT

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 20

    EXPRASION              go to state 53
    FUNC_ACTIVE            go to state 54
    IF_STASTMENT           go to state 56
    STASTMENT              go to state 148
    LOOP_STATMENT          go to state 58
    COMPUND_STATMENT_PROC  go to state 59
    CONST                  go to state 65


State 138

   61 LOOP_STATMENT: FOR '(' EXPRASION ';' . EXPRASION ';' EXPRASION ')' STASTMENT

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 149
    FUNC_ACTIVE  go to state 54
    CONST        go to state 65


State 139

   60 LOOP_STATMENT: WHILE '(' EXPRASION ')' . STASTMENT

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 20

    EXPRASION              go to state 53
    FUNC_ACTIVE            go to state 54
    IF_STASTMENT           go to state 56
    STASTMENT              go to state 150
    LOOP_STATMENT          go to state 58
    COMPUND_STATMENT_PROC  go to state 59
    CONST                  go to state 65


State 140

   74 VFDEC: INNER_ARGS ':' TYPE . ';'
   75      | INNER_ARGS ':' TYPE . ';' VFDEC

    ';'  shift, and go to state 151


State 141

   49 FUNC_ACTIVE_INNER_ARGES: ID ',' . FUNC_ACTIVE_INNER_ARGES

    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 109

    FUNC_ACTIVE              go to state 111
    FUNC_ACTIVE_INNER_ARGES  go to state 152
    CONST                    go to state 113


State 142

   51 FUNC_ACTIVE_INNER_ARGES: FUNC_ACTIVE ',' . FUNC_ACTIVE_INNER_ARGES

    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 109

    FUNC_ACTIVE              go to state 111
    FUNC_ACTIVE_INNER_ARGES  go to state 153
    CONST                    go to state 113


State 143

   45 FUNC_ACTIVE: ID '(' FUNC_ACTIVE_INNER_ARGES ')' .

    $default  reduce using rule 45 (FUNC_ACTIVE)


State 144

   50 FUNC_ACTIVE_INNER_ARGES: CONST ',' . FUNC_ACTIVE_INNER_ARGES

    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 109

    FUNC_ACTIVE              go to state 111
    FUNC_ACTIVE_INNER_ARGES  go to state 154
    CONST                    go to state 113


State 145

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   40 VALUE: '(' EXPRASION . ')'

    AND_OP  shift, and go to state 83
    GE_OP   shift, and go to state 84
    SE_OP   shift, and go to state 85
    NE_OP   shift, and go to state 86
    OR_OP   shift, and go to state 87
    EQL_OP  shift, and go to state 88
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '>'     shift, and go to state 94
    '<'     shift, and go to state 95
    ')'     shift, and go to state 155


State 146

   14 FUNC_BLOCK: '{' RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 156


State 147

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION . ';' '}'
   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE

    AND_OP  shift, and go to state 83
    GE_OP   shift, and go to state 84
    SE_OP   shift, and go to state 85
    NE_OP   shift, and go to state 86
    OR_OP   shift, and go to state 87
    EQL_OP  shift, and go to state 88
    ';'     shift, and go to state 157
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '>'     shift, and go to state 94
    '<'     shift, and go to state 95


State 148

   54 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT . ELSE STASTMENT
   55             | IF '(' EXPRASION ')' STASTMENT .

    ELSE  shift, and go to state 158

    $default  reduce using rule 55 (IF_STASTMENT)


State 149

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   61 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION . ';' EXPRASION ')' STASTMENT

    AND_OP  shift, and go to state 83
    GE_OP   shift, and go to state 84
    SE_OP   shift, and go to state 85
    NE_OP   shift, and go to state 86
    OR_OP   shift, and go to state 87
    EQL_OP  shift, and go to state 88
    ';'     shift, and go to state 159
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '>'     shift, and go to state 94
    '<'     shift, and go to state 95


State 150

   60 LOOP_STATMENT: WHILE '(' EXPRASION ')' STASTMENT .

    $default  reduce using rule 60 (LOOP_STATMENT)


State 151

   74 VFDEC: INNER_ARGS ':' TYPE ';' .
   75      | INNER_ARGS ':' TYPE ';' . VFDEC

    ID  shift, and go to state 15

    ID        [reduce using rule 74 (VFDEC)]
    $default  reduce using rule 74 (VFDEC)

    INNER_ARGS  go to state 74
    VFDEC       go to state 160


State 152

   49 FUNC_ACTIVE_INNER_ARGES: ID ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 49 (FUNC_ACTIVE_INNER_ARGES)


State 153

   51 FUNC_ACTIVE_INNER_ARGES: FUNC_ACTIVE ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 51 (FUNC_ACTIVE_INNER_ARGES)


State 154

   50 FUNC_ACTIVE_INNER_ARGES: CONST ',' FUNC_ACTIVE_INNER_ARGES .

    $default  reduce using rule 50 (FUNC_ACTIVE_INNER_ARGES)


State 155

   40 VALUE: '(' EXPRASION ')' .

    $default  reduce using rule 40 (VALUE)


State 156

   14 FUNC_BLOCK: '{' RETURN EXPRASION ';' '}' .

    $default  reduce using rule 14 (FUNC_BLOCK)


State 157

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' . '}'

    '}'  shift, and go to state 161


State 158

   54 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE . STASTMENT

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 20

    EXPRASION              go to state 53
    FUNC_ACTIVE            go to state 54
    IF_STASTMENT           go to state 56
    STASTMENT              go to state 162
    LOOP_STATMENT          go to state 58
    COMPUND_STATMENT_PROC  go to state 59
    CONST                  go to state 65


State 159

   61 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' . EXPRASION ')' STASTMENT

    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50

    EXPRASION    go to state 163
    FUNC_ACTIVE  go to state 54
    CONST        go to state 65


State 160

   75 VFDEC: INNER_ARGS ':' TYPE ';' VFDEC .

    $default  reduce using rule 75 (VFDEC)


State 161

   15 FUNC_BLOCK: '{' INNER_COMPUND_STATMENT RETURN EXPRASION ';' '}' .

    $default  reduce using rule 15 (FUNC_BLOCK)


State 162

   54 IF_STASTMENT: IF '(' EXPRASION ')' STASTMENT ELSE STASTMENT .

    $default  reduce using rule 54 (IF_STASTMENT)


State 163

   26 EXPRASION: EXPRASION . NE_OP VALUE
   27          | EXPRASION . AND_OP VALUE
   28          | EXPRASION . OR_OP VALUE
   29          | EXPRASION . '+' VALUE
   30          | EXPRASION . '-' VALUE
   31          | EXPRASION . '/' VALUE
   32          | EXPRASION . '*' VALUE
   33          | EXPRASION . EQL_OP VALUE
   34          | EXPRASION . GE_OP VALUE
   35          | EXPRASION . SE_OP VALUE
   36          | EXPRASION . '>' VALUE
   37          | EXPRASION . '<' VALUE
   61 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION . ')' STASTMENT

    AND_OP  shift, and go to state 83
    GE_OP   shift, and go to state 84
    SE_OP   shift, and go to state 85
    NE_OP   shift, and go to state 86
    OR_OP   shift, and go to state 87
    EQL_OP  shift, and go to state 88
    '+'     shift, and go to state 90
    '-'     shift, and go to state 91
    '*'     shift, and go to state 92
    '/'     shift, and go to state 93
    '>'     shift, and go to state 94
    '<'     shift, and go to state 95
    ')'     shift, and go to state 164


State 164

   61 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' . STASTMENT

    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    WHILE    shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    INT_NUM  shift, and go to state 42
    F_NUM    shift, and go to state 43
    HEX_NUM  shift, and go to state 44
    ID       shift, and go to state 45
    '-'      shift, and go to state 46
    '!'      shift, and go to state 47
    '^'      shift, and go to state 48
    '&'      shift, and go to state 49
    '('      shift, and go to state 50
    '{'      shift, and go to state 20

    EXPRASION              go to state 53
    FUNC_ACTIVE            go to state 54
    IF_STASTMENT           go to state 56
    STASTMENT              go to state 165
    LOOP_STATMENT          go to state 58
    COMPUND_STATMENT_PROC  go to state 59
    CONST                  go to state 65


State 165

   61 LOOP_STATMENT: FOR '(' EXPRASION ';' EXPRASION ';' EXPRASION ')' STASTMENT .

    $default  reduce using rule 61 (LOOP_STATMENT)
